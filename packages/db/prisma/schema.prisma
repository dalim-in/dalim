// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum FontType {
  TTF
  OTF
  WOFF
  WOFF2
  OTHER
}

enum FontCategory {
  SANS_SERIF
  SERIF
  MONOSPACE
  DISPLAY
  HANDWRITING
  SCRIPT
  DECORATIVE
  OTHER
}

enum GraphicCategory {
  LOGO
  ILLUSTRATION
  ICON
  BANNER
  POSTER
  INFOGRAPHIC
  TEMPLATE
  MOCKUP
  PATTERN
  TEXTURE
  OTHER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  bio           String?
  summary       String?
  image         String?
  coverImage    String?
  website       String?
  twitter       String?
  instagram     String?
  linkedin      String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)
  isTwoFactorAuthEnabled Boolean   @default(false)
  twoFactorAuthVerified  DateTime?

  accounts Account[]
  sessions Session[]
  fonts    Font[]
  graphics Graphic[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Font {
  id             String   @id @default(cuid())
  name           String
  description    String?  @db.Text
  type           FontType
  category       FontCategory?
  fontFiles      String?
  previewUrl     String
  downloadUrl    String
  zipFileUrl     String?
  licenceUrl     String?   
  viewCount      Int      @default(0)
  downloadCount  Int      @default(0)
  featured       Boolean  @default(false)
  tags           String[] @default([])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicId       String?  

  @@index([userId])
  @@map(name: "fonts")
}

model Graphic {
  id            String          @id @default(cuid())
  title         String
  description   String?         @db.Text
  category      GraphicCategory
  images        String[]        @default([])
  imagePublicIds String[]       @default([])
  link          String?
  tags          String[]        @default([])
  viewCount     Int             @default(0)
  downloadCount Int             @default(0)
  featured      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([featured])
  @@map(name: "graphics")
}
