{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/lib/rehype-component.ts", "../../../src/lib/rehype-npm-command.ts"],
  "sourcesContent": ["import { getHighlighter } from \"@shikijs/compat\"\nimport {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer2/source-files\"\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport rehypeSlug from \"rehype-slug\"\nimport { codeImport } from \"remark-code-import\"\nimport remarkGfm from \"remark-gfm\"\nimport { visit } from \"unist-util-visit\"\n\nimport { rehypeComponent } from \"./src/lib/rehype-component\"\nimport { rehypeNpmCommand } from \"./src/lib/rehype-npm-command\"\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n}\n\nconst LinksProperties = defineNestedType(() => ({\n  name: \"LinksProperties\",\n  fields: {\n    doc: {\n      type: \"string\",\n    },\n    api: {\n      type: \"string\",\n    },\n  },\n}))\n\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `blog/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n    image: {\n      type: \"string\",\n      required: true,\n    },\n    authors: {\n      type: \"list\",\n      of: { type: \"string\" },\n      required: true,\n    },\n    categories: {\n      type: \"list\",\n      of: {\n        type: \"enum\",\n        options: [\"news\", \"education\"],\n        default: \"news\",\n      },\n      required: true,\n    },\n    related: {\n      type: \"list\",\n      of: {\n        type: \"string\",\n      },\n    },\n  },\n  computedFields: computedFields,\n}));\n\nexport const Doc = defineDocumentType(() => ({\n  name: \"Doc\",\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n    links: {\n      type: \"nested\",\n      of: LinksProperties,\n    },\n    featured: {\n      type: \"boolean\",\n      default: false,\n      required: false,\n    },\n    component: {\n      type: \"boolean\",\n      default: false,\n      required: false,\n    },\n    toc: {\n      type: \"boolean\",\n      default: true,\n      required: false,\n    },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: \"./src/content\",\n  documentTypes: [Doc, Post],\n  mdx: {\n    remarkPlugins: [remarkGfm, codeImport],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeComponent,\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            const [codeEl] = node.children\n            if (codeEl.tagName !== \"code\") {\n              return\n            }\n\n            if (codeEl.data?.meta) {\n              // Extract event from meta and pass it down the tree.\n              const regex = /event=\"([^\"]*)\"/\n              const match = codeEl.data?.meta.match(regex)\n              if (match) {\n                node.__event__ = match ? match[1] : null\n                codeEl.data.meta = codeEl.data.meta.replace(regex, \"\")\n              }\n            }\n\n            node.__rawString__ = codeEl.children?.[0].value\n            node.__src__ = node.properties?.__src__\n            node.__style__ = node.properties?.__style__\n          }\n        })\n      },\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-dark\",\n          getHighlighter,\n          onVisitLine(node) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }]\n            }\n          },\n          onVisitHighlightedLine(node) {\n            node.properties.className.push(\"line--highlighted\")\n          },\n          onVisitHighlightedWord(node) {\n            node.properties.className = [\"word--highlighted\"]\n          },\n        },\n      ],\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"div\") {\n            if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\n              return\n            }\n\n            const preElement = node.children.at(-1)\n            if (preElement.tagName !== \"pre\") {\n              return\n            }\n\n            preElement.properties[\"__withMeta__\"] =\n              node.children.at(0).tagName === \"div\"\n            preElement.properties[\"__rawString__\"] = node.__rawString__\n\n            if (node.__src__) {\n              preElement.properties[\"__src__\"] = node.__src__\n            }\n\n            if (node.__event__) {\n              preElement.properties[\"__event__\"] = node.__event__\n            }\n\n            if (node.__style__) {\n              preElement.properties[\"__style__\"] = node.__style__\n            }\n          }\n        })\n      },\n      rehypeNpmCommand,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n    ],\n  },\n})", " \nimport { UnistNode, UnistTree } from \"@/src/types/unist\" \nimport { visit } from \"unist-util-visit\"\n \n\nexport function rehypeComponent() {\n  return async (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      // src prop overrides both name and fileName.\n      const { value: srcPath } =\n        (getNodeAttributeByName(node, \"src\") as {\n          name: string\n          value?: string\n          type?: string\n        }) || {}\n\n      if (node.name === \"ComponentSource\") {\n        const name = getNodeAttributeByName(node, \"name\")?.value as string\n\n        if (!name && !srcPath) {\n          return null\n        }\n\n         \n      }\n\n      if (node.name === \"ComponentPreview\") {\n        const name = getNodeAttributeByName(node, \"name\")?.value as string\n\n        if (!name) {\n          return null\n        }\n\n         \n      }\n\n      // if (node.name === \"ComponentExample\") {\n      //   const source = getComponentSourceFileContent(node)\n      //   if (!source) {\n      //     return\n      //   }\n\n      //   // Replace the Example component with a pre element.\n      //   node.children?.push(\n      //     u(\"element\", {\n      //       tagName: \"pre\",\n      //       properties: {\n      //         __src__: src,\n      //       },\n      //       children: [\n      //         u(\"element\", {\n      //           tagName: \"code\",\n      //           properties: {\n      //             className: [\"language-tsx\"],\n      //           },\n      //           children: [\n      //             {\n      //               type: \"text\",\n      //               value: source,\n      //             },\n      //           ],\n      //         }),\n      //       ],\n      //     })\n      //   )\n\n      //   const extractClassname = getNodeAttributeByName(\n      //     node,\n      //     \"extractClassname\"\n      //   )\n      //   if (\n      //     extractClassname &&\n      //     typeof extractClassname.value !== \"undefined\" &&\n      //     extractClassname.value !== \"false\"\n      //   ) {\n      //     // Extract className from string\n      //     // TODO: Use @swc/core and a visitor to extract this.\n      //     // For now, a simple regex should do.\n      //     const values = source.match(/className=\"(.*)\"/)\n      //     const className = values ? values[1] : \"\"\n\n      //     // Add the className as a jsx prop so we can pass it to the copy button.\n      //     node.attributes?.push({\n      //       name: \"extractedClassNames\",\n      //       type: \"mdxJsxAttribute\",\n      //       value: className,\n      //     })\n\n      //     // Add a pre element with the className only.\n      //     node.children?.push(\n      //       u(\"element\", {\n      //         tagName: \"pre\",\n      //         properties: {},\n      //         children: [\n      //           u(\"element\", {\n      //             tagName: \"code\",\n      //             properties: {\n      //               className: [\"language-tsx\"],\n      //             },\n      //             children: [\n      //               {\n      //                 type: \"text\",\n      //                 value: className,\n      //               },\n      //             ],\n      //           }),\n      //         ],\n      //       })\n      //     )\n      //   }\n      // }\n\n      // if (node.name === \"ComponentSource\") {\n      //   const source = getComponentSourceFileContent(node)\n      //   if (!source) {\n      //     return\n      //   }\n\n      //   // Replace the Source component with a pre element.\n      //   node.children?.push(\n      //     u(\"element\", {\n      //       tagName: \"pre\",\n      //       properties: {\n      //         __src__: src,\n      //       },\n      //       children: [\n      //         u(\"element\", {\n      //           tagName: \"code\",\n      //           properties: {\n      //             className: [\"language-tsx\"],\n      //           },\n      //           children: [\n      //             {\n      //               type: \"text\",\n      //               value: source,\n      //             },\n      //           ],\n      //         }),\n      //       ],\n      //     })\n      //   )\n      // }\n    })\n  }\n}\n\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\n  return node.attributes?.find((attribute) => attribute.name === name)\n}\n ", "import { UnistNode, UnistTree } from \"@/src/types/unist\"\nimport { visit } from \"unist-util-visit\"\n\nexport function rehypeNpmCommand() {\n  return (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      if (node.type !== \"element\" || node?.tagName !== \"pre\") {\n        return\n      }\n\n      // npm install.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npm install\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"yarn add\"\n        )\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"pnpm add\"\n        )\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"bun add\"\n        )\n      }\n\n      // npx create-.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"yarn create \"\n        )\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"pnpm create \"\n        )\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"bunx --bun\"\n        )\n      }\n\n      // npm create.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npm create\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npm create\",\n          \"yarn create\"\n        )\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npm create\",\n          \"pnpm create\"\n        )\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npm create\",\n          \"bun create\"\n        )\n      }\n\n      // npx.\n      if (\n        node.properties?.[\"__rawString__\"]?.startsWith(\"npx\") &&\n        !node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")\n      ) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"pnpm dlx\"\n        )\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"bunx --bun\"\n        )\n      }\n\n      // npm run.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npm run\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npm run\",\n          \"yarn\"\n        )\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npm run\",\n          \"pnpm\"\n        )\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\"npm run\", \"bun\")\n      }\n    })\n  }\n}"],
  "mappings": "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",
  "names": ["visit", "visit", "visit"]
}
