{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shader-rgb",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/shader-rgb.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport * as THREE from \"three\"\n\nexport function ShaderRGB() {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const sceneRef = useRef<{\n    scene: THREE.Scene | null\n    camera: THREE.OrthographicCamera | null\n    renderer: THREE.WebGLRenderer | null\n    mesh: THREE.Mesh | null\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    uniforms: any\n    animationId: number | null\n  }>({\n    scene: null,\n    camera: null,\n    renderer: null,\n    mesh: null,\n    uniforms: null,\n    animationId: null,\n  })\n\n  useEffect(() => {\n    if (!canvasRef.current) return\n\n    const canvas = canvasRef.current\n    const { current: refs } = sceneRef\n\n    const vertexShader = `\n      attribute vec3 position;\n      void main() {\n        gl_Position = vec4(position, 1.0);\n      }\n    `\n\n    const fragmentShader = `\n      precision highp float;\n      uniform vec2 resolution;\n      uniform float time;\n      uniform float xScale;\n      uniform float yScale;\n      uniform float distortion;\n\n      void main() {\n        vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n        \n        float d = length(p) * distortion;\n        \n        float rx = p.x * (1.0 + d);\n        float gx = p.x;\n        float bx = p.x * (1.0 - d);\n\n        float r = 0.05 / abs(p.y + sin((rx + time) * xScale) * yScale);\n        float g = 0.05 / abs(p.y + sin((gx + time) * xScale) * yScale);\n        float b = 0.05 / abs(p.y + sin((bx + time) * xScale) * yScale);\n        \n        gl_FragColor = vec4(r, g, b, 1.0);\n      }\n    `\n\n    const initScene = () => {\n      refs.scene = new THREE.Scene()\n      refs.renderer = new THREE.WebGLRenderer({ canvas })\n      refs.renderer.setPixelRatio(window.devicePixelRatio)\n      refs.renderer.setClearColor(new THREE.Color(0x000000))\n\n      refs.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, -1)\n\n      refs.uniforms = {\n        resolution: { value: [window.innerWidth, window.innerHeight] },\n        time: { value: 0.0 },\n        xScale: { value: 1.0 },\n        yScale: { value: 0.5 },\n        distortion: { value: 0.05 },\n      }\n\n      const position = [\n        -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, -1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0,\n        1.0, 0.0, 1.0, 1.0, 0.0,\n      ]\n\n      const positions = new THREE.BufferAttribute(new Float32Array(position), 3)\n      const geometry = new THREE.BufferGeometry()\n      geometry.setAttribute(\"position\", positions)\n\n      const material = new THREE.RawShaderMaterial({\n        vertexShader,\n        fragmentShader,\n        uniforms: refs.uniforms,\n        side: THREE.DoubleSide,\n      })\n\n      refs.mesh = new THREE.Mesh(geometry, material)\n      refs.scene.add(refs.mesh)\n\n      handleResize()\n    }\n\n    const animate = () => {\n      if (refs.uniforms) refs.uniforms.time.value += 0.01\n      if (refs.renderer && refs.scene && refs.camera) {\n        refs.renderer.render(refs.scene, refs.camera)\n      }\n      refs.animationId = requestAnimationFrame(animate)\n    }\n\n    const handleResize = () => {\n      if (!refs.renderer || !refs.uniforms) return\n      const width = window.innerWidth\n      const height = window.innerHeight\n      refs.renderer.setSize(width, height, false)\n      refs.uniforms.resolution.value = [width, height]\n    }\n\n    initScene()\n    animate()\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      if (refs.animationId) cancelAnimationFrame(refs.animationId)\n      window.removeEventListener(\"resize\", handleResize)\n      if (refs.mesh) {\n        refs.scene?.remove(refs.mesh)\n        refs.mesh.geometry.dispose()\n        if (refs.mesh.material instanceof THREE.Material) {\n          refs.mesh.material.dispose()\n        }\n      }\n      refs.renderer?.dispose()\n    }\n  }, [])\n\n  return <canvas ref={canvasRef} className=\"h-full w-full\" />\n}\n",
      "type": "registry:ui"
    }
  ]
}