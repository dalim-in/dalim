{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "void-animation",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/void-animation.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useRef, useState } from \"react\"\n\ninterface VoidBallAnimationProps {\n  width?: number\n  height?: number\n  voidBallsAmount?: number\n  voidBallsColor?: string\n  plasmaBallsColor?: string\n  plasmaBallsStroke?: string\n  gooeyCircleSize?: number\n  blendMode?: string\n  className?: string\n}\n\ninterface VoidBall {\n  r: number\n  cx: number\n  cy: number\n  fill: string\n  stroke: string\n  strokeWidth: number\n  strokeDashArray: number\n}\n\ninterface PlasmaBall {\n  id: string\n  x: number\n  y: number\n  targetX: number\n  targetY: number\n  scale: number\n  opacity: number\n}\n\nexport function VoidAnimation({\n  width = 800,\n  height = 600,\n  voidBallsAmount = 0,\n  voidBallsColor = \"#7700FF\",\n  plasmaBallsColor = \"#FF00FF\",\n  plasmaBallsStroke = \"#0000FF\",\n  gooeyCircleSize = 30,\n  blendMode = \"difference\",\n  className = \"\",\n}: VoidBallAnimationProps) {\n  const svgRef = useRef<SVGSVGElement>(null)\n  const [voidBalls, setVoidBalls] = useState<VoidBall[]>([])\n  const [plasmaBalls, setPlasmaBalls] = useState<PlasmaBall[]>([])\n  const lastUserGesture = useRef(0)\n  const animationFrame = useRef<number | null>(null)\n\n  // Initialize void balls\n  useEffect(() => {\n    const voidBallsMaxRadius = Math.sqrt((width * height) / Math.PI) / 3\n    const balls = Array.from({ length: voidBallsAmount }, () => ({\n      r: Math.max(\n        Math.min(voidBallsMaxRadius * Math.random() * 2, voidBallsMaxRadius),\n        voidBallsMaxRadius / 1.5\n      ),\n      cx: Math.random() * width,\n      cy: Math.random() * height,\n      fill: \"url(#void-ball-inner)\",\n      stroke: voidBallsColor,\n      strokeWidth: 10,\n      strokeDashArray: voidBallsMaxRadius / 10,\n    }))\n    setVoidBalls(balls)\n  }, [width, height, voidBallsAmount, voidBallsColor])\n\n  // Add plasma ball\n  const addPlasmaBall = (x: number, y: number) => {\n    const id = Math.random().toString(36).substr(2, 9)\n    const spreadFactor = 12\n    const targetX = x + (Math.random() - 0.5) * gooeyCircleSize * spreadFactor\n    const targetY = y + (Math.random() - 0.5) * gooeyCircleSize * spreadFactor\n\n    const newBall: PlasmaBall = {\n      id,\n      x,\n      y,\n      targetX,\n      targetY,\n      scale: 1,\n      opacity: 1,\n    }\n\n    setPlasmaBalls((prev) => [...prev, newBall])\n\n    // Animate the ball\n    const startTime = Date.now()\n    const duration = 2000\n\n    const animate = () => {\n      const elapsed = Date.now() - startTime\n      const progress = Math.min(elapsed / duration, 1)\n\n      if (progress >= 1) {\n        setPlasmaBalls((prev) => prev.filter((ball) => ball.id !== id))\n        return\n      }\n\n      setPlasmaBalls((prev) =>\n        prev.map((ball) =>\n          ball.id === id\n            ? {\n                ...ball,\n                x: x + (targetX - x) * progress,\n                y: y + (targetY - y) * progress,\n                scale: 1 - progress,\n                opacity: 1 - progress,\n              }\n            : ball\n        )\n      )\n\n      requestAnimationFrame(animate)\n    }\n\n    requestAnimationFrame(animate)\n  }\n\n  // Handle mouse/touch events\n  const handleInteraction = (event: React.MouseEvent | React.TouchEvent) => {\n    event.preventDefault()\n\n    let clientX: number, clientY: number\n\n    if (\"touches\" in event) {\n      clientX = event.touches[0].clientX\n      clientY = event.touches[0].clientY\n    } else {\n      clientX = event.clientX\n      clientY = event.clientY\n    }\n\n    const rect = svgRef.current?.getBoundingClientRect()\n    if (rect) {\n      const x = clientX - rect.left\n      const y = clientY - rect.top\n\n      addPlasmaBall(x, y)\n\n      // Add plasma balls at void ball positions\n      voidBalls.forEach((voidBall) => {\n        addPlasmaBall(voidBall.cx, voidBall.cy)\n      })\n    }\n\n    lastUserGesture.current = Date.now()\n  }\n\n  // Auto-render animation\n  useEffect(() => {\n    const autoRender = () => {\n      if (Date.now() - lastUserGesture.current > 500) {\n        // Simple noise simulation\n        const time = Date.now() * 0.0001\n        const noiseX = (Math.sin(time * 2) + 1) / 2\n        const noiseY = (Math.cos(time * 3) + 1) / 2\n        const x = noiseX * width\n        const y = noiseY * height\n\n        addPlasmaBall(x, y)\n\n        voidBalls.forEach((voidBall) => {\n          addPlasmaBall(voidBall.cx, voidBall.cy)\n        })\n      }\n\n      animationFrame.current = requestAnimationFrame(autoRender)\n    }\n\n    animationFrame.current = requestAnimationFrame(autoRender)\n\n    return () => {\n      if (animationFrame.current) {\n        cancelAnimationFrame(animationFrame.current)\n      }\n    }\n  }, [width, height, voidBalls])\n\n  return (\n    <div className={`overflow-hidden ${className}`} style={{ width, height }}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={height}\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"cursor-none\"\n        style={{ filter: \"url(#gooey-filter)\" }}\n        onMouseMove={handleInteraction}\n        onClick={handleInteraction}\n        onTouchMove={handleInteraction}\n      >\n        <defs>\n          <radialGradient id=\"void-ball-inner\">\n            <stop offset=\"50%\" stopColor=\"#000000\" />\n            <stop offset=\"100%\" stopColor=\"#FF0000\" />\n          </radialGradient>\n\n          <filter id=\"gooey-filter\">\n            <feGaussianBlur\n              in=\"SourceGraphic\"\n              colorInterpolationFilters=\"sRGB\"\n              stdDeviation=\"15\"\n              result=\"blur\"\n            />\n            <feColorMatrix\n              in=\"blur\"\n              mode=\"matrix\"\n              values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 50 -16\"\n              result=\"gooey\"\n            />\n            <feTurbulence baseFrequency=\"0.03\" numOctaves=\"1\" />\n            <feDisplacementMap\n              in=\"blur\"\n              scale=\"30\"\n              xChannelSelector=\"B\"\n              yChannelSelector=\"G\"\n            />\n            <feBlend in=\"gooey\" mode={blendMode as any} />\n          </filter>\n        </defs>\n\n        {/* Void Balls */}\n        {voidBalls.map((ball, index) => (\n          <circle\n            key={index}\n            r={ball.r}\n            cx={ball.cx}\n            cy={ball.cy}\n            fill={ball.fill}\n            stroke={ball.stroke}\n            strokeWidth={ball.strokeWidth}\n            strokeDasharray={ball.strokeDashArray}\n            strokeLinecap=\"round\"\n            style={{\n              animation:\n                \"strokeDashoffset 100s linear infinite, strokeWidth 1s linear infinite alternate\",\n            }}\n          />\n        ))}\n\n        {/* Plasma Balls */}\n        {plasmaBalls.map((ball) => (\n          <circle\n            key={ball.id}\n            r={gooeyCircleSize}\n            cx={ball.x}\n            cy={ball.y}\n            fill={plasmaBallsColor}\n            stroke={plasmaBallsStroke}\n            strokeWidth={gooeyCircleSize / 3}\n            opacity={ball.opacity}\n            transform={`scale(${ball.scale})`}\n            style={{ transformOrigin: `${ball.x}px ${ball.y}px` }}\n          />\n        ))}\n      </svg>\n\n      <style jsx>{`\n        @keyframes strokeDashoffset {\n          from {\n            stroke-dashoffset: 0px;\n          }\n          to {\n            stroke-dashoffset: 10000px;\n          }\n        }\n\n        @keyframes strokeWidth {\n          from {\n            stroke-width: 20px;\n          }\n          to {\n            stroke-width: 40px;\n          }\n        }\n      `}</style>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}