{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shader-lines",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/shader-lines.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\"\n\nimport { useEffect, useRef } from \"react\"\n\ndeclare global {\n  interface Window {\n    THREE: any\n  }\n}\n\nexport function ShaderLines() {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const sceneRef = useRef<{\n    camera: any\n    scene: any\n    renderer: any\n    uniforms: any\n    animationId: number | null\n  }>({\n    camera: null,\n    scene: null,\n    renderer: null,\n    uniforms: null,\n    animationId: null,\n  })\n\n  useEffect(() => {\n    // Load Three.js dynamically\n    const script = document.createElement(\"script\")\n    script.src =\n      \"https://cdnjs.cloudflare.com/ajax/libs/three.js/89/three.min.js\"\n    script.onload = () => {\n      if (containerRef.current && window.THREE) {\n        initThreeJS()\n      }\n    }\n    document.head.appendChild(script)\n\n    return () => {\n      // Cleanup\n      if (sceneRef.current.animationId) {\n        cancelAnimationFrame(sceneRef.current.animationId)\n      }\n      if (sceneRef.current.renderer) {\n        sceneRef.current.renderer.dispose()\n      }\n      document.head.removeChild(script)\n    }\n  }, [])\n\n  const initThreeJS = () => {\n    if (!containerRef.current || !window.THREE) return\n\n    const THREE = window.THREE\n    const container = containerRef.current\n\n    // Clear any existing content\n    container.innerHTML = \"\"\n\n    // Initialize camera\n    const camera = new THREE.Camera()\n    camera.position.z = 1\n\n    // Initialize scene\n    const scene = new THREE.Scene()\n\n    // Create geometry\n    const geometry = new THREE.PlaneBufferGeometry(2, 2)\n\n    // Define uniforms\n    const uniforms = {\n      time: { type: \"f\", value: 1.0 },\n      resolution: { type: \"v2\", value: new THREE.Vector2() },\n    }\n\n    // Vertex shader\n    const vertexShader = `\n      void main() {\n        gl_Position = vec4( position, 1.0 );\n      }\n    `\n\n    // Fragment shader\n    const fragmentShader = `\n      #define TWO_PI 6.2831853072\n      #define PI 3.14159265359\n\n      precision highp float;\n      uniform vec2 resolution;\n      uniform float time;\n        \n      float random (in float x) {\n          return fract(sin(x)*1e4);\n      }\n      float random (vec2 st) {\n          return fract(sin(dot(st.xy,\n                               vec2(12.9898,78.233)))*\n              43758.5453123);\n      }\n      \n      varying vec2 vUv;\n\n      void main(void) {\n        vec2 uv = (gl_FragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n        \n        vec2 fMosaicScal = vec2(4.0, 2.0);\n        vec2 vScreenSize = vec2(256,256);\n        uv.x = floor(uv.x * vScreenSize.x / fMosaicScal.x) / (vScreenSize.x / fMosaicScal.x);\n        uv.y = floor(uv.y * vScreenSize.y / fMosaicScal.y) / (vScreenSize.y / fMosaicScal.y);       \n          \n        float t = time*0.06+random(uv.x)*0.4;\n        float lineWidth = 0.0008;\n\n        vec3 color = vec3(0.0);\n        for(int j = 0; j < 3; j++){\n          for(int i=0; i < 5; i++){\n            color[j] += lineWidth*float(i*i) / abs(fract(t - 0.01*float(j)+float(i)*0.01)*1.0 - length(uv));        \n          }\n        }\n\n        gl_FragColor = vec4(color[2],color[1],color[0],1.0);\n      }\n    `\n\n    // Create material\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n    })\n\n    // Create mesh and add to scene\n    const mesh = new THREE.Mesh(geometry, material)\n    scene.add(mesh)\n\n    // Initialize renderer\n    const renderer = new THREE.WebGLRenderer()\n    renderer.setPixelRatio(window.devicePixelRatio)\n    container.appendChild(renderer.domElement)\n\n    // Store references\n    sceneRef.current = {\n      camera,\n      scene,\n      renderer,\n      uniforms,\n      animationId: null,\n    }\n\n    // Handle resize\n    const onWindowResize = () => {\n      const rect = container.getBoundingClientRect()\n      renderer.setSize(rect.width, rect.height)\n      uniforms.resolution.value.x = renderer.domElement.width\n      uniforms.resolution.value.y = renderer.domElement.height\n    }\n\n    onWindowResize()\n    window.addEventListener(\"resize\", onWindowResize, false)\n\n    // Animation loop\n    const animate = () => {\n      sceneRef.current.animationId = requestAnimationFrame(animate)\n      uniforms.time.value += 0.05\n      renderer.render(scene, camera)\n    }\n\n    animate()\n  }\n\n  return <div ref={containerRef} className=\"absolute h-full w-full\" />\n}\n",
      "type": "registry:ui"
    }
  ]
}