{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "qr-code",
  "type": "registry:example",
  "registryDependencies": [
    "ai"
  ],
  "files": [
    {
      "path": "registry/default/examples/ai/qr-code.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { CheckIcon, DownloadIcon } from \"lucide-react\"\n\nimport type { QRCodeResult } from \"@/registry/default/ui/ai/tools/qr-code-tools\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\"\n\nexport function QRCodeDisplay({ data }: { data: QRCodeResult }) {\n  const [downloading, setDownloading] = React.useState(false)\n  const [downloaded, setDownloaded] = React.useState(false)\n  const [error, setError] = React.useState<string | null>(null)\n\n  const handleDownload = async () => {\n    setDownloading(true)\n    setError(null)\n    try {\n      // Convert data URL to blob\n      const response = await fetch(data.output)\n      const blob = await response.blob()\n      const url = URL.createObjectURL(blob)\n      const a = document.createElement(\"a\")\n      a.href = url\n      a.download = \"qrcode.png\"\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      URL.revokeObjectURL(url)\n      setDownloaded(true)\n      // Brief success state similar to copy buttons\n      setTimeout(() => setDownloaded(false), 1200)\n    } catch (error) {\n      console.error(\"Failed to download QR code:\", error)\n      setError(\"Failed to download. Please try again.\")\n    } finally {\n      setDownloading(false)\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>QR Code</CardTitle>\n        <CardDescription>\n          {data.data.length > 50 ? `${data.data.slice(0, 50)}...` : data.data}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center gap-4\">\n        <div\n          className=\"w-full rounded-lg bg-white p-4\"\n          style={{ maxWidth: `${data.size}px` }}\n        >\n          <img\n            src={data.output}\n            alt={`QR code encoding ${\n              data.data.length > 50\n                ? `'${data.data.slice(0, 50)}...'`\n                : `'${data.data}'`\n            }`}\n            width={data.size}\n            height={data.size}\n            loading=\"lazy\"\n            decoding=\"async\"\n            className=\"h-auto w-full\"\n          />\n        </div>\n        <div className=\"text-muted-foreground text-sm\">Size: {data.size}px</div>\n        <Button\n          onClick={handleDownload}\n          disabled={downloading}\n          className=\"w-full\"\n          aria-busy={downloading}\n          aria-live=\"polite\"\n          aria-label={\n            downloaded\n              ? \"QR code saved\"\n              : downloading\n                ? \"Downloading QR code\"\n                : \"Download QR code as PNG\"\n          }\n        >\n          {downloaded ? (\n            <>\n              <CheckIcon className=\"mr-1.5\" />\n              Saved\n            </>\n          ) : (\n            <>\n              <DownloadIcon className=\"mr-1.5\" />\n              {downloading ? \"Downloading...\" : \"Download PNG\"}\n            </>\n          )}\n        </Button>\n        {error ? (\n          <div\n            role=\"status\"\n            aria-live=\"assertive\"\n            className=\"w-full text-sm text-red-600\"\n          >\n            {error}\n          </div>\n        ) : null}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default QRCodeDisplay\n",
      "type": "registry:example"
    }
  ]
}