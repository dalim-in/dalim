{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shader-animation",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/shader-animation.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport * as THREE from \"three\"\n\nexport function ShaderAnimation() {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const sceneRef = useRef<{\n    camera: THREE.Camera\n    scene: THREE.Scene\n    renderer: THREE.WebGLRenderer\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    uniforms: any\n    animationId: number\n  } | null>(null)\n\n  useEffect(() => {\n    if (!containerRef.current) return\n\n    const container = containerRef.current\n\n    // Vertex shader\n    const vertexShader = `\n      void main() {\n        gl_Position = vec4( position, 1.0 );\n      }\n    `\n\n    // Fragment shader\n    const fragmentShader = `\n      #define TWO_PI 6.2831853072\n      #define PI 3.14159265359\n\n      precision highp float;\n      uniform vec2 resolution;\n      uniform float time;\n\n      void main(void) {\n        vec2 uv = (gl_FragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n        float t = time*0.05;\n        float lineWidth = 0.002;\n\n        vec3 color = vec3(0.0);\n        for(int j = 0; j < 3; j++){\n          for(int i=0; i < 5; i++){\n            color[j] += lineWidth*float(i*i) / abs(fract(t - 0.01*float(j)+float(i)*0.01)*5.0 - length(uv) + mod(uv.x+uv.y, 0.2));\n          }\n        }\n        \n        gl_FragColor = vec4(color[0],color[1],color[2],1.0);\n      }\n    `\n\n    // Initialize Three.js scene\n    const camera = new THREE.Camera()\n    camera.position.z = 1\n\n    const scene = new THREE.Scene()\n    const geometry = new THREE.PlaneGeometry(2, 2)\n\n    const uniforms = {\n      time: { type: \"f\", value: 1.0 },\n      resolution: { type: \"v2\", value: new THREE.Vector2() },\n    }\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n    })\n\n    const mesh = new THREE.Mesh(geometry, material)\n    scene.add(mesh)\n\n    // Renderer with transparency\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })\n    renderer.setPixelRatio(window.devicePixelRatio)\n    renderer.setClearColor(0x000000, 0) // transparent background\n\n    container.appendChild(renderer.domElement)\n\n    // Handle window resize\n    const onWindowResize = () => {\n      const width = container.clientWidth\n      const height = container.clientHeight\n      renderer.setSize(width, height)\n      uniforms.resolution.value.x = renderer.domElement.width\n      uniforms.resolution.value.y = renderer.domElement.height\n    }\n\n    // Initial resize\n    onWindowResize()\n    window.addEventListener(\"resize\", onWindowResize, false)\n\n    // Animation loop\n    const animate = () => {\n      const animationId = requestAnimationFrame(animate)\n      uniforms.time.value += 0.05\n      renderer.render(scene, camera)\n\n      if (sceneRef.current) {\n        sceneRef.current.animationId = animationId\n      }\n    }\n\n    // Store scene references for cleanup\n    sceneRef.current = {\n      camera,\n      scene,\n      renderer,\n      uniforms,\n      animationId: 0,\n    }\n\n    // Start animation\n    animate()\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener(\"resize\", onWindowResize)\n\n      if (sceneRef.current) {\n        cancelAnimationFrame(sceneRef.current.animationId)\n\n        if (container && sceneRef.current.renderer.domElement) {\n          container.removeChild(sceneRef.current.renderer.domElement)\n        }\n\n        sceneRef.current.renderer.dispose()\n        geometry.dispose()\n        material.dispose()\n      }\n    }\n  }, [])\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"h-screen w-full\"\n      style={{\n        background: \"transparent\",\n        overflow: \"hidden\",\n      }}\n    />\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}