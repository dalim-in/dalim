{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "webgl-blob",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/webgl-blob.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef } from \"react\"\n\nconst WebGLBlob = ({\n  particles = 18,\n  energy = 0.2,\n  blobiness = 1.6,\n  brightness = 1.1,\n  offset = 30000.0,\n  width = \"100vw\",\n  height = \"100vh\",\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const animationRef = useRef<number | null>(null)\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const gl = canvas.getContext(\"webgl\", { alpha: true })\n    if (!gl) {\n      console.error(\"WebGL not supported\")\n      return\n    }\n\n    gl.clearColor(0, 0, 0, 0)\n\n    gl.enable(gl.BLEND)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    // Vertex shader\n    const vertexShaderSource = `\n      attribute vec2 a_position;\n      void main(void) {\n        gl_Position = vec4(a_position, 0.0, 1.0);\n      }\n    `\n\n    // Fragment shader with alpha\n    const fragmentShaderSource = `\n      #ifdef GL_ES\n      precision mediump float;\n      #endif\n\n      uniform vec2 u_resolution;\n      uniform float u_millis;\n      uniform int u_particles;\n      uniform float u_energy;\n      uniform float u_blobiness;\n      uniform float u_brightness;\n      uniform float u_offset;\n\n      float rand(vec2 co) {\n        return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n      }\n\n      void main(void) {\n        vec2 pixel = (gl_FragCoord.xy / u_resolution.x);\n        float t = (u_millis + u_offset) * 0.001 * u_energy;\n        float a = 0.0, b = 0.0, c = 0.0;\n        vec2 particle;\n        vec2 center = vec2(0.5, 0.5 * (u_resolution.y / u_resolution.x));\n        float na, nb, nc, nd, d;\n        float size = float(u_particles);\n        float step = 1.0 / size;\n        float n = step;\n\n        for (int i = 0; i < 50; i++) {\n          if (i >= u_particles) break;\n          vec2 np = vec2(n, 0.0);\n          na = rand(np * 1.1);\n          nb = rand(np * 2.8);\n          nc = rand(np * 0.7);\n          nd = rand(np * 3.2);\n          particle = center;\n          particle.x += sin(t * na) * cos(t * nb) * 0.6;\n          particle.y += cos(t * nc) * sin(t * nd) * 0.4;\n          d = pow(1.2 * na / length(particle - pixel), u_blobiness);\n          if (float(i) < size * 0.3333) {\n            a += d;\n          } else if (float(i) < size * 0.6666) {\n            b += d;\n          } else {\n            c += d;\n          }\n          n += step;\n        }\n\n        vec3 col = vec3(a*c, b*c, a*b) * 0.0001 * u_brightness;\n \n        float alpha = clamp(length(col) * 5.0, 0.0, 1.0);\n\n        gl_FragColor = vec4(col, alpha);\n      }\n    `\n\n    const createShader = (type: number, source: string) => {\n      const shader = gl.createShader(type)!\n      gl.shaderSource(shader, source)\n      gl.compileShader(shader)\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(\"Shader compile error:\", gl.getShaderInfoLog(shader))\n        return null\n      }\n      return shader\n    }\n\n    const createProgram = (vs: WebGLShader, fs: WebGLShader) => {\n      const program = gl.createProgram()!\n      gl.attachShader(program, vs)\n      gl.attachShader(program, fs)\n      gl.linkProgram(program)\n      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error(\"Program link error:\", gl.getProgramInfoLog(program))\n        return null\n      }\n      return program\n    }\n\n    const vertexShader = createShader(gl.VERTEX_SHADER, vertexShaderSource)!\n    const fragmentShader = createShader(\n      gl.FRAGMENT_SHADER,\n      fragmentShaderSource\n    )!\n    const program = createProgram(vertexShader, fragmentShader)!\n    gl.useProgram(program)\n\n    const geometryBuffer = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, geometryBuffer)\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]),\n      gl.STATIC_DRAW\n    )\n\n    const positionLoc = gl.getAttribLocation(program, \"a_position\")\n    const uniforms = {\n      resolution: gl.getUniformLocation(program, \"u_resolution\"),\n      millis: gl.getUniformLocation(program, \"u_millis\"),\n      particles: gl.getUniformLocation(program, \"u_particles\"),\n      energy: gl.getUniformLocation(program, \"u_energy\"),\n      blobiness: gl.getUniformLocation(program, \"u_blobiness\"),\n      brightness: gl.getUniformLocation(program, \"u_brightness\"),\n      offset: gl.getUniformLocation(program, \"u_offset\"),\n    }\n\n    const resize = () => {\n      const displayWidth = canvas.clientWidth\n      const displayHeight = canvas.clientHeight\n      if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n        canvas.width = displayWidth\n        canvas.height = displayHeight\n      }\n      gl.viewport(0, 0, canvas.width, canvas.height)\n    }\n\n    const draw = (now: number) => {\n      resize()\n      gl.clear(gl.COLOR_BUFFER_BIT)\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, geometryBuffer)\n      gl.enableVertexAttribArray(positionLoc)\n      gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0)\n\n      gl.uniform2f(uniforms.resolution, canvas.width, canvas.height)\n      gl.uniform1f(uniforms.millis, now)\n      gl.uniform1i(uniforms.particles, particles)\n      gl.uniform1f(uniforms.energy, energy)\n      gl.uniform1f(uniforms.blobiness, blobiness)\n      gl.uniform1f(uniforms.brightness, brightness)\n      gl.uniform1f(uniforms.offset, offset)\n\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n      animationRef.current = requestAnimationFrame(draw)\n    }\n\n    animationRef.current = requestAnimationFrame(draw)\n\n    return () => {\n      if (animationRef.current) cancelAnimationFrame(animationRef.current)\n    }\n  }, [particles, energy, blobiness, brightness, offset])\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{\n        width,\n        height,\n        display: \"block\",\n      }}\n    />\n  )\n}\n\nexport { WebGLBlob }\n",
      "type": "registry:ui"
    }
  ]
}