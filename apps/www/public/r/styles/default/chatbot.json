{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chatbot",
  "type": "registry:example",
  "registryDependencies": [
    "ai"
  ],
  "files": [
    {
      "path": "registry/default/examples/ai/chatbot.tsx",
      "content": "'use client';\n\nimport {\n  Conversation,\n  ConversationContent,\n  ConversationScrollButton,\n} from '@/registry/default/ui/ai/conversation';\nimport { Message, MessageContent } from '@/registry/default/ui/ai/message';\nimport {\n  PromptInput,\n  PromptInputButton,\n  PromptInputModelSelect,\n  PromptInputModelSelectContent,\n  PromptInputModelSelectItem,\n  PromptInputModelSelectTrigger,\n  PromptInputModelSelectValue,\n  PromptInputSubmit,\n  PromptInputTextarea,\n  PromptInputToolbar,\n  PromptInputTools,\n} from '@/registry/default/ui/ai/prompt-input';\nimport { useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Response } from '@/registry/default/ui/ai/response';\nimport { GlobeIcon } from 'lucide-react';\nimport {\n  Source,\n  Sources,\n  SourcesContent,\n  SourcesTrigger,\n} from '@/registry/default/ui/ai/source';\nimport {\n  Reasoning,\n  ReasoningContent,\n  ReasoningTrigger,\n} from '@/registry/default/ui/ai/reasoning';\nimport { Loader } from '@/registry/default/ui/ai/loader';\n\nconst models = [\n  {\n    name: 'GPT 4o',\n    value: 'openai/gpt-4o',\n  },\n  {\n    name: 'Deepseek R1',\n    value: 'deepseek/deepseek-r1',\n  },\n];\n\nconst ChatBotDemo = () => {\n  const [input, setInput] = useState('');\n  const [model, setModel] = useState<string>(models[0].value);\n  const [webSearch, setWebSearch] = useState(false);\n  const { messages, sendMessage, status } = useChat();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (input.trim()) {\n      sendMessage(\n        { text: input },\n        {\n          body: {\n            model: model,\n            webSearch: webSearch,\n          },\n        },\n      );\n      setInput('');\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 relative size-full h-screen\">\n      <div className=\"flex flex-col h-full\">\n        <Conversation className=\"h-full\">\n          <ConversationContent>\n            {messages.map((message) => (\n              <div key={message.id}>\n                {message.role === 'assistant' && (\n                  <Sources>\n                    {message.parts.map((part, i) => {\n                      switch (part.type) {\n                        case 'source-url':\n                          return (\n                            <>\n                              <SourcesTrigger\n                                count={\n                                  message.parts.filter(\n                                    (part) => part.type === 'source-url',\n                                  ).length\n                                }\n                              />\n                              <SourcesContent key={`${message.id}-${i}`}>\n                                <Source\n                                  key={`${message.id}-${i}`}\n                                  href={part.url}\n                                  title={part.url}\n                                />\n                              </SourcesContent>\n                            </>\n                          );\n                      }\n                    })}\n                  </Sources>\n                )}\n                <Message from={message.role} key={message.id}>\n                  <MessageContent>\n                    {message.parts.map((part, i) => {\n                      switch (part.type) {\n                        case 'text':\n                          return (\n                            <Response key={`${message.id}-${i}`}>\n                              {part.text}\n                            </Response>\n                          );\n                        case 'reasoning':\n                          return (\n                            <Reasoning\n                              key={`${message.id}-${i}`}\n                              className=\"w-full\"\n                              isStreaming={status === 'streaming'}\n                            >\n                              <ReasoningTrigger />\n                              <ReasoningContent>{part.text}</ReasoningContent>\n                            </Reasoning>\n                          );\n                        default:\n                          return null;\n                      }\n                    })}\n                  </MessageContent>\n                </Message>\n              </div>\n            ))}\n            {status === 'submitted' && <Loader />}\n          </ConversationContent>\n          <ConversationScrollButton />\n        </Conversation>\n\n        <PromptInput onSubmit={handleSubmit} className=\"mt-4\">\n          <PromptInputTextarea\n            onChange={(e) => setInput(e.target.value)}\n            value={input}\n          />\n          <PromptInputToolbar>\n            <PromptInputTools>\n              <PromptInputButton\n                variant={webSearch ? 'default' : 'ghost'}\n                onClick={() => setWebSearch(!webSearch)}\n              >\n                <GlobeIcon size={16} />\n                <span>Search</span>\n              </PromptInputButton>\n              <PromptInputModelSelect\n                onValueChange={(value) => {\n                  setModel(value);\n                }}\n                value={model}\n              >\n                <PromptInputModelSelectTrigger>\n                  <PromptInputModelSelectValue />\n                </PromptInputModelSelectTrigger>\n                <PromptInputModelSelectContent>\n                  {models.map((model) => (\n                    <PromptInputModelSelectItem key={model.value} value={model.value}>\n                      {model.name}\n                    </PromptInputModelSelectItem>\n                  ))}\n                </PromptInputModelSelectContent>\n              </PromptInputModelSelect>\n            </PromptInputTools>\n            <PromptInputSubmit disabled={!input} status={status} />\n          </PromptInputToolbar>\n        </PromptInput>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBotDemo;",
      "type": "registry:example"
    }
  ]
}