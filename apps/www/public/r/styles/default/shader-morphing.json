{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shader-morphing",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/shader-morphing.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport * as THREE from \"three\"\n\nexport type ShaderMorphingProps = {\n  id?: string\n  className?: string\n  style?: React.CSSProperties\n\n  // Layout\n  width?: number | string // default: \"100%\"\n  height?: number | string // default: \"100%\"\n  position?: \"absolute\" | \"fixed\" | \"relative\" \n  pointerEvents?: \"none\" | \"auto\"\n\n  // Animation\n  animationSpeed?: number // default 1.0\n  transparentBg?: boolean // default true\n}\n\nexport function ShaderMorphing({\n  id,\n  className,\n  style,\n  width = \"100%\",\n  height = \"100%\",\n  position = \"absolute\", \n  pointerEvents = \"none\",\n  animationSpeed = 1.0,\n  transparentBg = true,\n}: ShaderMorphingProps) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const sceneRef = useRef<{\n    camera?: THREE.Camera\n    scene?: THREE.Scene\n    renderer?: THREE.WebGLRenderer\n    clock?: THREE.Clock\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    uniforms?: any\n    animationId?: number\n  }>({})\n\n  useEffect(() => {\n    if (!containerRef.current) return\n    const container = containerRef.current\n\n    // Vertex shader\n    const vertexShader = `\n      void main() { \n        gl_Position = vec4(position, 1.0); \n      }\n    `\n\n    // Fragment shader\n    const fragmentShader = `\n      precision highp float;\n      uniform vec2 u_resolution;\n      uniform float u_time;\n\n      void main() {\n        vec2 uv = (gl_FragCoord.xy - u_resolution * .5) / u_resolution.yy;\n\n        float angle = -1.5708;\n        mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n        uv = rotation * uv;\n\n        float c = distance(uv, vec2(0.0));\n        float a = u_time * 2.5;\n\n        vec3 light = vec3(0.5 - acos(sin(c * 4. + a)), 0.5 - acos(sin(c * 8. + a)), 0.0);\n        vec3 source = mix(light, vec3(5.), .5 - c);\n        vec3 hue = mix(vec3(1.0, 0.41, 0.71), vec3(0.0, 1.0, 1.0), (uv.y - sin(u_time)) * 0.5);\n        vec3 color = mix(source, hue, uv.x);\n\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `\n\n    // Initialize Three.js scene\n    const clock = new THREE.Clock()\n    const camera = new THREE.Camera()\n    camera.position.z = 1\n\n    const scene = new THREE.Scene()\n    const geometry = new THREE.PlaneGeometry(2, 2)\n\n    const uniforms = {\n      u_time: { type: \"f\", value: 1.0 },\n      u_resolution: { type: \"v2\", value: new THREE.Vector2() },\n    }\n\n    const material = new THREE.ShaderMaterial({\n      uniforms,\n      vertexShader,\n      fragmentShader,\n    })\n\n    const mesh = new THREE.Mesh(geometry, material)\n    scene.add(mesh)\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true, // must be true\n    })\n    renderer.setClearColor(0x000000, 0) // fully transparent clear\n\n    container.appendChild(renderer.domElement)\n\n    // Store refs\n    sceneRef.current = { camera, scene, renderer, clock, uniforms }\n\n    // Resize handler\n    const onWindowResize = () => {\n      const widthPx = container.clientWidth\n      const heightPx = container.clientHeight\n      renderer.setSize(widthPx, heightPx)\n      uniforms.u_resolution.value.x = renderer.domElement.width\n      uniforms.u_resolution.value.y = renderer.domElement.height\n    }\n\n    // Animation loop\n    const animate = () => {\n      if (!sceneRef.current.uniforms || !sceneRef.current.clock) return\n      sceneRef.current.uniforms.u_time.value =\n        sceneRef.current.clock.getElapsedTime() * animationSpeed\n      renderer.render(scene, camera)\n      sceneRef.current.animationId = requestAnimationFrame(animate)\n    }\n\n    onWindowResize()\n    window.addEventListener(\"resize\", onWindowResize)\n    animate()\n\n    // Cleanup\n    return () => {\n      window.removeEventListener(\"resize\", onWindowResize)\n      if (sceneRef.current.animationId)\n        cancelAnimationFrame(sceneRef.current.animationId)\n      if (sceneRef.current.renderer) {\n        container.removeChild(sceneRef.current.renderer.domElement)\n        sceneRef.current.renderer.dispose()\n      }\n      geometry.dispose()\n      material.dispose()\n    }\n  }, [animationSpeed, transparentBg])\n\n  return (\n    <div\n      id={id}\n      ref={containerRef}\n      className={className}\n      style={{\n        position,\n        width,\n        height, \n        pointerEvents,\n        ...style,\n      }}\n    />\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}