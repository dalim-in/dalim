{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shine-border",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/shine-border.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable react/no-unknown-property */\n\"use client\"\n\nimport type React from \"react\"\n\ntype TColorProp = string | string[]\n\ninterface ShineBorderProps {\n  borderRadius?: number\n  borderWidth?: number\n  duration?: number\n  color?: TColorProp\n  className?: string\n  children: React.ReactNode\n}\n\n/**\n * ShineBorder\n * - Self-contained, no Tailwind, no external CSS.\n * - Uses an absolutely-positioned overlay with CSS masking to render an animated border.\n * - Customizable via props: borderRadius, borderWidth, duration, color (string or array).\n */\nexport function ShineBorder({\n  borderRadius = 8,\n  borderWidth = 1,\n  duration = 14,\n  color = [\n    \"#ff00ff\", // neon pink\n    \"#00ffff\", // neon cyan\n    \"#ff3131\", // neon red\n    \"#00ff00\", // neon green\n    \"#ffea00\", // neon yellow\n    \"#ff6ec7\", // hot magenta\n    \"#39ff14\", // electric lime\n    \"#ff8300\", // neon orange\n    \"#7df9ff\", // electric blue\n    \"#fe019a\", // neon fuchsia\n  ],\n\n  className,\n  children,\n}: ShineBorderProps) {\n  const colorString =\n    Array.isArray(color) && color.length > 0 ? color.join(\",\") : String(color)\n\n  const rootStyle: React.CSSProperties = {\n    // Expose variables for internal CSS\n    // Note: These are referenced by the <style> block below\n    // for animation, masking, and layout.\n    // Using px ensures predictable rendering.\n    // Consumers can still style the wrapper via className or style if desired.\n    //@ts-ignore: CSS variables allowed at runtime\n    \"--sb-border-radius\": `${borderRadius}px`,\n    //@ts-ignore\n    \"--sb-border-width\": `${borderWidth}px`,\n    //@ts-ignore\n    \"--sb-duration\": `${duration}s`,\n  }\n\n  const overlayStyle: React.CSSProperties = {\n    position: \"absolute\",\n    inset: 0,\n    // padding defines the visible border thickness via mask\n    padding: `var(--sb-border-width)`,\n    borderRadius: `var(--sb-border-radius)`,\n    backgroundImage: `radial-gradient(transparent, transparent, ${colorString}, transparent, transparent)`,\n    backgroundSize: \"300% 300%\",\n    animation: \"sb-shine-pulse var(--sb-duration) linear infinite\",\n    // Show only the border region using masks (content-box vs border-box)\n    // WebKit/Safari\n    WebkitMask:\n      \"linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0)\",\n    WebkitMaskComposite: \"xor\" as any,\n    // Standard (Chromium/Firefox)\n    mask: \"linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0)\",\n    maskComposite: \"exclude\" as any,\n    pointerEvents: \"none\",\n  }\n\n  const containerStyle: React.CSSProperties = {\n    position: \"relative\",\n    display: \"grid\",\n    placeItems: \"center\",\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: `var(--sb-border-radius)`,\n  }\n\n  return (\n    <div style={rootStyle} className={className}>\n      {/* Local styles for the component (no external CSS or Tailwind needed) */}\n      <style>{`\n        @keyframes sb-shine-pulse {\n          0%   { background-position: 0% 0%; }\n          50%  { background-position: 100% 100%; }\n          100% { background-position: 0% 0%; }\n        }\n      `}</style>\n\n      <div style={containerStyle}>\n        <div aria-hidden=\"true\" style={overlayStyle} />\n        {children}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}