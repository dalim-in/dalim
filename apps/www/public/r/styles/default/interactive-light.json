{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "interactive-light",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/common/interactive-light.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\n\ninterface InteractiveLampProps {\n  shineColor?: string\n  lampHeight?: string\n  lampWidth?: string\n  enableTilt?: boolean\n  transitionDuration?: number\n}\n\nexport function InteractiveLight({\n  shineColor = \"#5FB0F7\",\n  lampHeight = \"50vh\",\n  lampWidth = \"4vh\",\n  enableTilt = false,\n  transitionDuration = 500,\n}: InteractiveLampProps) {\n  const lampRef = useRef<HTMLDivElement>(null)\n  const highlightRef = useRef<HTMLDivElement>(null)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [tiltEnabled] = useState(enableTilt)\n  const [lampDirection, setLampDirection] = useState<\n    \"left\" | \"top\" | \"bottom\" | \"right\" | \"center\"\n  >(\"center\")\n  const [ready, setReady] = useState(false)\n  const lastXRef = useRef<number>(0)\n  const lastYRef = useRef<number>(0)\n\n  // Generate lighter shades of shine color\n  const lightenColor = (color: string, percent: number) => {\n    const hex = color.replace(\"#\", \"\")\n    const r = Number.parseInt(hex.substr(0, 2), 16)\n    const g = Number.parseInt(hex.substr(2, 2), 16)\n    const b = Number.parseInt(hex.substr(4, 2), 16)\n\n    const newR = Math.min(255, Math.floor(r + ((255 - r) * percent) / 100))\n    const newG = Math.min(255, Math.floor(g + ((255 - g) * percent) / 100))\n    const newB = Math.min(255, Math.floor(b + ((255 - b) * percent) / 100))\n\n    return `rgb(${newR}, ${newG}, ${newB})`\n  }\n\n  const getLampBoxShadow = (\n    direction: \"left\" | \"right\" | \"top\" | \"bottom\" | \"center\"\n  ) => {\n    const light20 = lightenColor(shineColor, 20)\n    const light10 = lightenColor(shineColor, 10)\n    const light5 = lightenColor(shineColor, 5)\n\n    switch (direction) {\n      case \"left\":\n        return `\n        0 0 1vh 0.5vh ${light20},\n        -1vh 0 2vh 1vh ${light20},\n        -4vh 0 5vh 1vh ${light10},\n        -10vh 0 10vh 1vh ${light5},\n        -13vh 0 15vh 1vh ${shineColor},\n        -15vh 0 20vh 1vh ${shineColor},\n        -25vh 0 25vh 0 ${shineColor},\n        -50vh 0 50vh 0 ${shineColor}\n      `\n      case \"right\":\n        return `\n        0 0 1vh 0.5vh ${light20},\n        1vh 0 2vh 1vh ${light20},\n        4vh 0 5vh 1vh ${light10},\n        10vh 0 10vh 1vh ${light5},\n        13vh 0 15vh 1vh ${shineColor},\n        15vh 0 20vh 1vh ${shineColor},\n        25vh 0 25vh 0 ${shineColor},\n        50vh 0 50vh 0 ${shineColor}\n      `\n      case \"top\":\n        return `\n        0 0 1vh 0.5vh ${light20},\n        0 -1vh 2vh 1vh ${light20},\n        0 -4vh 5vh 1vh ${light10},\n        0 -10vh 10vh 1vh ${light5},\n        0 -13vh 15vh 1vh ${shineColor},\n        0 -15vh 20vh 1vh ${shineColor},\n        0 -25vh 25vh 0 ${shineColor},\n        0 -50vh 50vh 0 ${shineColor}\n      `\n      case \"bottom\":\n        return `\n        0 0 1vh 0.5vh ${light20},\n        0 1vh 2vh 1vh ${light20},\n        0 4vh 5vh 1vh ${light10},\n        0 10vh 10vh 1vh ${light5},\n        0 13vh 15vh 1vh ${shineColor},\n        0 15vh 20vh 1vh ${shineColor},\n        0 25vh 25vh 0 ${shineColor},\n        0 50vh 50vh 0 ${shineColor}\n      `\n      default: // \"center\"\n        return `\n        0 0 1vh 0.5vh ${light20},\n        0 0 2vh 1vh ${light20},\n        0 0 5vh 1vh ${light10},\n        0 0 10vh 1vh ${light5},\n        0 0 15vh 1vh ${shineColor},\n        0 0 20vh 1vh ${shineColor},\n        0 0 25vh 1vh ${shineColor},\n        0 0 50vh 1vh ${shineColor}\n      `\n    }\n  }\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (!ready || !lampRef.current || !highlightRef.current) return\n\n    const xPos = e.clientX\n    const yPos = e.clientY\n    const lastX = lastXRef.current\n    let offset = 0\n\n    if (tiltEnabled) {\n      if (lastX < xPos - 1) {\n        setLampDirection(\"right\")\n        offset = 200\n      } else if (lastX > xPos + 1) {\n        setLampDirection(\"left\")\n        offset = -200\n      } else if (lastX > yPos + 1) {\n        setLampDirection(\"top\")\n        offset = 200\n      } else if (lastX > yPos + 1) {\n        setLampDirection(\"bottom\")\n        offset = -200\n      } else {\n        setLampDirection(\"center\")\n      }\n    }\n\n    lampRef.current.style.transform = `translate(${xPos - lampRef.current.offsetWidth / 2}px, ${yPos - lampRef.current.offsetHeight / 2}px)`\n\n    highlightRef.current.style.transform = `translate(${xPos - highlightRef.current.offsetWidth / 2 + offset}px, ${yPos - highlightRef.current.offsetHeight / 2}px)`\n\n    lastXRef.current = xPos\n    lastYRef.current = yPos\n  }\n\n  const runIntroAnimation = () => {\n    if (!lampRef.current || !highlightRef.current) return\n\n    const xPos = window.innerWidth / 2\n    const yPos = window.innerHeight / 2\n    lastXRef.current = xPos\n    lastYRef.current = yPos\n\n    lampRef.current.style.transform = `translate(${xPos}px, ${yPos}px)`\n\n    setTimeout(() => {\n      if (lampRef.current && highlightRef.current) {\n        lampRef.current.style.transform = `translate(${xPos * 1.8 - lampRef.current.offsetWidth / 2}px, ${yPos * 1.5 - lampRef.current.offsetHeight / 2}px)`\n        highlightRef.current.style.transform = `translate(${xPos * 1.8 - highlightRef.current.offsetWidth / 2}px, ${yPos * 1.5 - highlightRef.current.offsetHeight / 2}px)`\n      }\n    }, 100)\n\n    setTimeout(() => {\n      if (lampRef.current && highlightRef.current) {\n        lampRef.current.style.transform = `translate(${xPos * 0.5 - lampRef.current.offsetWidth / 2}px, ${yPos * 0.3 - lampRef.current.offsetHeight / 2}px)`\n        highlightRef.current.style.transform = `translate(${xPos * 0.5 - highlightRef.current.offsetWidth / 2}px, ${yPos * 0.3 - highlightRef.current.offsetHeight / 2}px)`\n      }\n    }, 1000)\n\n    setTimeout(() => {\n      setReady(true)\n    }, 2000)\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"mousemove\", handleMouseMove)\n    runIntroAnimation()\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove)\n    }\n  }, [ready, tiltEnabled])\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"relative inset-0 h-full w-full overflow-hidden rounded-md border\"\n    >\n      <div\n        ref={highlightRef}\n        className=\"absolute inset-0 h-full w-full transition-transform duration-500 ease-out\"\n      />\n\n      <div\n        ref={lampRef}\n        className=\"absolute transition-transform duration-500 ease-out\"\n        style={{\n          height: lampHeight,\n          width: lampWidth,\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\", // centers it\n          backgroundColor: \"#fff\",\n          borderRadius: `calc(${lampWidth} / 2)`,\n          boxShadow: getLampBoxShadow(lampDirection),\n          transitionDuration: `${transitionDuration}ms`,\n        }}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}