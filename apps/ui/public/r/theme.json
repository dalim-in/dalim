{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme",
  "type": "registry:ui",
  "dependencies": [
    ""
  ],
  "files": [
    {
      "path": "registry/default/ui/theme.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Tabs, TabsList, TabsTrigger } from \"@//registry/default/ui/tabs\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport {\n  Check,\n  ChevronDown,\n  Monitor,\n  Moon, \n  Sun,\n  Sunset,\n  Trees,\n  Waves,\n} from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\"\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\"\n\nconst themeIcons = {\n  light: Sun,\n  dark: Moon,\n  system: Monitor,\n  sunset: Sunset,\n  ocean: Waves,\n  forest: Trees,\n}\n\nexport type ThemeToggleVariant =\n  | \"button\"\n  | \"switch\"\n  | \"dropdown\"\n  | \"tabs\" \n  | \"grid\"\n  | \"radial\"  \n  | \"cards\" \nexport type ThemeToggleSize = \"sm\" | \"md\" | \"lg\"\n\ninterface ThemeToggleProps {\n  variant?: ThemeToggleVariant\n  size?: ThemeToggleSize\n  showLabel?: boolean\n  themes?: Theme[]\n  className?: string\n}\n\nexport function Theme({\n  variant = \"button\",\n  size = \"md\",\n  showLabel = false,\n  themes = [\"light\", \"dark\", \"system\"],\n  className,\n}: ThemeToggleProps) {\n  const { theme, setTheme } = useTheme()\n  const [isOpen, setIsOpen] = useState(false)\n  const [isMounted, setIsMounted] = useState(false)\n\n  useEffect(() => {\n    setIsMounted(true)\n  }, [])\n\n  const sizeClasses = {\n    sm: \"h-8 px-2 text-xs\",\n    md: \"h-10 px-3 text-sm\",\n    lg: \"h-12 px-4 text-base\",\n  }\n\n  const iconSizes = {\n    sm: 14,\n    md: 16,\n    lg: 20,\n  }\n\n  if (!isMounted) return null\n\n  if (variant === \"button\") {\n    function isTheme(value: unknown): value is Theme {\n      return (\n        typeof value === \"string\" && [\"light\", \"dark\", \"system\"].includes(value)\n      )\n    }\n\n    const safeTheme: Theme =\n      isTheme(theme) && themes.includes(theme) ? theme : \"light\"\n\n    const nextTheme = themes[(themes.indexOf(safeTheme) + 1) % themes.length]\n    const Icon = themeIcons[safeTheme]\n\n    return (\n      <motion.button\n        onClick={() => setTheme(nextTheme)}\n        className={cn(\n          \"inline-flex items-center justify-center gap-2 rounded-lg border transition-all duration-200\",\n          \"border-[var(--color-border)] bg-[var(--color-card)] text-[var(--color-foreground)]\",\n          \"hover:scale-105 hover:bg-[var(--color-muted)] active:scale-95\",\n          sizeClasses[size],\n          className\n        )}\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n      >\n        <motion.div\n          key={safeTheme}\n          initial={{ rotate: -180, opacity: 0 }}\n          animate={{ rotate: 0, opacity: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <Icon size={iconSizes[size]} />\n        </motion.div>\n        {showLabel && (\n          <span className=\"font-medium\">{themeConfigs[safeTheme].label}</span>\n        )}\n      </motion.button>\n    )\n  }\n\n  if (variant === \"switch\") {\n    const isLight = theme === \"light\"\n\n    return (\n      <motion.button\n        onClick={() => setTheme(isLight ? \"dark\" : \"light\")}\n        className={cn(\n          \"relative inline-flex items-center rounded-full border-2 transition-all duration-300\",\n          \"border-[var(--color-border)] bg-[var(--color-muted)]\",\n          size === \"sm\"\n            ? \"h-6 w-11.5\"\n            : size === \"md\"\n              ? \"h-7 w-13\"\n              : \"h-8 w-15\",\n          className\n        )}\n      >\n        <motion.div\n          className={cn(\n            \"inline-flex items-center justify-center rounded-full bg-black shadow-lg dark:bg-white\",\n            size === \"sm\" ? \"h-4 w-4\" : size === \"md\" ? \"h-5 w-5\" : \"h-6 w-6\"\n          )}\n          animate={{\n            x: isLight ? 2 : size === \"sm\" ? 24 : size === \"md\" ? 26 : 30,\n          }}\n          transition={{ type: \"spring\", stiffness: 500, damping: 30 }}\n        >\n          <motion.div\n            key={theme}\n            initial={{ rotate: -180, opacity: 0 }}\n            animate={{ rotate: 0, opacity: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            {isLight ? (\n              <Sun\n                size={size === \"sm\" ? 10 : size === \"md\" ? 12 : 14}\n                className=\"text-yellow-500\"\n              />\n            ) : (\n              <Moon\n                size={size === \"sm\" ? 10 : size === \"md\" ? 12 : 14}\n                className=\"text-slate-700\"\n              />\n            )}\n          </motion.div>\n        </motion.div>\n      </motion.button>\n    )\n  }\n\n  if (variant === \"dropdown\") {\n    function isTheme(value: unknown): value is Theme {\n      return (\n        typeof value === \"string\" && [\"light\", \"dark\", \"system\"].includes(value)\n      )\n    }\n\n    const safeTheme: Theme =\n      isTheme(theme) && themes?.includes(theme) ? theme : \"light\"\n\n    return (\n      <div className=\"relative\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            {showLabel ? (\n              <motion.button\n                className={cn(\n                  \"inline-flex items-center justify-between gap-2 rounded-lg border transition-all duration-200\",\n                  \"border-[var(--color-border)] bg-[var(--color-card)] text-[var(--color-foreground)]\",\n                  \"hover:bg-[var(--color-muted)]\",\n                  sizeClasses[size],\n                  \"min-w-[80px]\",\n                  className\n                )}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <div className=\"flex items-center gap-2\">\n                  {React.createElement(themeIcons[safeTheme], {\n                    size: iconSizes[size],\n                  })}\n                  <span className=\"font-medium\">\n                    {themeConfigs[safeTheme].label}\n                  </span>\n                </div>\n                <ChevronDown size={iconSizes[size]} />\n              </motion.button>\n            ) : (\n              <motion.button\n                className={cn(\n                  \"inline-flex items-center justify-center rounded-lg border transition-all duration-200\",\n                  \"border-[var(--color-border)] bg-[var(--color-card)] text-[var(--color-foreground)]\",\n                  \"hover:bg-[var(--color-muted)]\",\n                  sizeClasses[size],\n                  className\n                )}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                {React.createElement(themeIcons[safeTheme], {\n                  size: iconSizes[size],\n                })}\n              </motion.button>\n            )}\n          </DropdownMenuTrigger>\n\n          <DropdownMenuContent\n            align=\"start\"\n            className=\"z-50 min-w-[100px] space-y-1\"\n          >\n            {themes.map((themeOption) => {\n              const Icon = themeIcons[themeOption]\n              const isSelected = theme === themeOption\n\n              return (\n                <DropdownMenuItem\n                  key={themeOption}\n                  onClick={() => setTheme(themeOption)}\n                  className={cn(\n                    \"flex items-center justify-between gap-2 px-3 py-2\",\n                    isSelected && \"bg-[var(--color-primary)] text-white\"\n                  )}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon size={iconSizes[size]} />\n\n                    <span className=\"font-medium\">\n                      {themeConfigs[themeOption].label}\n                    </span>\n                  </div>\n                  {isSelected && <Check size={iconSizes[size]} />}\n                </DropdownMenuItem>\n              )\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    )\n  }\n\n  if (variant === \"tabs\") {\n    return (\n      <Tabs value={theme} onValueChange={setTheme} className={cn(className)}>\n        <TabsList\n          className={cn(\n            \"inline-flex items-center rounded-lg border p-1\",\n            \"border-[var(--color-border)] bg-[var(--color-muted)]\"\n          )}\n        >\n          {themes.map((themeOption) => {\n            const Icon = themeIcons[themeOption]\n            const isSelected = theme === themeOption\n\n            return (\n              <TabsTrigger\n                key={themeOption}\n                value={themeOption}\n                className={cn(\n                  \"relative inline-flex items-center justify-center gap-1 rounded-md px-2 py-1 text-xs font-medium transition-all\",\n                  size === \"sm\"\n                    ? \"h-6 px-2\"\n                    : size === \"md\"\n                      ? \"h-7 px-3\"\n                      : \"h-8 px-4\",\n                  isSelected && \"text-[var(--color-foreground)]\"\n                )}\n              >\n                {isSelected && (\n                  <motion.div\n                    layoutId=\"segmented-bg\"\n                    className=\"absolute inset-0 rounded-md bg-[var(--color-card)] shadow-sm\"\n                    transition={{ type: \"spring\", stiffness: 500, damping: 30 }}\n                  />\n                )}\n                <div className=\"relative z-10 flex items-center gap-1\">\n                  <Icon size={size === \"sm\" ? 12 : size === \"md\" ? 14 : 16} />\n                  {showLabel && <span>{themeConfigs[themeOption].label}</span>}\n                </div>\n              </TabsTrigger>\n            )\n          })}\n        </TabsList>\n      </Tabs>\n    )\n  }\n\n  if (variant === \"grid\") {\n    return (\n      <div className={cn(\"flex justify-center\", className)}>\n        <RadioGroup\n          value={theme}\n          onValueChange={(value) => setTheme(value as Theme)}\n          className=\"flex gap-2\"\n        >\n          {themes.map((themeOption) => {\n            const config = themeConfigs[themeOption]\n            const Icon = themeIcons[themeOption]\n            const isSelected = theme === themeOption\n\n            return (\n              <motion.label\n                key={themeOption}\n                htmlFor={`theme-${themeOption}`}\n                className={cn(\n                  \"relative flex cursor-pointer flex-col items-center justify-center gap-1 rounded-lg border-2 p-2 transition-all\",\n\n                  size === \"sm\"\n                    ? \"h-16 w-16\"\n                    : size === \"md\"\n                      ? \"h-20 w-20\"\n                      : \"h-24 w-24\",\n                  isSelected\n                    ? \"border-[var(--color-primary)]\"\n                    : \"border-[var(--color-border)]\"\n                )}\n                style={{\n                  background: `${config.colors.background}`,\n                  borderColor: isSelected\n                    ? config.colors.primary\n                    : config.colors.border,\n                }}\n              >\n                <RadioGroupItem\n                  id={`theme-${themeOption}`}\n                  value={themeOption}\n                  className=\"peer sr-only\"\n                />\n\n                <span className=\"flex flex-col items-center justify-center gap-2 text-center text-xs font-medium\">\n                  <Icon\n                    size={size === \"sm\" ? 16 : size === \"md\" ? 20 : 24}\n                    style={{ color: config.colors.foreground }}\n                  />\n                  {showLabel && (\n                    <span style={{ color: config.colors.foreground }}>\n                      {config.label}\n                    </span>\n                  )}\n                </span>\n              </motion.label>\n            )\n          })}\n        </RadioGroup>\n      </div>\n    )\n  }\n\n  if (variant === \"radial\") {\n    const radius = size === \"sm\" ? 60 : size === \"md\" ? 80 : 100\n    const centerSize = size === \"sm\" ? 40 : size === \"md\" ? 48 : 56\n\n    function isTheme(value: unknown): value is Theme {\n      return (\n        typeof value === \"string\" && [\"light\", \"dark\", \"system\"].includes(value)\n      )\n    }\n\n    const safeTheme: Theme =\n      isTheme(theme) && themes?.includes(theme) ? theme : \"light\"\n\n    return (\n      <div className={cn(\"relative\", className)}>\n        <motion.button\n          onClick={() => setIsOpen(!isOpen)}\n          className={cn(\n            \"flex items-center justify-center rounded-full border-2 transition-all\",\n            \"border-[var(--color-primary)] bg-[var(--color-primary)] text-white\",\n            \"shadow-lg hover:scale-110\",\n            `h-${centerSize / 4} w-${centerSize / 4}`\n          )}\n          style={{\n            width: centerSize,\n            height: centerSize,\n            backgroundColor: \"var(--color-primary)\",\n          }}\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n        >\n          <motion.div\n            animate={{ rotate: isOpen ? 180 : 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            {React.createElement(themeIcons[safeTheme], {\n              size: iconSizes[size],\n            })}\n          </motion.div>\n        </motion.button>\n\n        <AnimatePresence>\n          {isOpen && (\n            <>\n              {themes.map((themeOption, index) => {\n                const Icon = themeIcons[themeOption]\n                const angle = (index * 360) / themes.length\n                const x = Math.cos((angle - 90) * (Math.PI / 180)) * radius\n                const y = Math.sin((angle - 90) * (Math.PI / 180)) * radius\n                const isSelected = theme === themeOption\n\n                return (\n                  <motion.button\n                    key={themeOption}\n                    onClick={() => {\n                      setTheme(themeOption)\n                      setIsOpen(false)\n                    }}\n                    className={cn(\n                      \"absolute flex items-center justify-center rounded-full border-2 shadow-lg\",\n                      \"bg-[var(--color-card)] text-[var(--color-foreground)]\",\n                      \"hover:scale-110\",\n                      size === \"sm\"\n                        ? \"h-8 w-8\"\n                        : size === \"md\"\n                          ? \"h-10 w-10\"\n                          : \"h-12 w-12\",\n                      isSelected\n                        ? \"scale-125 border-[var(--color-primary)] bg-[var(--color-primary)] text-white\"\n                        : \"border-[var(--color-border)] bg-[var(--color-card)] text-[var(--color-foreground)]\"\n                    )}\n                    style={{\n                      left: `calc(50% + ${x}px - ${size === \"sm\" ? 16 : size === \"md\" ? 20 : 24}px)`,\n                      top: `calc(50% + ${y}px - ${size === \"sm\" ? 16 : size === \"md\" ? 20 : 24}px)`,\n                    }}\n                    initial={{ scale: 0, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    exit={{ scale: 0, opacity: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                  >\n                    <Icon size={size === \"sm\" ? 12 : size === \"md\" ? 16 : 18} />\n                  </motion.button>\n                )\n              })}\n            </>\n          )}\n        </AnimatePresence>\n      </div>\n    )\n  }\n   \n\n  return null\n}\n\nexport type Theme = \"light\" | \"dark\" | \"system\"\n\nexport type ThemeConfig = {\n  name: string\n  label: string\n  colors: {\n    background: string\n    foreground: string\n    primary: string\n    secondary: string\n    accent: string\n    muted: string\n    border: string\n    card: string\n  }\n}\n\nexport const themeConfigs: Record<Theme, ThemeConfig> = {\n  light: {\n    name: \"light\",\n    label: \"Light\",\n    colors: {\n      background: \"#ffffff\",\n      foreground: \"#0f172a\",\n      primary: \"#3b82f6\",\n      secondary: \"#64748b\",\n      accent: \"#f59e0b\",\n      muted: \"#f8fafc\",\n      border: \"#e2e8f0\",\n      card: \"#ffffff\",\n    },\n  },\n  dark: {\n    name: \"dark\",\n    label: \"Dark\",\n    colors: {\n      background: \"#0f172a\",\n      foreground: \"#f8fafc\",\n      primary: \"#60a5fa\",\n      secondary: \"#94a3b8\",\n      accent: \"#fbbf24\",\n      muted: \"#1e293b\",\n      border: \"#334155\",\n      card: \"#1e293b\",\n    },\n  },\n  system: {\n    name: \"system\",\n    label: \"System\",\n    colors: {\n      background: \"#ffffff\",\n      foreground: \"#0f172a\",\n      primary: \"#3b82f6\",\n      secondary: \"#64748b\",\n      accent: \"#f59e0b\",\n      muted: \"#f8fafc\",\n      border: \"#e2e8f0\",\n      card: \"#ffffff\",\n    },\n  },\n}\n",
      "type": "registry:ui"
    }
  ]
}