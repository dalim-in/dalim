{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "background-13",
  "type": "registry:component",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/components/background/background-13.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef } from \"react\"\n\nexport default function DemoOne() {\n  return (\n    <div className=\"\">\n     <CosmicSpectrum color=\"original\" blur />\n    </div>\n  )\n}\n\ninterface CosmicSpectrumProps {\n  color?:\n    | \"original\"\n    | \"blue-pink\"\n    | \"blue-orange\"\n    | \"sunset\"\n    | \"purple\"\n    | \"monochrome\"\n    | \"pink-purple\"\n    | \"blue-black\"\n    | \"beige-black\"\n  blur?: boolean\n}\n\nexport function CosmicSpectrum({ color = \"original\", blur = false }: CosmicSpectrumProps) {\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  const colorThemes = {\n    original: [\"#340B05\", \"#0358F7\", \"#5092C7\", \"#E1ECFE\", \"#FFD400\", \"#FA3D1D\", \"#FD02F5\", \"#FFC0FD\"],\n    \"blue-pink\": [\"#1E3A8A\", \"#3B82F6\", \"#A855F7\", \"#EC4899\", \"#F472B6\", \"#F9A8D4\", \"#FBCFE8\", \"#FDF2F8\"],\n    \"blue-orange\": [\"#1E40AF\", \"#3B82F6\", \"#60A5FA\", \"#FFFFFF\", \"#FED7AA\", \"#FB923C\", \"#EA580C\", \"#9A3412\"],\n    sunset: [\"#FEF3C7\", \"#FCD34D\", \"#F59E0B\", \"#D97706\", \"#B45309\", \"#92400E\", \"#78350F\", \"#451A03\"],\n    purple: [\"#F3E8FF\", \"#E9D5FF\", \"#D8B4FE\", \"#C084FC\", \"#A855F7\", \"#9333EA\", \"#7C3AED\", \"#6B21B6\"],\n    monochrome: [\"#1A1A1A\", \"#404040\", \"#666666\", \"#999999\", \"#CCCCCC\", \"#E5E5E5\", \"#F5F5F5\", \"#FFFFFF\"],\n    \"pink-purple\": [\"#FDF2F8\", \"#FCE7F3\", \"#F9A8D4\", \"#F472B6\", \"#EC4899\", \"#BE185D\", \"#831843\", \"#500724\"],\n    \"blue-black\": [\"#000000\", \"#0F172A\", \"#1E293B\", \"#334155\", \"#475569\", \"#64748B\", \"#94A3B8\", \"#CBD5E1\"],\n    \"beige-black\": [\"#FEF3C7\", \"#F59E0B\", \"#D97706\", \"#92400E\", \"#451A03\", \"#1C1917\", \"#0C0A09\", \"#000000\"],\n  }\n\n  const darkThemes = [\"blue-black\", \"beige-black\", \"monochrome\"]\n  const isDarkTheme = darkThemes.includes(color)\n\n  useEffect(() => {\n    // Load external scripts\n    const loadScript = (src: string) => {\n      return new Promise((resolve, reject) => {\n        const script = document.createElement(\"script\")\n        script.src = src\n        script.onload = resolve\n        script.onerror = reject\n        document.head.appendChild(script)\n      })\n    }\n\n    const initializeAnimations = async () => {\n      try {\n        await Promise.all([\n          loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\"),\n          loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js\"),\n          loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/TextPlugin.min.js\"),\n        ])\n\n        // Wait a bit for scripts to be ready\n        setTimeout(() => {\n          if (window.gsap && window.ScrollTrigger) {\n            window.gsap.registerPlugin(window.ScrollTrigger)\n            setupAnimations()\n          }\n        }, 100)\n      } catch (error) {\n        console.error(\"Failed to load GSAP:\", error)\n      }\n    }\n\n    initializeAnimations()\n  }, [])\n\n  const setupAnimations = () => {\n    const gsap = window.gsap\n    const ScrollTrigger = window.ScrollTrigger\n\n    if (!gsap || !ScrollTrigger) return\n\n    // Hero animations\n    const heroTl = gsap.timeline({ delay: 0.5 })\n\n    // Title animation\n    const titleChars = document.querySelectorAll(\".hero-title .char\")\n    if (titleChars.length > 0) {\n      gsap.set(titleChars, { opacity: 0, filter: \"blur(8px)\", x: -20 })\n      heroTl.to(\n        titleChars,\n        {\n          opacity: 1,\n          filter: \"blur(0px)\",\n          x: 0,\n          duration: 0.8,\n          stagger: 0.03,\n          ease: \"power2.out\",\n        },\n        0,\n      )\n    }\n\n    // Nav items animation\n    const navItems = document.querySelectorAll(\".hero-nav-item\")\n    navItems.forEach((item) => {\n      gsap.set(item, { opacity: 0, y: 30, filter: \"blur(8px)\" })\n      heroTl.to(\n        item,\n        {\n          opacity: 1,\n          y: 0,\n          filter: \"blur(0px)\",\n          duration: 0.8,\n          ease: \"power2.out\",\n        },\n        0.4,\n      )\n    })\n\n    // Text content animation\n    const textElements = document.querySelectorAll(\".hero-text\")\n    textElements.forEach((textEl, index) => {\n      gsap.set(textEl, { opacity: 0, y: 50, clipPath: \"inset(0 0 100% 0)\" })\n      heroTl.to(\n        textEl,\n        {\n          opacity: 1,\n          y: 0,\n          clipPath: \"inset(0 0 0% 0)\",\n          duration: 0.8,\n          ease: \"power2.out\",\n        },\n        0.8 + index * 0.2,\n      )\n    })\n\n    // Scroll hint animation\n    const scrollHintChars = document.querySelectorAll(\".scroll-hint .char\")\n    if (scrollHintChars.length > 0) {\n      gsap.set(scrollHintChars, { opacity: 0, filter: \"blur(3px)\" })\n      gsap.to(scrollHintChars, {\n        opacity: 1,\n        filter: \"blur(0px)\",\n        duration: 0.6,\n        stagger: { each: 0.08, repeat: -1, yoyo: true },\n        ease: \"sine.inOut\",\n        delay: 1,\n      })\n    }\n\n    // Scroll-triggered animations\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: \".animation-section\",\n        start: \"top bottom\",\n        end: \"bottom bottom\",\n        scrub: 1,\n      },\n    })\n\n    const wavelengthLabels = document.querySelectorAll(\".wavelength-label\")\n    const mainTitle = document.querySelector(\".main-title\")\n\n    gsap.set([...wavelengthLabels, mainTitle], { opacity: 0, y: 30, filter: \"blur(8px)\" })\n\n    tl.to(\".svg-container\", { opacity: 1, duration: 0.01 }, 0)\n      .to(\".text-grid\", { opacity: 1, duration: 0.01 }, 0)\n      .to(\".main-title\", { opacity: 1, duration: 0.01 }, 0)\n      .to(\n        \".svg-container\",\n        {\n          transform: \"scaleY(0.05) translateY(-30px)\",\n          duration: 0.3,\n          ease: \"power2.out\",\n        },\n        0,\n      )\n      .to(\n        \".svg-container\",\n        {\n          transform: \"scaleY(1) translateY(0px)\",\n          duration: 1.2,\n          ease: \"power2.out\",\n        },\n        0.3,\n      )\n      .to(\n        \".nav-bottom-left, .nav-bottom-right, .nav-bottom-center\",\n        {\n          opacity: 0,\n          duration: 0.6,\n          ease: \"power2.out\",\n        },\n        0.2,\n      )\n      .to(\n        [...wavelengthLabels, mainTitle],\n        {\n          duration: 0.8,\n          y: 0,\n          opacity: 1,\n          filter: \"blur(0px)\",\n          stagger: 0.08,\n          ease: \"power2.out\",\n        },\n        0.9,\n      )\n      .to(\".level-5\", { y: \"-25vh\", duration: 0.8, ease: \"power2.out\" }, 0.9)\n      .to(\".level-4\", { y: \"-20vh\", duration: 0.8, ease: \"power2.out\" }, 0.9)\n      .to(\".level-3\", { y: \"-15vh\", duration: 0.8, ease: \"power2.out\" }, 0.9)\n      .to(\".level-2\", { y: \"-10vh\", duration: 0.8, ease: \"power2.out\" }, 0.9)\n      .to(\".level-1\", { y: \"-5vh\", duration: 0.8, ease: \"power2.out\" }, 0.9)\n\n    // Refresh on resize\n    window.addEventListener(\"resize\", () => ScrollTrigger.refresh())\n  }\n\n  const splitText = (text: string, className = \"\") => {\n    return text.split(\"\").map((char, index) => (\n      <span key={index} className={`char ${className}`}>\n        {char === \" \" ? \"\\u00A0\" : char}\n      </span>\n    ))\n  }\n\n  const currentColors = colorThemes[color]\n\n  return (\n    <div ref={containerRef} className=\"relative min-h-screen overflow-x-hidden\">\n      {/* Gradient Overlay */}\n      <div\n        className=\"gradient-overlay fixed top-20 left-0 w-screen h-screen pointer-events-none z-[5] opacity-0 transition-opacity duration-600\"\n        style={{ filter: \"blur(60px)\" }}\n      />\n \n\n      {/* Hero Section */}\n      <section className=\"h-screen w-full p-8 flex flex-col justify-center relative\">\n           <h1 className=\"text-center text-7xl font-bold tracking-tighter transition-colors duration-300\">\n          {splitText(\"Cosmos Spectrum\")}\n        </h1>\n      </section>\n\n       <div className=\"nav-bottom-center fixed bottom-8 left-1/2 transform -translate-x-1/2 z-[1000] pointer-events-auto text-xs uppercase tracking-wide transition-colors duration-300 scroll-hint\">\n            {splitText(\"Scroll to explore\")}\n          </div>\n      <div className=\"h-[50vh]\" />\n\n      {/* Animation Section */}\n      <div className=\"animation-section h-screen relative\">\n        <div className=\" left-0 right-0 h-screen pointer-events-none z-10\">\n          {/* SVG Container */}\n          <div\n            className=\"svg-container absolute bottom-0 left-0 right-0 h-screen opacity-0 z-[15]\"\n            style={{\n              transformOrigin: \"bottom\",\n              transform: \"scaleY(0.05) translateY(100vh)\",\n              willChange: \"transform, opacity, filter\",\n            }}\n          >\n            <svg className=\"w-full h-full\" viewBox=\"0 0 1567 584\" preserveAspectRatio=\"none\" fill=\"none\">\n              <g clipPath=\"url(#clip)\" filter={blur ? \"url(#blur)\" : undefined}>\n                <path d=\"M1219 584H1393V184H1219V584Z\" fill=\"url(#grad0)\" />\n                <path d=\"M1045 584H1219V104H1045V584Z\" fill=\"url(#grad1)\" />\n                <path d=\"M348 584H174L174 184H348L348 584Z\" fill=\"url(#grad2)\" />\n                <path d=\"M522 584H348L348 104H522L522 584Z\" fill=\"url(#grad3)\" />\n                <path d=\"M697 584H522L522 54H697L697 584Z\" fill=\"url(#grad4)\" />\n                <path d=\"M870 584H1045V54H870V584Z\" fill=\"url(#grad5)\" />\n                <path d=\"M870 584H697L697 0H870L870 584Z\" fill=\"url(#grad6)\" />\n                <path d=\"M174 585H0.000183105L-3.75875e-06 295H174L174 585Z\" fill=\"url(#grad7)\" />\n                <path d=\"M1393 584H1567V294H1393V584Z\" fill=\"url(#grad8)\" />\n              </g>\n              <defs>\n                <filter\n                  id=\"blur\"\n                  x=\"-30\"\n                  y=\"-30\"\n                  width=\"1627\"\n                  height=\"644\"\n                  filterUnits=\"userSpaceOnUse\"\n                  colorInterpolationFilters=\"sRGB\"\n                >\n                  <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n                  <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n                  <feGaussianBlur stdDeviation=\"15\" result=\"effect1_foregroundBlur\" />\n                </filter>\n                {Array.from({ length: 9 }, (_, i) => (\n                  <linearGradient\n                    key={i}\n                    id={`grad${i}`}\n                    x1=\"50%\"\n                    y1=\"100%\"\n                    x2=\"50%\"\n                    y2=\"0%\"\n                    gradientUnits=\"userSpaceOnUse\"\n                  >\n                    <stop stopColor={currentColors[0]} />\n                    <stop offset=\"0.182709\" stopColor={currentColors[1]} />\n                    <stop offset=\"0.283673\" stopColor={currentColors[2]} />\n                    <stop offset=\"0.413484\" stopColor={currentColors[3]} />\n                    <stop offset=\"0.586565\" stopColor={currentColors[4]} />\n                    <stop offset=\"0.682722\" stopColor={currentColors[5]} />\n                    <stop offset=\"0.802892\" stopColor={currentColors[6]} />\n                    <stop offset=\"1\" stopColor={currentColors[7]} stopOpacity=\"0\" />\n                  </linearGradient>\n                ))}\n                <clipPath id=\"clip\">\n                  <rect width=\"1567\" height=\"584\" fill=\"white\" />\n                </clipPath>\n              </defs>\n            </svg>\n          </div>\n\n          {/* Main Title */}\n          <div\n            className=\"main-title absolute bottom-1/2 left-1/2 transform translate-x-[-50%] translate-y-1/2 text-center text-xs leading-relaxed z-20 opacity-0 transition-colors duration-300\"\n            style={{ color: isDarkTheme ? \"#ffffff\" : \"#333\" }}\n          >\n            Where Design Becomes Communication\n            <br />\n            Across the World\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Styles */}\n      <style jsx>{`\n        @media (max-width: 768px) {\n          .hero-title {\n            font-size: 12vw !important;\n            margin-top: 2rem !important;\n          }\n          .hero-content {\n            flex-direction: column !important;\n            gap: 1.5rem !important;\n            margin-top: 2rem !important;\n          }\n          .hero-text-content {\n            flex-direction: column !important;\n            gap: 1.5rem !important;\n          }\n          .hero-text {\n            width: 100% !important;\n            font-size: 10px !important;\n          }\n        }\n      `}</style>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "background",
      "bg",
      "texture",
      "pattern"
    ],
    "style": 1,
    "colSpan": 3
  }
}