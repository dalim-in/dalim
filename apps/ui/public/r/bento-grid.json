{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bento-grid",
  "type": "registry:ui",
  "dependencies": [
    ""
  ],
  "files": [
    {
      "path": "registry/default/ui/bento-grid.tsx",
      "content": "\"use client\"\n\nimport { ArrowRightIcon } from \"@radix-ui/react-icons\"\nimport { ComponentPropsWithoutRef, ReactNode, forwardRef } from \"react\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport { Badge } from \"@/registry/default/ui/badge\"\nimport { cn } from \"@/registry/default/lib/utils\"\nimport { motion } from \"framer-motion\" \n\n// Enhanced interfaces with more options\ninterface BentoGridProps extends ComponentPropsWithoutRef<\"div\"> {\n  children: ReactNode\n  className?: string\n  variant?: \"default\" | \"compact\" | \"masonry\" | \"asymmetric\" | \"featured\"\n  columns?: 2 | 3 | 4 | 5 | 6\n  gap?: \"sm\" | \"md\" | \"lg\" | \"xl\"\n  autoRows?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"auto\"\n}\n\ninterface BentoCardProps extends ComponentPropsWithoutRef<\"div\"> {\n  name: string\n  className?: string\n  background?: ReactNode\n  Icon?: React.ElementType\n  description?: string\n  href?: string\n  cta?: string\n  variant?: \"default\" | \"minimal\" | \"elevated\" | \"gradient\" | \"glass\" | \"bordered\" | \"feature\"\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"wide\" | \"tall\" | \"square\"\n  badge?: string\n  metric?: {\n    value: string | number\n    label: string\n    trend?: \"up\" | \"down\" | \"neutral\"\n    percentage?: string\n  }\n  tags?: string[]\n  image?: string\n  video?: string\n  interactive?: boolean\n  disabled?: boolean\n  loading?: boolean\n  priority?: \"low\" | \"medium\" | \"high\"\n  status?: \"active\" | \"inactive\" | \"pending\" | \"error\"\n}\n\n// Grid variants configuration\nconst gridVariants = {\n  default: \"grid w-full auto-rows-[22rem] grid-cols-1 md:grid-cols-2 lg:grid-cols-3\",\n  compact: \"grid w-full auto-rows-[18rem] grid-cols-2 md:grid-cols-3 lg:grid-cols-4\",\n  masonry: \"columns-1 md:columns-2 lg:columns-3 space-y-4\",\n  asymmetric: \"grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-6 auto-rows-[12rem]\",\n  featured: \"grid w-full auto-rows-[20rem] grid-cols-1 md:grid-cols-2 lg:grid-cols-4\",\n}\n\nconst gapVariants = {\n  sm: \"gap-2\",\n  md: \"gap-4\",\n  lg: \"gap-6\",\n  xl: \"gap-8\",\n}\n\nconst autoRowVariants = {\n  sm: \"auto-rows-[16rem]\",\n  md: \"auto-rows-[20rem]\",\n  lg: \"auto-rows-[24rem]\",\n  xl: \"auto-rows-[28rem]\",\n  auto: \"auto-rows-auto\",\n}\n\n// Card size variants\nconst sizeVariants = {\n  sm: \"col-span-1 row-span-1\",\n  md: \"col-span-1 md:col-span-2 row-span-1\",\n  lg: \"col-span-1 md:col-span-2 lg:col-span-3 row-span-2\",\n  xl: \"col-span-1 md:col-span-3 lg:col-span-4 row-span-3\",\n  wide: \"col-span-1 md:col-span-2 row-span-1\",\n  tall: \"col-span-1 row-span-2\",\n  square: \"col-span-1 row-span-1 aspect-square\",\n}\n\n// Card style variants\nconst cardVariants = {\n  default: {\n    base: \"bg-background [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)] dark:bg-background dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset]\",\n    hover: \"group-hover:bg-black/[.03] group-hover:dark:bg-neutral-800/10\",\n  },\n  minimal: {\n    base: \"bg-transparent border border-neutral-200 dark:border-neutral-800\",\n    hover: \"group-hover:bg-neutral-50 group-hover:dark:bg-neutral-900/50\",\n  },\n  elevated: {\n    base: \"bg-background shadow-lg border border-neutral-200/50 dark:border-neutral-800/50 dark:bg-background\",\n    hover: \"group-hover:shadow-xl group-hover:-translate-y-1\",\n  },\n  gradient: {\n    base: \"bg-gradient-to-br from-purple-500/10 via-pink-500/10 to-orange-500/10 border border-purple-200/20 dark:border-purple-800/20\",\n    hover: \"group-hover:from-purple-500/20 group-hover:via-pink-500/20 group-hover:to-orange-500/20\",\n  },\n  glass: {\n    base: \"bg-white/10 backdrop-blur-md border border-white/20 dark:bg-black/10 dark:border-white/10\",\n    hover: \"group-hover:bg-white/20 group-hover:dark:bg-black/20\",\n  },\n  bordered: {\n    base: \"bg-background border-2 border-neutral-300 dark:border-neutral-700 dark:bg-background\",\n    hover: \"group-hover:border-neutral-400 group-hover:dark:border-neutral-600\",\n  },\n  feature: {\n    base: \"bg-gradient-to-br from-blue-500 to-purple-600 text-white border-0\",\n    hover: \"group-hover:from-blue-600 group-hover:to-purple-700\",\n  },\n}\n\n// Priority indicators\nconst priorityColors = {\n  low: \"bg-green-500\",\n  medium: \"bg-yellow-500\",\n  high: \"bg-red-500\",\n}\n\n// Status indicators\nconst statusColors = {\n  active: \"bg-green-500\",\n  inactive: \"bg-gray-500\",\n  pending: \"bg-yellow-500\",\n  error: \"bg-red-500\",\n}\n\nconst BentoGrid = forwardRef<HTMLDivElement, BentoGridProps>(\n  ({ children, className, variant = \"default\", columns, gap = \"md\", autoRows = \"md\", ...props }, ref) => {\n    const gridClass = columns \n      ? `grid w-full grid-cols-1 md:grid-cols-${Math.min(columns, 3)} lg:grid-cols-${columns}`\n      : gridVariants[variant]\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          gridClass,\n          gapVariants[gap],\n          autoRowVariants[autoRows],\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nBentoGrid.displayName = \"BentoGrid\"\n\nconst BentoCard = forwardRef<HTMLDivElement, BentoCardProps>(\n  ({\n    name,\n    className,\n    background,\n    Icon,\n    description,\n    href,\n    cta = \"Learn more\",\n    variant = \"default\",\n    size = \"md\",\n    badge,\n    metric,\n    tags,\n    image,\n    video,\n    interactive = true,\n    disabled = false,\n    loading = false,\n    priority,\n    status,\n    ...props\n  }, ref) => {\n    const cardStyle = cardVariants[variant]\n    const isFeatureVariant = variant === \"feature\"\n\n    const cardContent = (\n      <motion.div\n        ref={ref}\n        key={name}\n        className={cn(\n          \"group relative flex flex-col justify-between overflow-hidden rounded-xl transition-all duration-300\",\n          sizeVariants[size],\n          cardStyle.base,\n          interactive && \"cursor-pointer\",\n          disabled && \"opacity-50 cursor-not-allowed\",\n          className,\n        )}\n        whileHover={interactive && !disabled ? { scale: 1.02 } : undefined}\n        whileTap={interactive && !disabled ? { scale: 0.98 } : undefined}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        {...props}\n      >\n        {/* Priority indicator */}\n        {priority && (\n          <div className={cn(\"absolute top-2 left-2 w-2 h-2 rounded-full z-20\", priorityColors[priority])} />\n        )}\n\n        {/* Status indicator */}\n        {status && (\n          <div className=\"absolute top-2 right-2 z-20\">\n            <div className={cn(\"w-2 h-2 rounded-full\", statusColors[status])} />\n          </div>\n        )}\n\n        {/* Background content */}\n        {background && <div className=\"absolute inset-0\">{background}</div>}\n        \n        {/* Image background */}\n        {image && (\n          <div className=\"absolute inset-0\">\n            <img src={image || \"/placeholder.svg\"} alt={name} className=\"w-full h-full object-cover\" />\n            <div className=\"absolute inset-0 bg-black/20\" />\n          </div>\n        )}\n\n        {/* Video background */}\n        {video && (\n          <div className=\"absolute inset-0\">\n            <video autoPlay muted loop className=\"w-full h-full object-cover\">\n              <source src={video} type=\"video/mp4\" />\n            </video>\n            <div className=\"absolute inset-0 bg-black/20\" />\n          </div>\n        )}\n\n        {/* Badge */}\n        {badge && (\n          <div className=\"absolute top-4 left-4 z-10\">\n            <Badge variant=\"secondary\" className=\"bg-white/90 text-black dark:bg-black/90 dark:text-white\">\n              {badge}\n            </Badge>\n          </div>\n        )}\n\n        {/* Main content */}\n        <div className=\"relative z-10 p-6 flex-1 flex flex-col justify-between\">\n          {/* Top section with metric */}\n          {metric && (\n            <div className=\"mb-4\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <span className={cn(\n                  \"text-3xl font-bold\",\n                  isFeatureVariant ? \"text-white\" : \"text-neutral-900 dark:text-neutral-100\"\n                )}>\n                  {metric.value}\n                </span>\n                {metric.trend && (\n                  <span className={cn(\n                    \"text-sm px-2 py-1 rounded-full\",\n                    metric.trend === \"up\" ? \"bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400\" :\n                    metric.trend === \"down\" ? \"bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400\" :\n                    \"bg-gray-100 text-gray-700 dark:bg-gray-900/30 dark:text-gray-400\"\n                  )}>\n                    {metric.percentage}\n                  </span>\n                )}\n              </div>\n              <p className={cn(\n                \"text-sm\",\n                isFeatureVariant ? \"text-white/80\" : \"text-neutral-500 dark:text-neutral-400\"\n              )}>\n                {metric.label}\n              </p>\n            </div>\n          )}\n\n          {/* Icon and content section */}\n          <div className=\"flex-1\">\n            <div className=\"pointer-events-none z-10 flex transform-gpu flex-col gap-3 transition-all duration-300 lg:group-hover:-translate-y-2\">\n              {Icon && (\n                <Icon className={cn(\n                  \"h-12 w-12 origin-left transform-gpu transition-all duration-300 ease-in-out group-hover:scale-90\",\n                  isFeatureVariant ? \"text-white\" : \"text-neutral-700 dark:text-neutral-300\"\n                )} />\n              )}\n              \n              <div>\n                <h3 className={cn(\n                  \"text-xl font-semibold mb-2\",\n                  isFeatureVariant ? \"text-white\" : \"text-neutral-700 dark:text-neutral-300\"\n                )}>\n                  {name}\n                </h3>\n                \n                {description && (\n                  <p className={cn(\n                    \"text-sm leading-relaxed\",\n                    isFeatureVariant ? \"text-white/80\" : \"text-neutral-500 dark:text-neutral-400\"\n                  )}>\n                    {description}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Tags */}\n            {tags && tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-4\">\n                {tags.slice(0, 3).map((tag, index) => (\n                  <Badge \n                    key={index} \n                    variant=\"outline\" \n                    className={cn(\n                      \"text-xs\",\n                      isFeatureVariant ? \"border-white/30 text-white/80\" : \"\"\n                    )}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n                {tags.length > 3 && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    +{tags.length - 3}\n                  </Badge>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* CTA Button - Mobile */}\n          {href && cta && (\n            <div className={cn(\n              \"lg:hidden flex w-full translate-y-0 transform-gpu flex-row items-center transition-all duration-300 mt-4\",\n            )}>\n              <Button\n                variant={isFeatureVariant ? \"secondary\" : \"link\"}\n                asChild\n                size=\"sm\"\n                className={cn(\n                  \"pointer-events-auto\",\n                  isFeatureVariant ? \"bg-white/20 text-white hover:bg-white/30\" : \"p-0\"\n                )}\n              >\n                <a href={href}>\n                  {cta}\n                  <ArrowRightIcon className=\"ms-2 h-4 w-4 rtl:rotate-180\" />\n                </a>\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* CTA Button - Desktop */}\n        {href && cta && (\n          <div className={cn(\n            \"hidden lg:flex pointer-events-none absolute bottom-0 w-full translate-y-10 transform-gpu flex-row items-center p-6 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100\",\n          )}>\n            <Button\n              variant={isFeatureVariant ? \"secondary\" : \"link\"}\n              asChild\n              size=\"sm\"\n              className={cn(\n                \"pointer-events-auto\",\n                isFeatureVariant ? \"bg-white/20 text-white hover:bg-white/30\" : \"p-0\"\n              )}\n            >\n              <a href={href}>\n                {cta}\n                <ArrowRightIcon className=\"ms-2 h-4 w-4 rtl:rotate-180\" />\n              </a>\n            </Button>\n          </div>\n        )}\n\n        {/* Hover overlay */}\n        <div className={cn(\n          \"pointer-events-none absolute inset-0 transform-gpu transition-all duration-300\",\n          cardStyle.hover\n        )} />\n\n        {/* Loading state */}\n        {loading && (\n          <div className=\"absolute inset-0 bg-white/50 dark:bg-black/50 flex items-center justify-center z-30\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-neutral-900 dark:border-neutral-100\"></div>\n          </div>\n        )}\n      </motion.div>\n    )\n\n    return cardContent\n  }\n)\nBentoCard.displayName = \"BentoCard\"\n\n// Preset card components for common use cases\nconst MetricCard = ({ title, value, change, trend, ...props }: {\n  title: string\n  value: string | number\n  change?: string\n  trend?: \"up\" | \"down\" | \"neutral\"\n} & Omit<BentoCardProps, \"name\" | \"metric\">) => (\n  <BentoCard\n    name={title}\n    metric={{\n      value,\n      label: title,\n      trend,\n      percentage: change,\n    }}\n    variant=\"minimal\"\n    size=\"sm\"\n    {...props}\n  />\n)\n\nconst FeatureCard = ({ title, description, icon, ...props }: {\n  title: string\n  description: string\n  icon: React.ElementType\n} & Omit<BentoCardProps, \"name\" | \"description\" | \"Icon\">) => (\n  <BentoCard\n    name={title}\n    description={description}\n    Icon={icon}\n    variant=\"feature\"\n    size=\"md\"\n    {...props}\n  />\n)\n\nconst ImageCard = ({ title, description, imageSrc, ...props }: {\n  title: string\n  description?: string\n  imageSrc: string\n} & Omit<BentoCardProps, \"name\" | \"description\" | \"image\">) => (\n  <BentoCard\n    name={title}\n    description={description}\n    image={imageSrc}\n    variant=\"default\"\n    size=\"md\"\n    {...props}\n  />\n)\n\nexport { \n  BentoGrid, \n  BentoCard, \n  MetricCard, \n  FeatureCard, \n  ImageCard,\n  type BentoGridProps,\n  type BentoCardProps \n}\n",
      "type": "registry:ui"
    }
  ]
}