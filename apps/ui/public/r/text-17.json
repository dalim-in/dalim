{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-17",
  "type": "registry:component",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/components/text/text-17.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\n\nexport default function DemoOne() {\n  return (\n    <main  >\n       <ParticleTextEffect\n        text=\"21st\"\n        fontSize={50}\n        fontWeight=\"bold\"\n        fontFamily=\"Inter, sans-serif\"\n        tileSize=\"0.5vmin\"\n        distance=\"0.7vmin\"  \n      /> \n    </main>\n  )\n}\n\n\ninterface ParticleTextEffectProps {\n  text?: string\n  className?: string\n  fontSize?: number\n  fontWeight?: string\n  fontFamily?: string\n  tileSize?: string\n  distance?: string \n  textColor?: string\n  animationDuration?: number\n  blurEffect?: boolean\n  dropShadowColor?: string\n}\n\nexport function ParticleTextEffect({\n  text = \"Dalim\",\n  className = \"\",\n  fontSize = 35,\n  fontWeight = \"bold\",\n  fontFamily = \"monospace\",\n  tileSize = \"0.7vmin\",\n  distance = \"1vmin\", \n  textColor = \"#ee75d2\",\n  animationDuration = 10,\n  blurEffect = true,\n  dropShadowColor = \"#b818da\",\n}: ParticleTextEffectProps) {\n  const tilesRef = useRef<HTMLDivElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const countRef = useRef<HTMLDivElement>(null)\n  const [showAnimation, setShowAnimation] = useState(false)\n\n  useEffect(() => {\n    const tiles = tilesRef.current\n    const canvas = canvasRef.current\n    const count = countRef.current\n\n    if (!tiles || !canvas || !count) return\n\n    // Clear existing tiles\n    tiles.innerHTML = \"\"\n\n    const counts = text\n    const size = fontSize\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    const font = `${fontWeight} ${size}px ${fontFamily}`\n    ctx.font = font\n    const metrics = ctx.measureText(counts)\n    canvas.width = metrics.width\n    canvas.height = size\n\n    ctx.fillStyle = \"white\"\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n    ctx.font = font\n    ctx.fillStyle = \"black\"\n    ctx.fillText(counts, 0, canvas.height)\n\n    const { data } = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    const length = data.length\n    const pixels = []\n    let x = 0,\n      y = 0\n    const centerX = canvas.width / 2\n    const centerY = canvas.height / 2\n\n    for (let i = 0; i < length; i += 4) {\n      const pixel = { hit: data[i] === 0, i, x: x - centerX, y: y - centerY }\n      if (data[i] === 0) {\n        pixels.push(pixel)\n      }\n      x++\n      if (x === canvas.width) {\n        x = 0\n        y++\n      }\n    }\n\n    pixels.forEach(({ x, y }, index) => {\n      const tile = document.createElement(\"div\")\n      tile.style.setProperty(\"--p-x\", `${x}`)\n      tile.style.setProperty(\"--p-y\", `${y}`)\n      tile.style.setProperty(\"--p-i\", `${index}`)\n      tile.style.setProperty(\"--p-r\", `${Math.random()}`)\n      tile.style.setProperty(\"--p-r2\", `${Math.random()}`)\n      tiles.appendChild(tile)\n    })\n\n    // Start animation after a brief delay\n    setTimeout(() => setShowAnimation(true), 100)\n  }, [text, fontSize, fontWeight, fontFamily])\n\n  const handleClick = () => {\n    setShowAnimation(false)\n    requestAnimationFrame(() => {\n      setShowAnimation(true)\n    })\n  }\n\n  return (\n    <div\n      className={`particle-text-container ${className}`}\n      onClick={handleClick}\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"grid\",\n        placeItems: \"center\", \n        color: textColor,\n        margin: 0,\n        overflow: \"clip\",\n        cursor: \"pointer\",\n        boxSizing: \"border-box\",\n      }}\n    >\n      <style jsx>{`\n        @property --x {\n          syntax: \"<length>\";\n          initial-value: 0;\n          inherits: true;\n        }\n\n        @property --y {\n          syntax: \"<length>\";\n          initial-value: 0;\n          inherits: true;\n        }\n\n        @property --scale {\n          syntax: \"<number>\";\n          initial-value: 1;\n          inherits: true;\n        }\n\n        .tiles {\n          filter: drop-shadow(0 0 1rem ${dropShadowColor});\n          width: 0dvw;\n          height: 0dvh;\n          display: grid;\n          place-items: center;\n          cursor: pointer;\n          --tile-size: ${tileSize};\n          --distance: ${distance};\n        }\n\n        .tiles > div {\n          border-radius: 50%;\n          width: var(--tile-size);\n          aspect-ratio: 1;\n          background: hsla(var(--color), 110%, 60%, 1);\n          position: absolute;\n          transform: translate3d(var(--x), var(--y), 0) scale(var(--scale));\n          --delay: calc(var(--p-r) * 1s);\n          --color: calc(var(--p-r) * (360 - 100) + 100);\n          --duration: calc(var(--p-r2) * ${animationDuration}s);\n        }\n\n        .tiles.show > div {\n          animation: fade-in 0.3s linear forwards,\n            show var(--duration) var(--delay) cubic-bezier(0.86, 0.86, 0.41, 1.16) infinite,\n            blink 1s var(--delay) ease-in-out infinite;\n        }\n\n        @keyframes blink {\n          from, 50%, to {\n            opacity: 1;\n          }\n          30%, 70% {\n            opacity: 0.3;\n          }\n        }\n\n        @keyframes fade-in {\n          from {\n            opacity: 0;\n          }\n          to {\n            opacity: 1;\n          }\n        }\n\n        @keyframes show {\n          from {\n            --x: calc(1dvw * var(--p-r));\n            --y: calc(-100dvh * var(--p-r));\n            filter: ${blurEffect ? \"blur(0.5rem)\" : \"none\"};\n            --scale: calc(clamp(1.5, 10 * var(--p-r2), 5));\n          }\n          5% {\n            filter: ${blurEffect ? \"blur(0rem)\" : \"none\"};\n          }\n          10% {\n            --x: calc(var(--p-x) * var(--distance));\n            --y: calc(var(--p-y) * var(--distance));\n            --scale: calc(1);\n          }\n          to {\n            --x: calc(var(--p-x) * var(--distance));\n            --y: calc(var(--p-y) * var(--distance));\n          }\n        }\n\n        .hidden {\n          display: none;\n        }\n      `}</style>\n\n      <div ref={tilesRef} className={`tiles ${showAnimation ? \"show\" : \"\"}`} />\n\n      <div ref={countRef} className=\"hidden\">\n        {text}\n      </div>\n\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "text",
      "typo",
      "work",
      "effect"
    ],
    "style": 1,
    "colSpan": 3
  }
}