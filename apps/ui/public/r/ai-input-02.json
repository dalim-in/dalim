{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-input-02",
  "type": "registry:component",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/components/ai/ai-input-02.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport {\n  AIInput,\n  AIInputButton,\n  AIInputModelSelect,\n  AIInputModelSelectContent,\n  AIInputModelSelectItem,\n  AIInputModelSelectTrigger,\n  AIInputModelSelectValue,\n  AIInputSubmit,\n  AIInputTextarea,\n  AIInputToolbar,\n  AIInputTools,\n} from \"@/registry/default/ui/ai/input\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/default/ui/card\"\nimport { ScrollArea } from \"@/registry/default/ui/scroll-area\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport { Avatar, AvatarFallback } from \"@/registry/default/ui/avatar\"\nimport { GlobeIcon, MicIcon, PlusIcon, SendIcon, Bot, User, Trash2, Download } from \"lucide-react\"\n\nconst models = [\n  { id: \"gpt-4\", name: \"GPT-4\" },\n  { id: \"gpt-3.5-turbo\", name: \"GPT-3.5 Turbo\" },\n  { id: \"claude-2\", name: \"Claude 2\" },\n  { id: \"claude-instant\", name: \"Claude Instant\" },\n  { id: \"palm-2\", name: \"PaLM 2\" },\n  { id: \"llama-2-70b\", name: \"Llama 2 70B\" },\n  { id: \"llama-2-13b\", name: \"Llama 2 13B\" },\n  { id: \"cohere-command\", name: \"Command\" },\n  { id: \"mistral-7b\", name: \"Mistral 7B\" },\n]\n\n// Mock responses for different types of questions\nconst mockResponses = [\n  \"That's an interesting question! Let me think about that for a moment.\",\n  \"I'd be happy to help you with that. Here's what I think...\",\n  \"Great question! Based on my understanding, I would say...\",\n  \"That's a complex topic. Let me break it down for you...\",\n  \"I see what you're asking. From my perspective...\",\n  \"Thanks for asking! Here's my take on that...\",\n  \"That's something I can definitely help with. Consider this...\",\n  \"Excellent point! Let me elaborate on that...\",\n  \"I understand your question. Here's what I would suggest...\",\n  \"That's a thoughtful inquiry. My response would be...\",\n]\n\ninterface Message {\n  id: string\n  role: \"user\" | \"assistant\"\n  content: string\n  timestamp: Date\n}\n\nexport default function Component() {\n  const [messages, setMessages] = useState<Message[]>([])\n  const [input, setInput] = useState(\"\")\n  const [selectedModel, setSelectedModel] = useState(models[0].id)\n  const [isTyping, setIsTyping] = useState(false)\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      const scrollContainer = scrollAreaRef.current.querySelector(\"[data-radix-scroll-area-viewport]\")\n      if (scrollContainer) {\n        scrollContainer.scrollTop = scrollContainer.scrollHeight\n      }\n    }\n  }, [messages, isTyping])\n\n  const generateMockResponse = (userMessage: string): string => {\n    // Simple keyword-based responses for demo\n    const lowerMessage = userMessage.toLowerCase()\n\n    if (lowerMessage.includes(\"hello\") || lowerMessage.includes(\"hi\")) {\n      return \"Hello! It's great to meet you. How can I assist you today?\"\n    }\n\n    if (lowerMessage.includes(\"how are you\")) {\n      return \"I'm doing well, thank you for asking! I'm here and ready to help with any questions you might have.\"\n    }\n\n    if (lowerMessage.includes(\"weather\")) {\n      return \"I don't have access to real-time weather data, but I'd recommend checking a reliable weather service for current conditions in your area.\"\n    }\n\n    if (lowerMessage.includes(\"help\")) {\n      return \"I'm here to help! You can ask me questions about various topics, and I'll do my best to provide useful information and assistance.\"\n    }\n\n    if (lowerMessage.includes(\"time\")) {\n      return `The current time is ${new Date().toLocaleTimeString()}. Is there anything specific you'd like to know about time or scheduling?`\n    }\n\n    // Return a random response for other questions\n    return mockResponses[Math.floor(Math.random() * mockResponses.length)]\n  }\n\n  const simulateTyping = async (response: string): Promise<void> => {\n    setIsTyping(true)\n\n    // Simulate typing delay (1-3 seconds)\n    const typingDelay = Math.random() * 2000 + 1000\n    await new Promise((resolve) => setTimeout(resolve, typingDelay))\n\n    setIsTyping(false)\n\n    // Add the response message\n    const assistantMessage: Message = {\n      id: Date.now().toString() + \"-assistant\",\n      role: \"assistant\",\n      content: response,\n      timestamp: new Date(),\n    }\n\n    setMessages((prev) => [...prev, assistantMessage])\n  }\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    if (!input.trim()) return\n\n    // Add user message\n    const userMessage: Message = {\n      id: Date.now().toString() + \"-user\",\n      role: \"user\",\n      content: input.trim(),\n      timestamp: new Date(),\n    }\n\n    setMessages((prev) => [...prev, userMessage])\n\n    // Generate and add mock response\n    const response = generateMockResponse(input.trim())\n    setInput(\"\")\n\n    // Simulate AI thinking/typing\n    await simulateTyping(response)\n  }\n\n  const clearChat = () => {\n    setMessages([])\n  }\n\n  const exportChat = () => {\n    const chatData = {\n      timestamp: new Date().toISOString(),\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n        timestamp: m.timestamp.toISOString(),\n      })),\n    }\n\n    const blob = new Blob([JSON.stringify(chatData, null, 2)], {\n      type: \"application/json\",\n    })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = `chat-export-${new Date().toISOString().split(\"T\")[0]}.json`\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen max-w-4xl mx-auto\">\n      {/* Header */}\n      <Card className=\"rounded-none border-x-0 border-t-0\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl\">Mock AI Chatbot</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={exportChat} disabled={messages.length === 0}>\n                <Download size={16} />\n                Export\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={clearChat} disabled={messages.length === 0}>\n                <Trash2 size={16} />\n                Clear\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Messages */}\n      <Card className=\"flex-1 rounded-none border-x-0 border-t-0\">\n        <CardContent className=\"p-0 h-full\">\n          <ScrollArea className=\"h-full\" ref={scrollAreaRef}>\n            {messages.length === 0 ? (\n              <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                <div className=\"text-center\">\n                  <Bot size={48} className=\"mx-auto mb-4 opacity-50\" />\n                  <p className=\"text-lg font-medium\">Start a conversation</p>\n                  <p className=\"text-sm\">This is a demo chatbot with simulated responses!</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-0\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex gap-3 p-4 ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                  >\n                    {message.role === \"assistant\" && (\n                      <Avatar className=\"h-8 w-8 shrink-0\">\n                        <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                          <Bot size={16} />\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n\n                    <Card\n                      className={`max-w-[80%] p-3 ${\n                        message.role === \"user\" ? \"bg-primary text-primary-foreground\" : \"bg-muted\"\n                      }`}\n                    >\n                      <div className=\"text-sm whitespace-pre-wrap\">{message.content}</div>\n                    </Card>\n\n                    {message.role === \"user\" && (\n                      <Avatar className=\"h-8 w-8 shrink-0\">\n                        <AvatarFallback className=\"bg-secondary\">\n                          <User size={16} />\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n                  </div>\n                ))}\n\n                {/* Typing indicator */}\n                {isTyping && (\n                  <div className=\"flex gap-3 p-4 justify-start\">\n                    <Avatar className=\"h-8 w-8 shrink-0\">\n                      <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                        <Bot size={16} />\n                      </AvatarFallback>\n                    </Avatar>\n                    <Card className=\"max-w-[80%] p-3 bg-muted\">\n                      <div className=\"flex items-center gap-1\">\n                        <div className=\"flex space-x-1\">\n                          <div\n                            className=\"w-2 h-2 bg-current rounded-full animate-bounce\"\n                            style={{ animationDelay: \"0ms\" }}\n                          />\n                          <div\n                            className=\"w-2 h-2 bg-current rounded-full animate-bounce\"\n                            style={{ animationDelay: \"150ms\" }}\n                          />\n                          <div\n                            className=\"w-2 h-2 bg-current rounded-full animate-bounce\"\n                            style={{ animationDelay: \"300ms\" }}\n                          />\n                        </div>\n                        <span className=\"text-sm text-muted-foreground ml-2\">AI is typing...</span>\n                      </div>\n                    </Card>\n                  </div>\n                )}\n              </div>\n            )}\n          </ScrollArea>\n        </CardContent>\n      </Card>\n\n      {/* Input */}\n      <Card className=\"rounded-none border-x-0 border-b-0\">\n        <CardContent className=\"p-4\">\n          <AIInput onSubmit={handleSubmit}>\n            <AIInputTextarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Ask me anything...\"\n              disabled={isTyping}\n              maxHeight={200}\n            />\n            <AIInputToolbar>\n              <AIInputTools>\n                <AIInputButton disabled={isTyping}>\n                  <PlusIcon size={16} />\n                </AIInputButton>\n                <AIInputButton disabled={isTyping}>\n                  <MicIcon size={16} />\n                </AIInputButton>\n                <AIInputButton disabled={isTyping}>\n                  <GlobeIcon size={16} />\n                  <span>Search</span>\n                </AIInputButton>\n                <AIInputModelSelect value={selectedModel} onValueChange={setSelectedModel} disabled={isTyping}>\n                  <AIInputModelSelectTrigger>\n                    <AIInputModelSelectValue />\n                  </AIInputModelSelectTrigger>\n                  <AIInputModelSelectContent>\n                    {models.map((model) => (\n                      <AIInputModelSelectItem key={model.id} value={model.id}>\n                        {model.name}\n                      </AIInputModelSelectItem>\n                    ))}\n                  </AIInputModelSelectContent>\n                </AIInputModelSelect>\n              </AIInputTools>\n              <AIInputSubmit disabled={isTyping || !input.trim()}>\n                <SendIcon size={16} />\n              </AIInputSubmit>\n            </AIInputToolbar>\n          </AIInput>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "ai",
      "input",
      "component"
    ],
    "colSpan": 2
  }
}