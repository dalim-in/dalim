{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-44",
  "type": "registry:component",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/components/button/button-44.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { Check, Download, X } from \"lucide-react\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport { Button } from \"@/registry/default/ui/button\"\n\ninterface BtnProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  onProcess?: () => Promise<boolean>\n  processDuration?: number\n}\n\nexport default function Components({\n  className,\n  onProcess = async () => {\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n    return Math.random() > 0.5\n  },\n  processDuration = 2000,\n}: BtnProps) {\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [isSuccess, setIsSuccess] = useState<boolean | null>(null)\n  const [isScaling, setIsScaling] = useState(false)\n  const [, setProgress] = useState(0)\n\n  useEffect(() => {\n    if (isProcessing) {\n      const startTime = Date.now()\n      const interval = setInterval(() => {\n        const elapsed = Date.now() - startTime\n        const newProgress = (elapsed / processDuration) * 100\n\n        if (newProgress >= 100) {\n          clearInterval(interval)\n          setProgress(100)\n        } else {\n          setProgress(newProgress)\n        }\n      }, 10)\n\n      return () => clearInterval(interval)\n    }\n  }, [isProcessing, processDuration])\n\n  async function handleClick() {\n    if (isProcessing) return\n\n    setIsProcessing(true)\n    setIsSuccess(null)\n    setProgress(0)\n\n    await new Promise((resolve) => setTimeout(resolve, processDuration))\n    const success = onProcess ? await onProcess() : true\n\n    setIsSuccess(success)\n    setIsProcessing(false)\n    setIsScaling(true)\n\n    setTimeout(() => {\n      setIsSuccess(null)\n      setProgress(0)\n      setIsScaling(false)\n    }, 2000)\n  }\n\n  return (\n    <Button\n      variant={\"outline\"}\n      className={cn(\"\", isProcessing && \"cursor-wait\", className)}\n      onClick={handleClick}\n      disabled={isProcessing}\n    >\n      <div\n        className={cn(\n          \"flex w-full items-center justify-center gap-2\",\n          isScaling && \"animate-[scale_300ms_ease-in-out]\"\n        )}\n      >\n        {isSuccess === null ? (\n          <>\n            <Download\n              className={cn(\n                \"h-4 w-4 transition-transform duration-200\",\n                \"group-hover:scale-110\",\n                isProcessing && \"animate-bounce\"\n              )}\n            />\n            <span>{isProcessing ? \"Processing...\" : \"Download\"}</span>\n          </>\n        ) : isSuccess ? (\n          <>\n            <Check className=\"h-4 w-4 text-green-500\" />\n            <span className=\"text-green-500\">Complete!</span>\n          </>\n        ) : (\n          <>\n            <X className=\"h-4 w-4 text-red-500\" />\n            <span className=\"text-red-500\">Failed</span>\n          </>\n        )}\n      </div>\n    </Button>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "button",
      "example",
      "component"
    ],
    "style": 1
  }
}