{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "background-08",
  "type": "registry:component",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/components/background/background-08.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useMemo, type HTMLAttributes } from \"react\"\nimport { motion } from \"motion/react\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\n\nexport default function Component() {\n  return (\n    <div className=\"min-h-screen bg-black p-8\">\n      <div className=\"mx-auto max-w-4xl space-y-8\">\n        <h1 className=\"text-center text-4xl font-bold text-white\">\n          Space Warp Background Demo\n        </h1>\n\n        <SpaceWarpBackground className=\"h-96\">\n          <div className=\"flex h-full items-center justify-center\">\n            <div className=\"text-center\">\n              <h2 className=\"mb-4 text-3xl font-bold text-white\">\n                Hyperspace Jump\n              </h2>\n              <p className=\"text-blue-200\">\n                Experience the warp effect with particles flying past\n              </p>\n            </div>\n          </div>\n        </SpaceWarpBackground>\n      </div>\n    </div>\n  )\n}\n\ninterface SpaceWarpBackgroundProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode\n  particleCount?: number\n  speed?: number\n  particleSize?: number\n  colors?: string[]\n  intensity?: number\n}\n\nconst WarpParticle = ({\n  initialX,\n  initialY,\n  delay,\n  duration,\n  size,\n  color,\n}: {\n  initialX: number\n  initialY: number\n  delay: number\n  duration: number\n  size: number\n  color: string\n}) => {\n  const distance = Math.sqrt(initialX * initialX + initialY * initialY)\n  const normalizedX = initialX / distance\n  const normalizedY = initialY / distance\n\n  const endX = normalizedX * 150\n  const endY = normalizedY * 150\n\n  return (\n    <motion.div\n      className=\"absolute rounded-full\"\n      style={{\n        backgroundColor: color,\n        width: size,\n        height: size,\n        left: \"50%\",\n        top: \"50%\",\n        boxShadow: `0 0 ${size * 2}px ${color}`,\n      }}\n      initial={{\n        x: initialX,\n        y: initialY,\n        scale: 0.1,\n        opacity: 0,\n      }}\n      animate={{\n        x: `${endX}vw`,\n        y: `${endY}vh`,\n        scale: [0.1, 1, 0],\n        opacity: [0, 1, 0],\n      }}\n      transition={{\n        duration,\n        delay,\n        repeat: Number.POSITIVE_INFINITY,\n        ease: \"easeOut\",\n      }}\n    />\n  )\n}\n\nconst WarpLine = ({\n  angle,\n  delay,\n  duration,\n}: {\n  angle: number\n  delay: number\n  duration: number\n}) => {\n  return (\n    <motion.div\n      className=\"absolute h-px bg-gradient-to-r from-transparent via-blue-400 to-transparent\"\n      style={{\n        left: \"50%\",\n        top: \"50%\",\n        transformOrigin: \"0 50%\",\n        transform: `rotate(${angle}deg)`,\n        width: \"0px\",\n      }}\n      initial={{\n        width: \"0px\",\n        opacity: 0,\n      }}\n      animate={{\n        width: \"200vw\",\n        opacity: [0, 1, 0],\n      }}\n      transition={{\n        duration,\n        delay,\n        repeat: Number.POSITIVE_INFINITY,\n        ease: \"easeOut\",\n      }}\n    />\n  )\n}\n\nexport const SpaceWarpBackground: React.FC<SpaceWarpBackgroundProps> = ({\n  children,\n  className,\n  particleCount = 50,\n  speed = 3,\n  particleSize = 2,\n  colors = [\"#60a5fa\", \"#a78bfa\", \"#34d399\", \"#fbbf24\", \"#f87171\"],\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  intensity = 1,\n  ...props\n}) => {\n  const particles = useMemo(() => {\n    return Array.from({ length: particleCount }, (_, i) => {\n      const angle = (Math.PI * 2 * i) / particleCount + Math.random() * 0.5\n      const radius = Math.random() * 20 + 10\n      const x = Math.cos(angle) * radius\n      const y = Math.sin(angle) * radius\n\n      return {\n        id: i,\n        initialX: x,\n        initialY: y,\n        delay: Math.random() * speed,\n        duration: speed + Math.random() * 2,\n        size: particleSize + Math.random() * particleSize,\n        color: colors[Math.floor(Math.random() * colors.length)],\n      }\n    })\n  }, [particleCount, speed, particleSize, colors])\n\n  const warpLines = useMemo(() => {\n    return Array.from({ length: 8 }, (_, i) => ({\n      id: i,\n      angle: (360 / 8) * i + Math.random() * 10,\n      delay: Math.random() * speed * 2,\n      duration: speed * 2 + Math.random(),\n    }))\n  }, [speed])\n\n  return (\n    <div\n      className={cn(\"relative overflow-hidden rounded border\", className)}\n      {...props}\n    >\n      {/* Background gradient */}\n      <div className=\"bg-gradient-radial absolute inset-0 from-slate-900/50 via-slate-950 to-black\" />\n\n      {/* Warp effect container */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {/* Central glow */}\n        <div className=\"absolute top-1/2 left-1/2 h-32 w-32 -translate-x-1/2 -translate-y-1/2 rounded-full bg-blue-500/20 blur-3xl\" />\n\n        {/* Warp lines */}\n        {warpLines.map((line) => (\n          <WarpLine\n            key={`line-${line.id}`}\n            angle={line.angle}\n            delay={line.delay}\n            duration={line.duration}\n          />\n        ))}\n\n        {/* Particles */}\n        {particles.map((particle) => (\n          <WarpParticle\n            key={`particle-${particle.id}`}\n            initialX={particle.initialX}\n            initialY={particle.initialY}\n            delay={particle.delay}\n            duration={particle.duration}\n            size={particle.size}\n            color={particle.color}\n          />\n        ))}\n\n        {/* Additional depth layers */}\n        <motion.div\n          className=\"bg-gradient-radial absolute inset-0 from-transparent via-blue-500/5 to-transparent\"\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.3, 0.6, 0.3],\n          }}\n          transition={{\n            duration: speed * 2,\n            repeat: Number.POSITIVE_INFINITY,\n            ease: \"easeInOut\",\n          }}\n        />\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 p-8\">{children}</div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "background",
      "bg",
      "texture",
      "pattern"
    ],
    "style": 1,
    "colSpan": 3
  }
}