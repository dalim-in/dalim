{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "background-05",
  "type": "registry:component",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/components/background/background-05.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { useTheme } from \"next-themes\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\n\nexport default function Component() {\n  return (\n    <div className=\"bg-background relative flex h-[650px] w-full flex-col items-center justify-center overflow-hidden rounded-xl border\">\n      <p className=\"z-10 absolute text-center text-3xl font-semibold tracking-tighter whitespace-pre-wrap text-white md:text-7xl dark:text-black\">\n        Background\n      </p>\n      <BackgroundGradient />\n    </div>\n  )\n}\n\nconst BackgroundGradient = ({\n  firstColor = \"242, 0, 137\",\n  secondColor = \"209, 0, 209\",\n  thirdColor = \"161, 0, 242\",\n  fourthColor = \"45, 0, 247\",\n  fifthColor = \"242, 0, 137\",\n  pointerColor = \"209, 0, 209\",\n  size = \"50%\",\n  blendingValue = \"hard-light\",\n  children,\n  className,\n  interactive = true,\n  containerClassName,\n}: {\n  gradientBackgroundStart?: string\n  gradientBackgroundEnd?: string\n  firstColor?: string\n  secondColor?: string\n  thirdColor?: string\n  fourthColor?: string\n  fifthColor?: string\n  pointerColor?: string\n  size?: string\n  blendingValue?: string\n  children?: React.ReactNode\n  className?: string\n  interactive?: boolean\n  containerClassName?: string\n}) => {\n  const interactiveRef = useRef<HTMLDivElement>(null)\n\n  // Use refs to store animation values instead of state\n  const curXRef = useRef(0)\n  const curYRef = useRef(0)\n  const tgXRef = useRef(0)\n  const tgYRef = useRef(0)\n  const animationFrameRef = useRef<number | null>(null)\n\n  const [isSafari, setIsSafari] = useState(false)\n\n  const { theme } = useTheme()\n\n  // Set up gradient background colors based on theme\n  const gradientBackgroundStart = theme === \"dark\" ? \"#000000\" : \"#ffffff\"\n  const gradientBackgroundEnd = theme === \"dark\" ? \"#000000\" : \"#ffffff\"\n\n  // Set up CSS variables\n  useEffect(() => {\n    document.body.style.setProperty(\n      \"--gradient-background-start\",\n      gradientBackgroundStart\n    )\n    document.body.style.setProperty(\n      \"--gradient-background-end\",\n      gradientBackgroundEnd\n    )\n    document.body.style.setProperty(\"--first-color\", firstColor)\n    document.body.style.setProperty(\"--second-color\", secondColor)\n    document.body.style.setProperty(\"--third-color\", thirdColor)\n    document.body.style.setProperty(\"--fourth-color\", fourthColor)\n    document.body.style.setProperty(\"--fifth-color\", fifthColor)\n    document.body.style.setProperty(\"--pointer-color\", pointerColor)\n    document.body.style.setProperty(\"--size\", size)\n    document.body.style.setProperty(\"--blending-value\", blendingValue)\n  }, [\n    gradientBackgroundStart,\n    gradientBackgroundEnd,\n    firstColor,\n    secondColor,\n    thirdColor,\n    fourthColor,\n    fifthColor,\n    pointerColor,\n    size,\n    blendingValue,\n  ])\n\n  // Set up Safari detection\n  useEffect(() => {\n    setIsSafari(/^((?!chrome|android).)*safari/i.test(navigator.userAgent))\n  }, [])\n\n  // Set up animation loop\n  useEffect(() => {\n    if (!interactive) return\n\n    function animateMovement() {\n      if (!interactiveRef.current) {\n        animationFrameRef.current = requestAnimationFrame(animateMovement)\n        return\n      }\n\n      // Calculate new position with easing\n      curXRef.current =\n        curXRef.current + (tgXRef.current - curXRef.current) / 20\n      curYRef.current =\n        curYRef.current + (tgYRef.current - curYRef.current) / 20\n\n      // Apply transform directly to DOM element\n      interactiveRef.current.style.transform = `translate(${Math.round(curXRef.current)}px, ${Math.round(curYRef.current)}px)`\n\n      // Continue animation loop\n      animationFrameRef.current = requestAnimationFrame(animateMovement)\n    }\n\n    // Start animation loop\n    animationFrameRef.current = requestAnimationFrame(animateMovement)\n\n    // Clean up animation loop on unmount\n    return () => {\n      if (animationFrameRef.current !== null) {\n        cancelAnimationFrame(animationFrameRef.current)\n      }\n    }\n  }, [interactive])\n\n  // Handle mouse movement\n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!interactiveRef.current) return\n\n    const rect = interactiveRef.current.getBoundingClientRect()\n    // Update target position directly in ref (no state update)\n    tgXRef.current = event.clientX - rect.left\n    tgYRef.current = event.clientY - rect.top\n  }\n\n  return (\n    <div\n      className={cn(\n        \"relative top-0 left-0 h-screen w-screen overflow-hidden bg-[linear-gradient(40deg,var(--gradient-background-start),var(--gradient-background-end))]\",\n        containerClassName\n      )}\n    >\n      <svg className=\"hidden\">\n        <defs>\n          <filter id=\"blurMe\">\n            <feGaussianBlur\n              in=\"SourceGraphic\"\n              stdDeviation=\"10\"\n              result=\"blur\"\n            />\n            <feColorMatrix\n              in=\"blur\"\n              mode=\"matrix\"\n              values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8\"\n              result=\"goo\"\n            />\n            <feBlend in=\"SourceGraphic\" in2=\"goo\" />\n          </filter>\n        </defs>\n      </svg>\n      <div className={cn(className)}>{children}</div>\n      <div\n        className={cn(\n          \"gradients-container h-full w-full blur-lg\",\n          isSafari ? \"blur-2xl\" : \"[filter:url(#blurMe)_blur(40px)]\"\n        )}\n      >\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_var(--first-color)_0,_var(--first-color)_50%)_no-repeat]`,\n            `top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)] h-[var(--size)] w-[var(--size)] [mix-blend-mode:var(--blending-value)]`,\n            `[transform-origin:center_center]`,\n            `animate-first`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--second-color),_0.8)_0,_rgba(var(--second-color),_0)_50%)_no-repeat]`,\n            `top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)] h-[var(--size)] w-[var(--size)] [mix-blend-mode:var(--blending-value)]`,\n            `[transform-origin:calc(50%-400px)]`,\n            `animate-second`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat]`,\n            `top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)] h-[var(--size)] w-[var(--size)] [mix-blend-mode:var(--blending-value)]`,\n            `[transform-origin:calc(50%+400px)]`,\n            `animate-third`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat]`,\n            `top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)] h-[var(--size)] w-[var(--size)] [mix-blend-mode:var(--blending-value)]`,\n            `[transform-origin:calc(50%-200px)]`,\n            `animate-fourth`,\n            `opacity-70`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.8)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat]`,\n            `top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)] h-[var(--size)] w-[var(--size)] [mix-blend-mode:var(--blending-value)]`,\n            `[transform-origin:calc(50%-800px)_calc(50%+800px)]`,\n            `animate-fifth`,\n            `opacity-100`\n          )}\n        ></div>\n\n        {interactive && (\n          <div\n            ref={interactiveRef}\n            onMouseMove={handleMouseMove}\n            className={cn(\n              `absolute [background:radial-gradient(circle_at_center,_rgba(var(--pointer-color),_0.8)_0,_rgba(var(--pointer-color),_0)_50%)_no-repeat]`,\n              `-top-1/2 -left-1/2 h-full w-full [mix-blend-mode:var(--blending-value)]`,\n              `opacity-70`\n            )}\n          ></div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "background",
      "bg",
      "texture",
      "pattern"
    ],
    "style": 1,
    "colSpan": 3
  }
}