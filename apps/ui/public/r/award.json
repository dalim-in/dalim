{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "award",
  "type": "registry:ui",
  "dependencies": [
    ""
  ],
  "files": [
    {
      "path": "registry/default/ui/award.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { Award, CreditCard, Shield, Stamp, Star, Trophy } from \"lucide-react\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\n\nexport interface AwardsComponentProps {\n  variant?: \"stamp\" | \"award\" | \"certificate\" | \"badge\" | \"sticker\" | \"id-card\"\n  title: string\n  subtitle?: string\n  description?: string\n  issuer?: string\n  date?: string\n  recipient?: string\n  level?: \"bronze\" | \"silver\" | \"gold\" | \"platinum\"\n  color?: \"blue\" | \"green\" | \"red\" | \"purple\" | \"orange\" | \"pink\"\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\"\n  className?: string\n  showIcon?: boolean\n  customIcon?: React.ReactNode\n}\n\nconst colorVariants = {\n  blue: {\n    primary: \"bg-blue-500\",\n    secondary: \"bg-blue-100\",\n    text: \"text-blue-900\",\n    border: \"border-blue-300\",\n    accent: \"text-blue-600\",\n  },\n  green: {\n    primary: \"bg-green-500\",\n    secondary: \"bg-green-100\",\n    text: \"text-green-900\",\n    border: \"border-green-300\",\n    accent: \"text-green-600\",\n  },\n  red: {\n    primary: \"bg-red-500\",\n    secondary: \"bg-red-100\",\n    text: \"text-red-900\",\n    border: \"border-red-300\",\n    accent: \"text-red-600\",\n  },\n  purple: {\n    primary: \"bg-purple-500\",\n    secondary: \"bg-purple-100\",\n    text: \"text-purple-900\",\n    border: \"border-purple-300\",\n    accent: \"text-purple-600\",\n  },\n  orange: {\n    primary: \"bg-orange-500\",\n    secondary: \"bg-orange-100\",\n    text: \"text-orange-900\",\n    border: \"border-orange-300\",\n    accent: \"text-orange-600\",\n  },\n  pink: {\n    primary: \"bg-pink-500\",\n    secondary: \"bg-pink-100\",\n    text: \"text-pink-900\",\n    border: \"border-pink-300\",\n    accent: \"text-pink-600\",\n  },\n}\n\nconst levelColors = {\n  bronze: \"from-amber-600 to-amber-800\",\n  silver: \"from-gray-400 to-gray-600\",\n  gold: \"from-yellow-400 to-yellow-600\",\n  platinum: \"from-slate-300 to-slate-500\",\n}\n\nconst sizeVariants = {\n  sm: { container: \"w-48 h-32\", text: \"text-xs\", icon: \"w-4 h-4\" },\n  md: { container: \"w-64 h-40\", text: \"text-sm\", icon: \"w-5 h-5\" },\n  lg: { container: \"w-80 h-48\", text: \"text-base\", icon: \"w-6 h-6\" },\n  xl: { container: \"w-96 h-56\", text: \"text-lg\", icon: \"w-8 h-8\" },\n}\n\nexport function AwardsComponent({\n  variant = \"badge\",\n  title,\n  subtitle,\n  description,\n  issuer,\n  date,\n  recipient,\n  level = \"gold\",\n  color = \"blue\",\n  size = \"md\",\n  className,\n  showIcon = true,\n  customIcon,\n}: AwardsComponentProps) {\n  const colors = colorVariants[color]\n  const sizes = sizeVariants[size]\n\n  const getIcon = () => {\n    if (customIcon) return customIcon\n\n    switch (variant) {\n      case \"stamp\":\n        return <Stamp className={sizes.icon} />\n      case \"award\":\n        return <Trophy className={sizes.icon} />\n      case \"certificate\":\n        return <Award className={sizes.icon} />\n      case \"badge\":\n        return <Shield className={sizes.icon} />\n      case \"sticker\":\n        return <Star className={sizes.icon} />\n      case \"id-card\":\n        return <CreditCard className={sizes.icon} />\n      default:\n        return <Award className={sizes.icon} />\n    }\n  }\n\n  // Stamp Variant\n  if (variant === \"stamp\") {\n    const createSerratedPath = () => {\n      const radius = 96 // Half of 192px (w-48)\n      const teeth = 40\n      const innerRadius = radius - 8\n      const outerRadius = radius\n\n      let path = \"\"\n      for (let i = 0; i < teeth; i++) {\n        const angle = (i / teeth) * 2 * Math.PI\n        const r = i % 2 === 0 ? outerRadius : innerRadius\n        const x = Math.cos(angle) * r + radius\n        const y = Math.sin(angle) * r + radius\n\n        if (i === 0) {\n          path += `M ${x} ${y}`\n        } else {\n          path += ` L ${x} ${y}`\n        }\n      }\n      path += \" Z\"\n      return path\n    }\n\n    // Create curved text path\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const createTextPath = (radius: number, id: string) => {\n      const centerX = 96\n      const centerY = 96\n      return `M ${centerX - radius} ${centerY} A ${radius} ${radius} 0 0 1 ${centerX + radius} ${centerY}`\n    }\n    return (\n      <div className=\"relative mx-auto flex h-48 w-48 items-center justify-center\">\n        {/* SVG for serrated border and curved text */}\n        <svg\n          className=\"absolute inset-0 h-full w-full\"\n          viewBox=\"0 0 192 192\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <defs>\n            {/* Define paths for curved text */}\n            <path\n              id=\"top-curve\"\n              d={createTextPath(55, \"top-curve\")}\n              fill=\"none\"\n            />\n            <path\n              id=\"bottom-curve\"\n              d={createTextPath(60, \"bottom-curve\")}\n              fill=\"none\"\n              transform=\"rotate(180 96 96)\"\n            />\n          </defs>\n\n          {/* Serrated border */}\n          <path\n            d={createSerratedPath()}\n            strokeWidth=\"0.2\"\n            className=\"fill-white stroke-black dark:fill-black dark:stroke-white\"\n          />\n\n          {/* Inner circle */}\n          <circle\n            cx=\"96\"\n            cy=\"96\"\n            r=\"78\"\n            className=\"fill-white stroke-black dark:fill-black dark:stroke-white\"\n            strokeWidth=\"0.2\"\n          />\n\n          {/* Curved text - top */}\n          <text className=\"fill-white text-xl font-bold\">\n            <textPath\n              href=\"#top-curve\"\n              startOffset=\"50%\"\n              textAnchor=\"middle\"\n              className=\"dark:fill-white fill-black\"\n            >\n              {title}\n            </textPath>\n          </text>\n\n          {/* Curved text - bottom */}\n          <text className=\"text-[10px] tracking-wider\">\n            <textPath\n              href=\"#bottom-curve\"\n              startOffset=\"50%\"\n              textAnchor=\"middle\"\n              className=\"dark:fill-white fill-black\"\n            >\n              {subtitle}\n            </textPath>\n          </text>\n        </svg>\n \n        <div className=\"relative z-10 text-center\">\n          {showIcon && (\n            <div className=\"mb-1 flex justify-center text-center text-2xl\">\n              {<Star fill=\"#a855f7\" className=\"text-[#a855f7]\" />}\n            </div>\n          )}\n           {recipient && <div className=\"mt-2 text-[14px]\">{recipient}</div>}\n\n          {date && <div className=\"text-[10px] italic\">{date}</div>}\n        </div>\n      </div>\n    )\n  }\n\n  // Award Variant\n  if (variant === \"award\") {\n    return (\n      <div\n        className={cn(\n          \"relative bg-gradient-to-br\",\n          levelColors[level],\n          \"rounded-lg border-4 border-yellow-300 shadow-xl\",\n          \"p-6 text-center text-white\",\n          sizes.container,\n          className\n        )}\n      >\n        <div className=\"absolute -top-3 left-1/2 -translate-x-1/2 transform\">\n          <div className=\"rounded-full border-2 border-yellow-300 bg-yellow-400 p-2\">\n            {showIcon && getIcon()}\n          </div>\n        </div>\n        <div className=\"mt-4\">\n          <h3 className={cn(\"mb-2 font-bold\", sizes.text)}>{title}</h3>\n          {subtitle && <p className=\"mb-2 text-sm opacity-90\">{subtitle}</p>}\n          {recipient && (\n            <p className=\"text-xs opacity-80\">Awarded to: {recipient}</p>\n          )}\n          {date && <p className=\"mt-1 text-xs opacity-80\">{date}</p>}\n        </div>\n        <div className=\"absolute right-2 bottom-2 left-2 h-1 rounded bg-yellow-300 opacity-50\"></div>\n      </div>\n    )\n  }\n\n  // Certificate Variant\n  if (variant === \"certificate\") {\n    return (\n      <div\n        className={cn(\n          \"border-8 border-double bg-white\",\n          colors.border,\n          \"p-8 text-center shadow-2xl\",\n          sizes.container,\n          \"relative overflow-hidden\",\n          className\n        )}\n      >\n        <div className=\"absolute inset-0 opacity-5\">\n          <div className=\"absolute inset-4 rounded border border-gray-300\"></div>\n        </div>\n        <div className=\"relative z-10\">\n          {showIcon && (\n            <div\n              className={cn(\n                \"mb-4 flex justify-center\",\n                colors.primary,\n                \"mx-auto w-fit rounded-full p-3\"\n              )}\n            >\n              <div className=\"text-white\">{getIcon()}</div>\n            </div>\n          )}\n          <h2 className={cn(\"mb-2 font-serif text-2xl\", colors.text)}>\n            Certificate\n          </h2>\n          <p className=\"mb-4 text-sm text-gray-600\">This is to certify that</p>\n          <h3 className={cn(\"mb-4 text-xl font-bold\", colors.accent)}>\n            {recipient || title}\n          </h3>\n          {description && (\n            <p className=\"mb-4 text-sm text-gray-700\">{description}</p>\n          )}\n          <div className=\"mt-6 flex items-end justify-between text-xs text-gray-600\">\n            <div>{issuer && `Issued by: ${issuer}`}</div>\n            <div>{date}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Badge Variant\n  if (variant === \"badge\") {\n    return (\n      <div\n        className={cn(\n          \"relative inline-flex flex-col items-center\",\n          sizes.container,\n          className\n        )}\n      >\n        <div\n          className={cn(\n            \"rounded-full border-4 p-4 shadow-lg\",\n            colors.primary,\n            colors.border,\n            \"flex items-center justify-center\"\n          )}\n        >\n          {showIcon && <div className=\"text-white\">{getIcon()}</div>}\n        </div>\n        <div\n          className={cn(\n            \"mt-2 rounded-full px-4 py-2 text-center\",\n            colors.secondary,\n            colors.text,\n            \"shadow-md\"\n          )}\n        >\n          <div className={cn(\"font-semibold\", sizes.text)}>{title}</div>\n          {level && (\n            <div className=\"text-xs tracking-wide uppercase opacity-75\">\n              {level}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  // Sticker Variant\n  if (variant === \"sticker\") {\n    return (\n      <div\n        className={cn(\n          \"relative inline-flex items-center justify-center\",\n          \"-rotate-6 transform rounded-full border-4 shadow-lg\",\n          colors.primary,\n          \"p-4 text-white\",\n          sizes.container,\n          className\n        )}\n      >\n        <div className=\"text-center\">\n          {showIcon && (\n            <div className=\"mb-2 flex justify-center\">{getIcon()}</div>\n          )}\n          <div className={cn(\"font-bold uppercase\", sizes.text)}>{title}</div>\n          {subtitle && (\n            <div className=\"mt-1 text-xs opacity-90\">{subtitle}</div>\n          )}\n        </div>\n        <div className=\"absolute inset-2 rounded-full border-2 border-white opacity-30\"></div>\n      </div>\n    )\n  }\n\n  // ID Card Variant\n  if (variant === \"id-card\") {\n    return (\n      <div\n        className={cn(\n          \"overflow-hidden rounded-lg border bg-white shadow-xl\",\n          colors.border,\n          sizes.container,\n          className\n        )}\n      >\n        <div className={cn(\"h-8\", colors.primary)}></div>\n        <div className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            {showIcon && (\n              <div\n                className={cn(\n                  \"flex-shrink-0 rounded-full p-2\",\n                  colors.secondary\n                )}\n              >\n                <div className={colors.accent}>{getIcon()}</div>\n              </div>\n            )}\n            <div className=\"min-w-0 flex-1\">\n              <h3\n                className={cn(\n                  \"truncate font-semibold\",\n                  colors.text,\n                  sizes.text\n                )}\n              >\n                {recipient || title}\n              </h3>\n              {subtitle && (\n                <p className=\"truncate text-sm text-gray-600\">{subtitle}</p>\n              )}\n              {description && (\n                <p className=\"mt-1 line-clamp-2 text-xs text-gray-500\">\n                  {description}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"mt-3 flex justify-between border-t border-gray-200 pt-3 text-xs text-gray-500\">\n            <span>{issuer}</span>\n            <span>{date}</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Default fallback\n  return null\n}\n",
      "type": "registry:ui"
    }
  ]
}