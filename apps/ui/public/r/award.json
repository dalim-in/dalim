{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "award",
  "type": "registry:ui",
  "dependencies": [
    ""
  ],
  "files": [
    {
      "path": "registry/default/ui/award.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { Award, Star, Shield, Trophy, CreditCard, Stamp } from \"lucide-react\"\nimport { cn } from \"@/registry/default/lib/utils\"\n\nexport interface AwardsComponentProps {\n  variant?: \"stamp\" | \"award\" | \"certificate\" | \"badge\" | \"sticker\" | \"id-card\"\n  title: string\n  subtitle?: string\n  description?: string\n  issuer?: string\n  date?: string\n  recipient?: string\n  level?: \"bronze\" | \"silver\" | \"gold\" | \"platinum\"\n  color?: \"blue\" | \"green\" | \"red\" | \"purple\" | \"orange\" | \"pink\"\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\"\n  className?: string\n  showIcon?: boolean\n  customIcon?: React.ReactNode\n}\n\nconst colorVariants = {\n  blue: {\n    primary: \"bg-blue-500\",\n    secondary: \"bg-blue-100\",\n    text: \"text-blue-900\",\n    border: \"border-blue-300\",\n    accent: \"text-blue-600\",\n  },\n  green: {\n    primary: \"bg-green-500\",\n    secondary: \"bg-green-100\",\n    text: \"text-green-900\",\n    border: \"border-green-300\",\n    accent: \"text-green-600\",\n  },\n  red: {\n    primary: \"bg-red-500\",\n    secondary: \"bg-red-100\",\n    text: \"text-red-900\",\n    border: \"border-red-300\",\n    accent: \"text-red-600\",\n  },\n  purple: {\n    primary: \"bg-purple-500\",\n    secondary: \"bg-purple-100\",\n    text: \"text-purple-900\",\n    border: \"border-purple-300\",\n    accent: \"text-purple-600\",\n  },\n  orange: {\n    primary: \"bg-orange-500\",\n    secondary: \"bg-orange-100\",\n    text: \"text-orange-900\",\n    border: \"border-orange-300\",\n    accent: \"text-orange-600\",\n  },\n  pink: {\n    primary: \"bg-pink-500\",\n    secondary: \"bg-pink-100\",\n    text: \"text-pink-900\",\n    border: \"border-pink-300\",\n    accent: \"text-pink-600\",\n  },\n}\n\nconst levelColors = {\n  bronze: \"from-amber-600 to-amber-800\",\n  silver: \"from-gray-400 to-gray-600\",\n  gold: \"from-yellow-400 to-yellow-600\",\n  platinum: \"from-slate-300 to-slate-500\",\n}\n\nconst sizeVariants = {\n  sm: { container: \"w-48 h-32\", text: \"text-xs\", icon: \"w-4 h-4\" },\n  md: { container: \"w-64 h-40\", text: \"text-sm\", icon: \"w-5 h-5\" },\n  lg: { container: \"w-80 h-48\", text: \"text-base\", icon: \"w-6 h-6\" },\n  xl: { container: \"w-96 h-56\", text: \"text-lg\", icon: \"w-8 h-8\" },\n}\n\nexport function AwardsComponent({\n  variant = \"badge\",\n  title,\n  subtitle,\n  description,\n  issuer,\n  date,\n  recipient,\n  level = \"gold\",\n  color = \"blue\",\n  size = \"md\",\n  className,\n  showIcon = true,\n  customIcon,\n}: AwardsComponentProps) {\n  const colors = colorVariants[color]\n  const sizes = sizeVariants[size]\n\n  const getIcon = () => {\n    if (customIcon) return customIcon\n\n    switch (variant) {\n      case \"stamp\":\n        return <Stamp className={sizes.icon} />\n      case \"award\":\n        return <Trophy className={sizes.icon} />\n      case \"certificate\":\n        return <Award className={sizes.icon} />\n      case \"badge\":\n        return <Shield className={sizes.icon} />\n      case \"sticker\":\n        return <Star className={sizes.icon} />\n      case \"id-card\":\n        return <CreditCard className={sizes.icon} />\n      default:\n        return <Award className={sizes.icon} />\n    }\n  }\n\n  // Stamp Variant\n  if (variant === \"stamp\") {\n    return (\n      <div\n        className={cn(\n          \"relative inline-flex items-center justify-center\",\n          \"border-4 border-dashed rounded-full\",\n          \"transform rotate-12 shadow-lg\",\n          colors.border,\n          colors.secondary,\n          sizes.container,\n          className,\n        )}\n      >\n        <div className=\"text-center\">\n          {showIcon && (\n            <div className={cn(\"flex justify-center mb-1\", colors.primary, \"rounded-full p-2 mx-auto w-fit\")}>\n              <div className=\"text-white\">{getIcon()}</div>\n            </div>\n          )}\n          <div className={cn(\"font-bold uppercase tracking-wider\", colors.text, sizes.text)}>{title}</div>\n          {date && <div className={cn(\"text-xs mt-1\", colors.accent)}>{date}</div>}\n        </div>\n      </div>\n    )\n  }\n\n  // Award Variant\n  if (variant === \"award\") {\n    return (\n      <div\n        className={cn(\n          \"relative bg-gradient-to-br\",\n          levelColors[level],\n          \"rounded-lg shadow-xl border-4 border-yellow-300\",\n          \"p-6 text-center text-white\",\n          sizes.container,\n          className,\n        )}\n      >\n        <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n          <div className=\"bg-yellow-400 rounded-full p-2 border-2 border-yellow-300\">{showIcon && getIcon()}</div>\n        </div>\n        <div className=\"mt-4\">\n          <h3 className={cn(\"font-bold mb-2\", sizes.text)}>{title}</h3>\n          {subtitle && <p className=\"text-sm opacity-90 mb-2\">{subtitle}</p>}\n          {recipient && <p className=\"text-xs opacity-80\">Awarded to: {recipient}</p>}\n          {date && <p className=\"text-xs opacity-80 mt-1\">{date}</p>}\n        </div>\n        <div className=\"absolute bottom-2 left-2 right-2 h-1 bg-yellow-300 rounded opacity-50\"></div>\n      </div>\n    )\n  }\n\n  // Certificate Variant\n  if (variant === \"certificate\") {\n    return (\n      <div\n        className={cn(\n          \"bg-white border-8 border-double\",\n          colors.border,\n          \"shadow-2xl p-8 text-center\",\n          sizes.container,\n          \"relative overflow-hidden\",\n          className,\n        )}\n      >\n        <div className=\"absolute inset-0 opacity-5\">\n          <div className=\"absolute inset-4 border border-gray-300 rounded\"></div>\n        </div>\n        <div className=\"relative z-10\">\n          {showIcon && (\n            <div className={cn(\"flex justify-center mb-4\", colors.primary, \"rounded-full p-3 mx-auto w-fit\")}>\n              <div className=\"text-white\">{getIcon()}</div>\n            </div>\n          )}\n          <h2 className={cn(\"font-serif text-2xl mb-2\", colors.text)}>Certificate</h2>\n          <p className=\"text-sm text-gray-600 mb-4\">This is to certify that</p>\n          <h3 className={cn(\"font-bold text-xl mb-4\", colors.accent)}>{recipient || title}</h3>\n          {description && <p className=\"text-sm text-gray-700 mb-4\">{description}</p>}\n          <div className=\"flex justify-between items-end mt-6 text-xs text-gray-600\">\n            <div>{issuer && `Issued by: ${issuer}`}</div>\n            <div>{date}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Badge Variant\n  if (variant === \"badge\") {\n    return (\n      <div className={cn(\"relative inline-flex flex-col items-center\", sizes.container, className)}>\n        <div\n          className={cn(\n            \"rounded-full border-4 p-4 shadow-lg\",\n            colors.primary,\n            colors.border,\n            \"flex items-center justify-center\",\n          )}\n        >\n          {showIcon && <div className=\"text-white\">{getIcon()}</div>}\n        </div>\n        <div className={cn(\"mt-2 px-4 py-2 rounded-full text-center\", colors.secondary, colors.text, \"shadow-md\")}>\n          <div className={cn(\"font-semibold\", sizes.text)}>{title}</div>\n          {level && <div className=\"text-xs opacity-75 uppercase tracking-wide\">{level}</div>}\n        </div>\n      </div>\n    )\n  }\n\n  // Sticker Variant\n  if (variant === \"sticker\") {\n    return (\n      <div\n        className={cn(\n          \"relative inline-flex items-center justify-center\",\n          \"rounded-full border-4 shadow-lg transform -rotate-6\",\n          colors.primary,\n          \"text-white p-4\",\n          sizes.container,\n          className,\n        )}\n      >\n        <div className=\"text-center\">\n          {showIcon && <div className=\"flex justify-center mb-2\">{getIcon()}</div>}\n          <div className={cn(\"font-bold uppercase\", sizes.text)}>{title}</div>\n          {subtitle && <div className=\"text-xs opacity-90 mt-1\">{subtitle}</div>}\n        </div>\n        <div className=\"absolute inset-2 rounded-full border-2 border-white opacity-30\"></div>\n      </div>\n    )\n  }\n\n  // ID Card Variant\n  if (variant === \"id-card\") {\n    return (\n      <div\n        className={cn(\n          \"bg-white rounded-lg shadow-xl border overflow-hidden\",\n          colors.border,\n          sizes.container,\n          className,\n        )}\n      >\n        <div className={cn(\"h-8\", colors.primary)}></div>\n        <div className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            {showIcon && (\n              <div className={cn(\"rounded-full p-2 flex-shrink-0\", colors.secondary)}>\n                <div className={colors.accent}>{getIcon()}</div>\n              </div>\n            )}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className={cn(\"font-semibold truncate\", colors.text, sizes.text)}>{recipient || title}</h3>\n              {subtitle && <p className=\"text-sm text-gray-600 truncate\">{subtitle}</p>}\n              {description && <p className=\"text-xs text-gray-500 mt-1 line-clamp-2\">{description}</p>}\n            </div>\n          </div>\n          <div className=\"mt-3 pt-3 border-t border-gray-200 flex justify-between text-xs text-gray-500\">\n            <span>{issuer}</span>\n            <span>{date}</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Default fallback\n  return null\n} ",
      "type": "registry:ui"
    }
  ]
}