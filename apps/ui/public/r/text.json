{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/text.tsx",
      "content": "/* eslint-disable react-hooks/rules-of-hooks */\n\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport * as Slot from \"@radix-ui/react-slot\"\nimport { motion, useInView, type MotionProps } from \"motion/react\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\n\ntype Variant = {\n  variant: string\n  component: React.FC<\n    React.ComponentProps<\"span\"> &\n      Partial<MotionProps> & { speed?: number; delay?: number }\n  >\n}\n\nconst variants = [\n  // Original variants (enhanced)\n  {\n    variant: \"shine\",\n    component: ({ children, className, speed = 5, ...props }) => (\n      <motion.span\n        {...props}\n        className={cn(\n          \"bg-[linear-gradient(110deg,#bfbfbf,35%,#000,50%,#bfbfbf,75%,#bfbfbf)] dark:bg-[linear-gradient(110deg,#404040,35%,#fff,50%,#404040,75%,#404040)]\",\n          \"bg-[length:200%_100%] bg-clip-text text-transparent\",\n          className\n        )}\n        initial={{ backgroundPosition: \"200% 0\" }}\n        animate={{ backgroundPosition: \"-200% 0\" }}\n        transition={{\n          repeat: Infinity,\n          duration: speed,\n          ease: \"linear\",\n        }}\n      >\n        {children}\n      </motion.span>\n    ),\n  },\n  {\n    variant: \"typewriter\",\n    component: ({ children, className, speed = 0.05, delay = 0, ...props }) => {\n      const [displayedText, setDisplayedText] = useState(\"\")\n      const text = typeof children === \"string\" ? children : \"\"\n\n      useEffect(() => {\n        let i = 0\n        const timer = setTimeout(() => {\n          const interval = setInterval(() => {\n            setDisplayedText(text.slice(0, i))\n            i++\n            if (i > text.length) {\n              clearInterval(interval)\n            }\n          }, speed * 1000)\n          return () => clearInterval(interval)\n        }, delay * 1000)\n\n        return () => clearTimeout(timer)\n      }, [text, speed, delay])\n\n      return (\n        <span {...props} className={cn(\"font-mono\", className)}>\n          {displayedText}\n          <motion.span\n            animate={{ opacity: [1, 0] }}\n            transition={{ duration: 0.8, repeat: Infinity }}\n            className=\"ml-1\"\n          >\n            |\n          </motion.span>\n        </span>\n      )\n    },\n  },\n  {\n    variant: \"wave\",\n    component: ({ children, className, speed = 0.5, ...props }) => {\n      if (typeof children !== \"string\") return null\n\n      return (\n        <div className=\"inline-block\">\n          {children.split(\"\").map((char, index) => (\n            <motion.span\n              {...props}\n              key={char + String(index)}\n              className={cn(\"inline-block\", className)}\n              animate={{\n                y: [0, -10, 0],\n              }}\n              transition={{\n                duration: speed,\n                repeat: Infinity,\n                delay: index * 0.1,\n                ease: \"easeInOut\",\n              }}\n            >\n              {char === \" \" ? \"\\u00A0\" : char}\n            </motion.span>\n          ))}\n        </div>\n      )\n    },\n  },\n  {\n    variant: \"rainbow\",\n    component: ({ children, className, speed = 2, ...props }) => (\n      <motion.span\n        {...props}\n        className={cn(\n          \"bg-gradient-to-r from-red-500 via-green-500 to-purple-500\",\n          \"bg-[length:200%_100%] bg-clip-text text-transparent\",\n          className\n        )}\n        animate={{\n          backgroundPosition: [\"0% 50%\", \"200% 50%\", \"0% 50%\"],\n        }}\n        transition={{\n          duration: speed,\n          repeat: Infinity,\n          ease: \"linear\",\n        }}\n      >\n        {children}\n      </motion.span>\n    ),\n  },\n  {\n    variant: \"neon\",\n    component: ({ children, className, ...props }) => (\n      <motion.span\n        {...props}\n        className={cn(\"text-[#fff200]\", className)}\n        animate={{\n          textShadow: [\n            \"0 0 10px rgba(255, 242, 0, 0.5)\", // soft glow\n            \"0 0 20px rgba(255, 242, 0, 0.9)\", // stronger glow\n            \"0 0 10px rgba(255, 242, 0, 0.5)\", // back to soft\n          ],\n        }}\n        transition={{\n          duration: 2,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        }}\n      >\n        {children}\n      </motion.span>\n    ),\n  },\n  {\n    variant: \"scramble\",\n    component: ({ children, className, speed = 0.05, ...props }) => {\n      const [displayText, setDisplayText] = useState(\"\")\n      const text = typeof children === \"string\" ? children : \"\"\n      const chars =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*\"\n\n      useEffect(() => {\n        let iteration = 0\n        const interval = setInterval(() => {\n          setDisplayText(\n            text\n              .split(\"\")\n              .map((char, index) => {\n                if (index < iteration) {\n                  return char\n                }\n                return chars[Math.floor(Math.random() * chars.length)]\n              })\n              .join(\"\")\n          )\n\n          if (iteration >= text.length) {\n            clearInterval(interval)\n          }\n\n          iteration += 1 / 3\n        }, speed * 1000)\n\n        return () => clearInterval(interval)\n      }, [text, speed])\n\n      return (\n        <span {...props} className={cn(\"font-mono\", className)}>\n          {displayText}\n        </span>\n      )\n    },\n  },\n  {\n    variant: \"fade\",\n    component: ({ children, className, delay = 0, ...props }) => {\n      const ref = useRef(null)\n      const isInView = useInView(ref, { once: true })\n\n      if (typeof children !== \"string\") return null\n\n      return (\n        <div ref={ref} className=\"inline-block\">\n          {children.split(\"\").map((char, index) => (\n            <motion.span\n              {...props}\n              key={char + String(index)}\n              className={cn(\"inline-block\", className)}\n              initial={{ opacity: 0, y: 20 }}\n              animate={isInView ? { opacity: 1, y: 0 } : {}}\n              transition={{\n                duration: 0.5,\n                delay: delay + index * 0.05,\n                ease: \"easeOut\",\n              }}\n            >\n              {char === \" \" ? \"\\u00A0\" : char}\n            </motion.span>\n          ))}\n        </div>\n      )\n    },\n  },\n  {\n    variant: \"rotate\",\n    component: ({ children, className, speed = 2, ...props }) => {\n      const words = typeof children === \"string\" ? children.split(\" \") : []\n      const [currentIndex, setCurrentIndex] = useState(0)\n\n      useEffect(() => {\n        const interval = setInterval(() => {\n          setCurrentIndex((prev) => (prev + 1) % words.length)\n        }, speed * 1000)\n\n        return () => clearInterval(interval)\n      }, [words.length, speed])\n\n      return (\n        <div className=\"relative inline-block h-8 overflow-hidden\">\n          {words.map((word, index) => (\n            <motion.span\n              {...props}\n              key={word + String(index)}\n              className={cn(\"absolute top-0 left-0\", className)}\n              initial={{ y: 20, opacity: 0 }}\n              animate={{\n                y: currentIndex === index ? 0 : -20,\n                opacity: currentIndex === index ? 1 : 0,\n              }}\n              transition={{\n                duration: 0.5,\n                ease: \"easeInOut\",\n              }}\n            >\n              {word}\n            </motion.span>\n          ))}\n        </div>\n      )\n    },\n  },\n  {\n    variant: \"elastic\",\n    component: ({ children, className, ...props }) => (\n      <motion.span\n        {...props}\n        className={cn(\"inline-block cursor-pointer\", className)}\n        whileHover={{\n          scale: 1.1,\n          rotate: [0, -5, 5, 0],\n          transition: {\n            rotate: {\n              type: \"tween\",\n              duration: 0.4,\n              ease: \"easeInOut\",\n            },\n            scale: {\n              type: \"spring\",\n              stiffness: 400,\n              damping: 10,\n            },\n          },\n        }}\n        whileTap={{\n          scale: 0.95,\n        }}\n      >\n        {children}\n      </motion.span>\n    ),\n  },\n  {\n    variant: \"matrix\",\n    component: ({ children, className, speed = 0.1, ...props }) => {\n      const [matrixChars, setMatrixChars] = useState(\"\")\n      const text = typeof children === \"string\" ? children : \"\"\n      const chars = \"ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝ0123456789\"\n\n      useEffect(() => {\n        let iteration = 0\n        const interval = setInterval(() => {\n          setMatrixChars(\n            text\n              .split(\"\")\n              .map((char, index) => {\n                if (index < iteration) {\n                  return char\n                }\n                return chars[Math.floor(Math.random() * chars.length)]\n              })\n              .join(\"\")\n          )\n\n          if (iteration >= text.length) {\n            clearInterval(interval)\n          }\n\n          iteration += 0.5\n        }, speed * 1000)\n\n        return () => clearInterval(interval)\n      }, [text, speed])\n\n      return (\n        <span\n          {...props}\n          className={cn(\n            \"font-mono drop-shadow-[0_0_10px_rgba(34,197,94,0.7)]\",\n            className\n          )}\n        >\n          {matrixChars}\n        </span>\n      )\n    },\n  },\n  {\n    variant: \"pulse\",\n    component: ({ children, className, speed = 1, ...props }) => (\n      <motion.span\n        {...props}\n        className={cn(\"inline-block\", className)}\n        animate={{\n          scale: [1, 1.05, 1],\n          opacity: [1, 0.8, 1],\n        }}\n        transition={{\n          duration: speed,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        }}\n      >\n        {children}\n      </motion.span>\n    ),\n  },\n  {\n    variant: \"slide\",\n    component: ({ children, className, delay = 0, ...props }) => {\n      const ref = useRef(null)\n      const isInView = useInView(ref, { once: true })\n\n      return (\n        <div ref={ref} className=\"relative inline-block overflow-hidden\">\n          <motion.div\n            className=\"bg-primary-foreground absolute inset-0 z-10\"\n            initial={{ x: 0 }}\n            animate={isInView ? { x: \"100%\" } : {}}\n            transition={{\n              duration: 0.8,\n              delay: delay,\n              ease: \"easeInOut\",\n            }}\n          />\n          <motion.span\n            {...props}\n            className={cn(\"inline-block\", className)}\n            initial={{ opacity: 0 }}\n            animate={isInView ? { opacity: 1 } : {}}\n            transition={{\n              duration: 0.1,\n              delay: delay + 0.4,\n            }}\n          >\n            {children}\n          </motion.span>\n        </div>\n      )\n    },\n  },\n  {\n    variant: \"morphing\",\n    component: ({ children, className, speed = 2, ...props }) => {\n      const words =\n        typeof children === \"string\" ? children.split(\"|\") : [children]\n      const [currentIndex, setCurrentIndex] = useState(0)\n\n      useEffect(() => {\n        if (words.length > 1) {\n          const interval = setInterval(() => {\n            setCurrentIndex((prev) => (prev + 1) % words.length)\n          }, speed * 1000)\n\n          return () => clearInterval(interval)\n        }\n      }, [words.length, speed])\n\n      return (\n        <motion.span\n          {...props}\n          className={cn(\"inline-block\", className)}\n          key={currentIndex}\n          initial={{ rotateX: 90, opacity: 0 }}\n          animate={{ rotateX: 0, opacity: 1 }}\n          exit={{ rotateX: -90, opacity: 0 }}\n          transition={{\n            duration: 0.5,\n            ease: \"easeInOut\",\n          }}\n        >\n          {words[currentIndex]}\n        </motion.span>\n      )\n    },\n  },\n  // Enhanced original variants\n  {\n    variant: \"generate\",\n    component: ({\n      children,\n      className,\n      delay = 0,\n      speed = 0.015,\n      ...props\n    }) => {\n      if (typeof children !== \"string\") return null\n      return (\n        <div className=\"inline-block whitespace-pre\">\n          {children.split(\"\").map((char, index) => (\n            <motion.span\n              {...props}\n              key={char + String(index)}\n              className={cn(\"inline-block whitespace-pre\", className)}\n              initial={{ opacity: 0, filter: \"blur(4px)\", rotateX: 90, y: 5 }}\n              whileInView={{\n                opacity: 1,\n                filter: \"blur(0px)\",\n                rotateX: 0,\n                y: 0,\n              }}\n              transition={{\n                ease: \"easeOut\",\n                duration: 0.3,\n                delay: delay + index * speed,\n              }}\n              viewport={{ once: true }}\n            >\n              {char}\n            </motion.span>\n          ))}\n        </div>\n      )\n    },\n  },\n  {\n    variant: \"glitch\",\n    component: ({ children, className, ...props }) => (\n      <div className=\"group relative overflow-hidden font-medium\">\n        <span {...props} className={cn(\"invisible\", className)}>\n          {children}\n        </span>\n        <motion.span\n          {...props}\n          className={cn(\n            \"absolute top-0 left-0 transition-transform duration-500 ease-in-out\",\n            \"group-hover:-translate-y-full hover:duration-300\",\n            className\n          )}\n          whileHover={{\n            textShadow: [\n              \"2px 0 #ff0000, -2px 0 #00ffff\",\n              \"-2px 0 #ff0000, 2px 0 #00ffff\",\n              \"2px 0 #ff0000, -2px 0 #00ffff\",\n            ],\n          }}\n          transition={{ duration: 0.2, repeat: 3 }}\n        >\n          {children}\n        </motion.span>\n        <span\n          {...props}\n          className={cn(\n            \"absolute top-0 left-0 translate-y-full transition-transform duration-500\",\n            \"ease-in-out group-hover:translate-y-0 hover:duration-300\",\n            className\n          )}\n        >\n          {children}\n        </span>\n      </div>\n    ),\n  },\n  {\n    variant: \"enter\",\n    component: ({ children, className, speed = 0.25, ...props }) => {\n      if (typeof children !== \"string\") return null\n      const STAGGER = 0.025\n      const letters = children\n        .split(\"\")\n        .map((letter) => (letter === \" \" ? \"\\u00A0\" : letter))\n\n      return (\n        <motion.span\n          {...props}\n          className={cn(\n            \"relative block overflow-hidden whitespace-nowrap select-none\",\n            className\n          )}\n          initial=\"initial\"\n          whileHover=\"hovered\"\n          style={{ lineHeight: 0.9 }}\n        >\n          <div>\n            {letters.map((letter, i) => (\n              <motion.span\n                key={String(i)}\n                className=\"inline-block\"\n                variants={{\n                  initial: { y: 0 },\n                  hovered: { y: \"-100%\" },\n                }}\n                transition={{\n                  duration: speed,\n                  ease: \"easeInOut\",\n                  delay: STAGGER * i,\n                }}\n              >\n                {letter}\n              </motion.span>\n            ))}\n          </div>\n          <div className=\"absolute inset-0\">\n            {letters.map((letter, i) => (\n              <motion.span\n                key={String(i)}\n                className=\"inline-block\"\n                variants={{\n                  initial: { y: \"100%\" },\n                  hovered: { y: 0 },\n                }}\n                transition={{\n                  duration: speed,\n                  ease: \"easeInOut\",\n                  delay: STAGGER * i,\n                }}\n              >\n                {letter}\n              </motion.span>\n            ))}\n          </div>\n        </motion.span>\n      )\n    },\n  },\n  {\n    variant: \"shake\",\n    component: ({ children, className, ...props }) => (\n      <motion.span\n        {...props}\n        className={cn(\"inline-block cursor-pointer\", className)}\n        whileHover={{\n          x: [0, -2, 2, -2, 2, 0],\n          transition: { duration: 0.4 },\n        }}\n      >\n        {children}\n      </motion.span>\n    ),\n  },\n  {\n    variant: \"decoration\",\n    component: ({ children, className, ...props }) => (\n      <div\n        className={cn(\n          \"relative after:absolute after:bottom-0 after:left-0 after:h-px after:w-full after:origin-bottom-right\",\n          \"after:scale-x-0 after:bg-current after:transition-transform after:duration-300 after:ease-in-out hover:after:origin-bottom-left hover:after:scale-x-100\"\n        )}\n      >\n        <span {...props} className={cn(\"relative z-10\", className)}>\n          {children}\n        </span>\n      </div>\n    ),\n  },\n] as const satisfies readonly Variant[]\n\nexport type AdvancedTextProps = {\n  variant?: (typeof variants)[number][\"variant\"]\n  speed?: number\n  delay?: number\n} & React.ComponentProps<\"span\"> &\n  Partial<MotionProps>\n\nexport function Text({\n  variant = \"shine\",\n  className,\n  speed,\n  delay,\n  ...props\n}: AdvancedTextProps) {\n  const FALLBACK_INDEX = 0\n  const variantComponent = variants.find(\n    (v) => v.variant === variant\n  )?.component\n  const Component = variantComponent || variants[FALLBACK_INDEX].component\n\n  return (\n    <Slot.Root className={cn(\"text-sm font-medium\")}>\n      <Component {...props} className={className} speed={speed} delay={delay} />\n    </Slot.Root>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}