{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nconst liquidbuttonVariants = cva(\n  \"inline-flex items-center transition-colors justify-center cursor-pointer gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-transparent hover:scale-105 duration-300 transition text-primary\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 text-xs gap-1.5 px-4 has-[>svg]:px-4\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        xl: \"h-12 rounded-md px-8 has-[>svg]:px-6\",\n        xxl: \"h-14 rounded-md px-10 has-[>svg]:px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"xxl\",\n    },\n  }\n)\n\nfunction LiquidButton({\n  className,\n  variant,\n  size,\n  asChild = false,\n  children,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof liquidbuttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <>\n      <Comp\n        data-slot=\"button\"\n        className={cn(\n          \"relative\",\n          liquidbuttonVariants({ variant, size, className })\n        )}\n        {...props}\n      >\n        <div className=\"absolute top-0 left-0 z-0 h-full w-full rounded-full shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)] transition-all dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]\" />\n        <div\n          className=\"absolute top-0 left-0 isolate -z-10 h-full w-full overflow-hidden rounded-md\"\n          style={{ backdropFilter: 'url(\"#container-glass\")' }}\n        />\n\n        <div className=\"pointer-events-none z-10\">{children}</div>\n        <GlassFilter />\n      </Comp>\n    </>\n  )\n}\n\nfunction GlassFilter() {\n  return (\n    <svg className=\"hidden\">\n      <defs>\n        <filter\n          id=\"container-glass\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          {/* Generate turbulent noise for distortion */}\n          <feTurbulence\n            type=\"fractalNoise\"\n            baseFrequency=\"0.05 0.05\"\n            numOctaves=\"1\"\n            seed=\"1\"\n            result=\"turbulence\"\n          />\n\n          {/* Blur the turbulence pattern slightly */}\n          <feGaussianBlur\n            in=\"turbulence\"\n            stdDeviation=\"2\"\n            result=\"blurredNoise\"\n          />\n\n          {/* Displace the source graphic with the noise */}\n          <feDisplacementMap\n            in=\"SourceGraphic\"\n            in2=\"blurredNoise\"\n            scale=\"70\"\n            xChannelSelector=\"R\"\n            yChannelSelector=\"B\"\n            result=\"displaced\"\n          />\n\n          {/* Apply overall blur on the final result */}\n          <feGaussianBlur in=\"displaced\" stdDeviation=\"4\" result=\"finalBlur\" />\n\n          {/* Output the result */}\n          <feComposite in=\"finalBlur\" in2=\"finalBlur\" operator=\"over\" />\n        </filter>\n      </defs>\n    </svg>\n  )\n}\n\ntype ColorVariant =\n  | \"default\"\n  | \"primary\"\n  | \"success\"\n  | \"error\"\n  | \"gold\"\n  | \"bronze\"\n\ninterface MetalButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: ColorVariant\n}\n\nconst colorVariants: Record<\n  ColorVariant,\n  {\n    outer: string\n    inner: string\n    button: string\n    textColor: string\n    textShadow: string\n  }\n> = {\n  default: {\n    outer: \"bg-gradient-to-b from-[#000] to-[#A0A0A0]\",\n    inner: \"bg-gradient-to-b from-[#FAFAFA] via-[#3E3E3E] to-[#E5E5E5]\",\n    button: \"bg-gradient-to-b from-[#B9B9B9] to-[#969696]\",\n    textColor: \"text-white\",\n    textShadow: \"[text-shadow:_0_-1px_0_rgb(80_80_80_/_100%)]\",\n  },\n  primary: {\n    outer: \"bg-gradient-to-b from-[#000] to-[#A0A0A0]\",\n    inner: \"bg-gradient-to-b from-primary via-secondary to-muted\",\n    button: \"bg-gradient-to-b from-primary to-primary/40\",\n    textColor: \"text-white\",\n    textShadow: \"[text-shadow:_0_-1px_0_rgb(30_58_138_/_100%)]\",\n  },\n  success: {\n    outer: \"bg-gradient-to-b from-[#005A43] to-[#7CCB9B]\",\n    inner: \"bg-gradient-to-b from-[#E5F8F0] via-[#00352F] to-[#D1F0E6]\",\n    button: \"bg-gradient-to-b from-[#9ADBC8] to-[#3E8F7C]\",\n    textColor: \"text-[#FFF7F0]\",\n    textShadow: \"[text-shadow:_0_-1px_0_rgb(6_78_59_/_100%)]\",\n  },\n  error: {\n    outer: \"bg-gradient-to-b from-[#5A0000] to-[#FFAEB0]\",\n    inner: \"bg-gradient-to-b from-[#FFDEDE] via-[#680002] to-[#FFE9E9]\",\n    button: \"bg-gradient-to-b from-[#F08D8F] to-[#A45253]\",\n    textColor: \"text-[#FFF7F0]\",\n    textShadow: \"[text-shadow:_0_-1px_0_rgb(146_64_14_/_100%)]\",\n  },\n  gold: {\n    outer: \"bg-gradient-to-b from-[#917100] to-[#EAD98F]\",\n    inner: \"bg-gradient-to-b from-[#FFFDDD] via-[#856807] to-[#FFF1B3]\",\n    button: \"bg-gradient-to-b from-[#FFEBA1] to-[#9B873F]\",\n    textColor: \"text-[#FFFDE5]\",\n    textShadow: \"[text-shadow:_0_-1px_0_rgb(178_140_2_/_100%)]\",\n  },\n  bronze: {\n    outer: \"bg-gradient-to-b from-[#864813] to-[#E9B486]\",\n    inner: \"bg-gradient-to-b from-[#EDC5A1] via-[#5F2D01] to-[#FFDEC1]\",\n    button: \"bg-gradient-to-b from-[#FFE3C9] to-[#A36F3D]\",\n    textColor: \"text-[#FFF7F0]\",\n    textShadow: \"[text-shadow:_0_-1px_0_rgb(124_45_18_/_100%)]\",\n  },\n}\n\nconst metalButtonVariants = (\n  variant: ColorVariant = \"default\",\n  isPressed: boolean,\n  isHovered: boolean,\n  isTouchDevice: boolean\n) => {\n  const colors = colorVariants[variant]\n  const transitionStyle = \"all 250ms cubic-bezier(0.1, 0.4, 0.2, 1)\"\n\n  return {\n    wrapper: cn(\n      \"relative inline-flex transform-gpu rounded-md p-[1.25px] will-change-transform\",\n      colors.outer\n    ),\n    wrapperStyle: {\n      transform: isPressed\n        ? \"translateY(2.5px) scale(0.99)\"\n        : \"translateY(0) scale(1)\",\n      boxShadow: isPressed\n        ? \"0 1px 2px rgba(0, 0, 0, 0.15)\"\n        : isHovered && !isTouchDevice\n          ? \"0 4px 12px rgba(0, 0, 0, 0.12)\"\n          : \"0 3px 8px rgba(0, 0, 0, 0.08)\",\n      transition: transitionStyle,\n      transformOrigin: \"center center\",\n    },\n    inner: cn(\n      \"absolute inset-[1px] transform-gpu rounded-lg will-change-transform\",\n      colors.inner\n    ),\n    innerStyle: {\n      transition: transitionStyle,\n      transformOrigin: \"center center\",\n      filter:\n        isHovered && !isPressed && !isTouchDevice ? \"brightness(1.05)\" : \"none\",\n    },\n    button: cn(\n      \"relative z-10 m-[1px] rounded-md inline-flex h-11 transform-gpu cursor-pointer items-center justify-center overflow-hidden rounded-md px-6 py-2 text-sm leading-none font-semibold will-change-transform outline-none\",\n      colors.button,\n      colors.textColor,\n      colors.textShadow\n    ),\n    buttonStyle: {\n      transform: isPressed ? \"scale(0.97)\" : \"scale(1)\",\n      transition: transitionStyle,\n      transformOrigin: \"center center\",\n      filter:\n        isHovered && !isPressed && !isTouchDevice ? \"brightness(1.02)\" : \"none\",\n    },\n  }\n}\n\nconst ShineEffect = ({ isPressed }: { isPressed: boolean }) => {\n  return (\n    <div\n      className={cn(\n        \"pointer-events-none absolute inset-0 z-20 overflow-hidden transition-opacity duration-300\",\n        isPressed ? \"opacity-20\" : \"opacity-0\"\n      )}\n    >\n      <div className=\"absolute inset-0 rounded-md bg-gradient-to-r from-transparent via-neutral-100 to-transparent\" />\n    </div>\n  )\n}\n\n// eslint-disable-next-line react/display-name\nconst MetalButton = React.forwardRef<HTMLButtonElement, MetalButtonProps>(\n  ({ children, className, variant = \"default\", ...props }, ref) => {\n    const [isPressed, setIsPressed] = React.useState(false)\n    const [isHovered, setIsHovered] = React.useState(false)\n    const [isTouchDevice, setIsTouchDevice] = React.useState(false)\n\n    React.useEffect(() => {\n      setIsTouchDevice(\"ontouchstart\" in window || navigator.maxTouchPoints > 0)\n    }, [])\n\n    const buttonText = children || \"Button\"\n    const variants = metalButtonVariants(\n      variant,\n      isPressed,\n      isHovered,\n      isTouchDevice\n    )\n\n    const handleInternalMouseDown = () => {\n      setIsPressed(true)\n    }\n    const handleInternalMouseUp = () => {\n      setIsPressed(false)\n    }\n    const handleInternalMouseLeave = () => {\n      setIsPressed(false)\n      setIsHovered(false)\n    }\n    const handleInternalMouseEnter = () => {\n      if (!isTouchDevice) {\n        setIsHovered(true)\n      }\n    }\n    const handleInternalTouchStart = () => {\n      setIsPressed(true)\n    }\n    const handleInternalTouchEnd = () => {\n      setIsPressed(false)\n    }\n    const handleInternalTouchCancel = () => {\n      setIsPressed(false)\n    }\n\n    return (\n      <div className={variants.wrapper} style={variants.wrapperStyle}>\n        <div className={variants.inner} style={variants.innerStyle}></div>\n        <button\n          ref={ref}\n          className={cn(variants.button, className)}\n          style={variants.buttonStyle}\n          {...props}\n          onMouseDown={handleInternalMouseDown}\n          onMouseUp={handleInternalMouseUp}\n          onMouseLeave={handleInternalMouseLeave}\n          onMouseEnter={handleInternalMouseEnter}\n          onTouchStart={handleInternalTouchStart}\n          onTouchEnd={handleInternalTouchEnd}\n          onTouchCancel={handleInternalTouchCancel}\n        >\n          <ShineEffect isPressed={isPressed} />\n          {buttonText}\n          {isHovered && !isPressed && !isTouchDevice && (\n            <div className=\"pointer-events-none absolute inset-0 rounded-lg bg-gradient-to-t from-transparent to-white/5\" />\n          )}\n        </button>\n      </div>\n    )\n  }\n)\n\nexport {\n  Button,\n  buttonVariants,\n  liquidbuttonVariants,\n  MetalButton,\n  LiquidButton,\n}\n",
      "type": "registry:ui"
    }
  ]
}