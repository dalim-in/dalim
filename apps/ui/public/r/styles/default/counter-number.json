{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "counter-number",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/texts/counter-number.tsx",
      "content": "\"use client\"\n\nimport {\n  useEffect,\n  useRef,\n  useState,\n  type ComponentPropsWithoutRef,\n} from \"react\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\n\ntype SizeVariant = \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\"\ntype ColorVariant =\n  | \"default\"\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"error\"\n\ninterface CounterNumberProps extends ComponentPropsWithoutRef<\"span\"> {\n  value: number\n  startValue?: number\n  duration?: number // new: animation duration in ms\n\n  decimalPlaces?: number\n  prefix?: string\n  suffix?: string\n  separator?: string\n  currency?: string\n  locale?: string\n\n  size?: SizeVariant\n  color?: ColorVariant\n  preserveAspectRatio?: boolean\n}\n\nconst sizeClasses: Record<SizeVariant, string> = {\n  sm: \"text-md\",\n  md: \"text-xl\",\n  lg: \"text-3xl\",\n  xl: \"text-5xl\",\n  \"2xl\": \"text-7xl\",\n}\n\nconst colorClasses: Record<ColorVariant, string> = {\n  default: \"text-foreground\",\n  primary: \"text-blue-600 dark:text-blue-400\",\n  secondary: \"text-gray-600 dark:text-gray-400\",\n  success: \"text-green-600 dark:text-green-400\",\n  warning: \"text-yellow-600 dark:text-yellow-400\",\n  error: \"text-red-600 dark:text-red-400\",\n}\n\nexport function CounterNumber({\n  value,\n  startValue = 0,\n  duration = 1000,\n  decimalPlaces = 0,\n  prefix = \"\",\n  suffix = \"\",\n  separator = \",\",\n  currency,\n  locale = \"en-US\",\n  size = \"md\",\n  color = \"default\",\n  preserveAspectRatio = false,\n  className,\n  ...props\n}: CounterNumberProps) {\n  const ref = useRef<HTMLSpanElement>(null)\n  const [displayValue, setDisplayValue] = useState(startValue)\n\n  useEffect(() => {\n    let startTime: number | null = null\n    const start = displayValue\n    const end = value\n    const diff = end - start\n\n    const step = (timestamp: number) => {\n      if (!startTime) startTime = timestamp\n      const progress = Math.min((timestamp - startTime) / duration, 1)\n      setDisplayValue(start + diff * progress)\n      if (progress < 1) {\n        requestAnimationFrame(step)\n      }\n    }\n\n    requestAnimationFrame(step)\n  }, [value, duration]) // animate whenever value or duration changes\n\n  const formatNumber = (numValue: number): string => {\n    let formattedValue: string\n\n    if (currency) {\n      formattedValue = new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency,\n        minimumFractionDigits: decimalPlaces,\n        maximumFractionDigits: decimalPlaces,\n      }).format(numValue)\n    } else {\n      formattedValue = new Intl.NumberFormat(locale, {\n        minimumFractionDigits: decimalPlaces,\n        maximumFractionDigits: decimalPlaces,\n      }).format(numValue)\n\n      if (separator !== \",\") {\n        formattedValue = formattedValue.replace(/,/g, separator)\n      }\n    }\n\n    return `${prefix}${formattedValue}${suffix}`\n  }\n\n  const combinedClassName = cn(\n    \"inline-block tabular-nums tracking-wider transition-all\",\n    sizeClasses[size],\n    colorClasses[color],\n    preserveAspectRatio && \"font-mono\",\n    className\n  )\n\n  return (\n    <span ref={ref} className={combinedClassName} {...props}>\n      {formatNumber(displayValue)}\n    </span>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}