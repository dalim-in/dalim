{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "snow-flakes",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/snow-flakes.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\n\ninterface SnowflakeProps {\n  id: number\n  size: number\n  left: number\n  animationDuration: number\n  opacity: number\n  color: string\n}\n\ninterface SnowFlakesProps {\n  /** Number of snowflakes */\n  count?: number\n  /** Snow color */\n  color?: string\n  /** Animation speed multiplier (lower = slower) */\n  speed?: number\n  /** Minimum snowflake size in pixels */\n  minSize?: number\n  /** Maximum snowflake size in pixels */\n  maxSize?: number\n  /** Minimum opacity */\n  minOpacity?: number\n  /** Maximum opacity */\n  maxOpacity?: number\n  /** Z-index for the snow layer */\n  zIndex?: number\n  /** Whether to enable wind effect */\n  wind?: boolean\n}\n\nconst Snowflake = ({\n  id,\n  size,\n  left,\n  animationDuration,\n  opacity,\n  color,\n}: SnowflakeProps) => {\n  return (\n    <div\n      className=\"pointer-events-none absolute select-none\"\n      style={{\n        left: `${left}%`,\n        fontSize: `${size}px`,\n        opacity,\n        color,\n        animation: `snowfall-${id} ${animationDuration}s linear infinite`,\n        animationDelay: `${-Math.random() * animationDuration}s`, // üëà random negative delay\n        textShadow: \"0 0 1px rgba(255,255,255,0.8)\",\n      }}\n    >\n      ‚ùÑ\n    </div>\n  )\n}\n\nexport function SnowFlakes({\n  count = 50,\n  color = \"#ffffff\",\n  speed = 1,\n  minSize = 10,\n  maxSize = 20,\n  minOpacity = 0.3,\n  maxOpacity = 0.8,\n  zIndex = -1,\n  wind = true,\n}: SnowFlakesProps) {\n  const [snowflakes, setSnowflakes] = useState<SnowflakeProps[]>([])\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    setMounted(true)\n\n    const generateSnowflakes = () => {\n      const flakes: SnowflakeProps[] = []\n\n      for (let i = 0; i < count; i++) {\n        const size = Math.random() * (maxSize - minSize) + minSize\n        const left = Math.random() * 100\n        const animationDuration = (Math.random() * 3 + 2) / speed\n        const opacity = Math.random() * (maxOpacity - minOpacity) + minOpacity\n\n        flakes.push({\n          id: i,\n          size,\n          left,\n          animationDuration,\n          opacity,\n          color,\n        })\n      }\n\n      setSnowflakes(flakes)\n    }\n\n    generateSnowflakes()\n  }, [count, color, speed, minSize, maxSize, minOpacity, maxOpacity])\n\n  useEffect(() => {\n    if (!mounted) return\n\n    // Generate CSS animations for each snowflake\n    const styleSheet = document.createElement(\"style\")\n    styleSheet.type = \"text/css\"\n\n    let cssRules = \"\"\n\n    snowflakes.forEach((flake) => {\n      const windOffset = wind ? Math.random() * 100 - 50 : 0\n\n      cssRules += `\n        @keyframes snowfall-${flake.id} {\n          0% {\n            transform: translateY(-100vh) translateX(0px) rotate(0deg);\n          }\n          100% {\n            transform: translateY(100vh) translateX(${windOffset}px) rotate(360deg);\n          }\n        }\n      `\n    })\n\n    styleSheet.innerHTML = cssRules\n    document.head.appendChild(styleSheet)\n\n    return () => {\n      document.head.removeChild(styleSheet)\n    }\n  }, [snowflakes, wind, mounted])\n\n  if (!mounted) return null\n\n  return (\n    <div className=\"pointer-events-none overflow-hidden\" style={{ zIndex }}>\n      {snowflakes.map((flake) => (\n        <Snowflake key={flake.id} {...flake} />\n      ))}\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}