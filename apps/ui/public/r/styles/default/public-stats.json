{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "public-stats",
  "type": "registry:example",
  "registryDependencies": [
    "ai"
  ],
  "files": [
    {
      "path": "registry/default/examples/ai/public-stats.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { PublicStatsResult } from \"@/registry/default/ui/ai/tools/stats-tools\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\"\nimport {\n  ChartContainer,\n  ChartLegend,\n  ChartLegendContent,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/registry/default/ui/chart\"\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis } from \"recharts\"\nimport type { TooltipContentProps } from \"recharts/types/component/Tooltip\"\nimport type {\n  NameType,\n  ValueType,\n} from \"recharts/types/component/DefaultTooltipContent\"\nimport type { Props as DefaultLegendContentProps } from \"recharts/types/component/DefaultLegendContent\"\n\nexport function StatsChart({ data }: { data?: PublicStatsResult }) {\n  const config: ChartConfig = {\n    // Use design system chart color for higher contrast in both themes\n    count: { label: \"Quakes\", color: \"var(--border)\" },\n  }\n\n  const [live, setLive] = React.useState<PublicStatsResult | null>(null)\n  React.useEffect(() => {\n    if (data) return\n    const controller = new AbortController()\n    const fetchLive = async () => {\n      try {\n        const end = new Date()\n        const start = new Date(end.getTime() - 30 * 24 * 60 * 60 * 1000)\n        const fmt = (d: Date) => d.toISOString().slice(0, 10)\n        const params = new URLSearchParams({\n          format: \"geojson\",\n          starttime: fmt(start),\n          endtime: fmt(end),\n          minmagnitude: String(5),\n        })\n        const res = await fetch(\n          `https://earthquake.usgs.gov/fdsnws/event/1/query?${params.toString()}`,\n          { signal: controller.signal }\n        )\n        if (!res.ok) throw new Error(\"USGS fetch failed\")\n        const json = (await res.json()) as {\n          features?: Array<{ properties?: { time?: number } }>\n        }\n        const counts = new Map<string, number>()\n        for (const f of json.features ?? []) {\n          const t = f?.properties?.time\n          if (!Number.isFinite(t)) continue\n          const day = new Date(Number(t)).toISOString().slice(0, 10)\n          counts.set(day, (counts.get(day) || 0) + 1)\n        }\n        const series: PublicStatsResult[\"series\"] = []\n        for (let i = 30; i >= 0; i--) {\n          const d = new Date(end.getTime() - i * 24 * 60 * 60 * 1000)\n          const day = d.toISOString().slice(0, 10)\n          series.push({ date: day, count: counts.get(day) || 0 })\n        }\n        setLive({ title: \"Global M5+ earthquakes\", series })\n      } catch {\n        // swallow for demo; component will render nothing\n      }\n    }\n    fetchLive()\n    return () => controller.abort()\n  }, [data])\n\n  const source = data ?? live\n  const chartData =\n    source?.series.map((d) => ({ date: d.date, count: d.count })) ?? []\n\n  return (\n    <Card className=\"w-full max-w-3xl\">\n      <CardHeader>\n        <CardTitle>{source?.title ?? \"Public Stats\"}</CardTitle>\n        <CardDescription>Source: USGS Earthquake Catalog</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={config} className=\"aspect-auto h-[300px]\">\n          <AreaChart\n            data={chartData}\n            margin={{ left: 8, right: 8, top: 8, bottom: 8 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} tickMargin={8} />\n            <YAxis\n              tickFormatter={(v) =>\n                Intl.NumberFormat(undefined, { notation: \"compact\" }).format(\n                  Number(v)\n                )\n              }\n              tick={{ fontSize: 12 }}\n              tickMargin={8}\n            />\n            <ChartTooltip\n              content={(props: TooltipContentProps<ValueType, NameType>) => (\n                <ChartTooltipContent {...props} />\n              )}\n            />\n            <ChartLegend\n              verticalAlign=\"top\"\n              content={(props: DefaultLegendContentProps) => (\n                <ChartLegendContent\n                  verticalAlign=\"top\"\n                  payload={props.payload}\n                />\n              )}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"count\"\n              stroke=\"var(--color-count)\"\n              fill=\"var(--color-count)\"\n              fillOpacity={0.2}\n              name=\"Quakes\"\n              dot={{\n                r: 2,\n                stroke: \"var(--color-count)\",\n                fill: \"var(--color-count)\",\n              }}\n              activeDot={{ r: 3 }}\n            />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default StatsChart\n",
      "type": "registry:example"
    }
  ]
}