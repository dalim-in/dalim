{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "interactive-dots",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/interactive-dots.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useRef } from \"react\"\n\ninterface InteractiveDotsProps {\n  colors?: string[]\n  spacing?: number\n  dotRadius?: number\n  repelForce?: number\n  repelDistance?: number\n  returnSpeed?: number\n  className?: string\n  style?: React.CSSProperties\n}\n\nexport function InteractiveDots({\n  colors = [\n    \"#C501E1\",\n    \"#9A26F8\",\n    \"#6564FE\",\n    \"#2B97FA\",\n    \"#02C4E7\",\n    \"#16E6CC\",\n    \"#2EF9A0\",\n    \"#C6E501\",\n    \"#E7C501\",\n    \"#FF6A63\",\n    \"#F82D98\",\n    \"#E830CE\",\n  ],\n  spacing = 20,\n  dotRadius = 6,\n  repelForce = 0.6,\n  repelDistance = 10000,\n  returnSpeed = 1,\n  className = \"\", \n}: InteractiveDotsProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const animationRef = useRef<number | null>(null)\n  const dotsRef = useRef<Dot[]>([])\n  const mouseRef = useRef({ x: 0, y: 0 })\n\n  class Dot {\n    x: number\n    y: number\n    dx: number\n    dy: number\n    color: string\n    radius: number\n\n    constructor(x: number, y: number, color: string) {\n      this.x = x\n      this.y = y\n      this.dx = x\n      this.dy = y\n      this.color = color\n      this.radius = dotRadius\n    }\n\n    update(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n      const mouse = mouseRef.current\n      const disX = this.x - mouse.x\n      const disY = this.y - mouse.y\n      const ds = disX * disX + disY * disY\n      const angle = Math.atan2(disY, disX)\n      const dist = repelDistance / ds\n\n      if (ds < repelDistance) {\n        this.x += Math.cos(angle) * dist * repelForce\n        this.y += Math.sin(angle) * dist * repelForce\n      } else {\n        if (this.x !== this.dx) {\n          this.x += (this.dx - this.x) * 0.02 * returnSpeed\n        }\n        if (this.y !== this.dy) {\n          this.y += (this.dy - this.y) * 0.02 * returnSpeed\n        }\n      }\n\n      if (this.x < 0 || this.x > canvas.width) this.x = this.dx\n      if (this.y < 0 || this.y > canvas.height) this.y = this.dy\n\n      this.draw(ctx)\n    }\n\n    draw(ctx: CanvasRenderingContext2D) {\n      ctx.beginPath()\n      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\n      ctx.fillStyle = this.color\n      ctx.fill()\n      ctx.closePath()\n    }\n  }\n\n  const randomColor = (colorArray: string[]) => {\n    return colorArray[Math.floor(Math.random() * colorArray.length)]\n  }\n\n  const initDots = (canvas: HTMLCanvasElement) => {\n    const dots: Dot[] = []\n    for (let x = spacing / 2; x < canvas.width; x += spacing) {\n      for (let y = spacing / 2; y < canvas.height; y += spacing) {\n        const color = randomColor(colors)\n        const dot = new Dot(x, y, color)\n        dots.push(dot)\n      }\n    }\n    dotsRef.current = dots\n  }\n\n  const animate = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    dotsRef.current.forEach((dot) => {\n      dot.update(canvas, ctx)\n    })\n    animationRef.current = requestAnimationFrame(() => animate(canvas, ctx))\n  }\n\n  const handleMouseMove = (event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent) {\n      mouseRef.current.x = event.clientX\n      mouseRef.current.y = event.clientY\n    } else if (event instanceof TouchEvent && event.touches.length > 0) {\n      mouseRef.current.x = event.touches[0].clientX\n      mouseRef.current.y = event.touches[0].clientY\n    }\n  }\n\n  const handleResize = () => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    canvas.width = window.innerWidth\n    canvas.height = window.innerHeight\n    initDots(canvas)\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    // Set canvas size\n    canvas.width = window.innerWidth\n    canvas.height = window.innerHeight\n\n    // Initialize dots\n    initDots(canvas)\n\n    // Start animation\n    animate(canvas, ctx)\n\n    // Event listeners\n    window.addEventListener(\"mousemove\", handleMouseMove)\n    window.addEventListener(\"touchmove\", handleMouseMove)\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n      window.removeEventListener(\"mousemove\", handleMouseMove)\n      window.removeEventListener(\"touchmove\", handleMouseMove)\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [colors, spacing, dotRadius, repelForce, repelDistance, returnSpeed])\n \n\n  return <canvas ref={canvasRef} className={className}/>\n}\n",
      "type": "registry:ui"
    }
  ]
}