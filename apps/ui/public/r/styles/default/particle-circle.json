{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "particle-circle",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/backgrounds/particle-circle.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\"\n\nimport { useEffect, useRef } from \"react\"\n\ndeclare global {\n  interface Window {\n    p5: any\n    gsap: any\n  }\n}\n\n// Added props interface for customization\ninterface ParticleCircleProps {\n  /** Number of particles (default: auto-calculated based on screen size) */\n  particleCount?: number\n  /** Animation duration for shrinking phase in seconds (default: 8) */\n  shrinkDuration?: number\n  /** Animation duration for growing phase in seconds (default: 8) */\n  growDuration?: number\n  /** Color theme array (default: blue/teal theme) */\n  colors?: string[]\n  /** Base radius multiplier (default: 0.35) */\n  baseRadius?: number\n  /** Particle size range [min, max] (default: [2, 8]) */\n  particleSize?: [number, number]\n  /** Enable blend mode (default: true, disabled on Firefox) */\n  enableBlendMode?: boolean\n  /** Custom width and height (default: auto-calculated) */\n  size?: number\n}\n\nexport function ParticleCircle({\n  particleCount,\n  shrinkDuration = 8,\n  growDuration = 8,\n  colors = [\"#393e46\", \"#00adb5\", \"#393e46\", \"#00adb5\", \"#e6eeef\"],\n  baseRadius = 0.35,\n  particleSize = [2, 8],\n  enableBlendMode = true,\n  size,\n}: ParticleCircleProps = {}) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const sketchRef = useRef<any>(null)\n\n  useEffect(() => {\n    // Load p5.js and GSAP\n    const loadScripts = async () => {\n      if (typeof window === \"undefined\") return\n\n      // Load p5.js\n      if (!window.p5) {\n        const p5Script = document.createElement(\"script\")\n        p5Script.src =\n          \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js\"\n        document.head.appendChild(p5Script)\n        await new Promise((resolve) => (p5Script.onload = resolve))\n      }\n\n      // Load GSAP\n      if (!(window as any).gsap) {\n        const gsapScript = document.createElement(\"script\")\n        gsapScript.src =\n          \"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\"\n        document.head.appendChild(gsapScript)\n        await new Promise((resolve) => (gsapScript.onload = resolve))\n      }\n\n      // Initialize the sketch\n      initSketch()\n    }\n\n    const initSketch = () => {\n      if (!containerRef.current || !window.p5 || !(window as any).gsap) return\n\n      const sketch = (p: any) => {\n        const particles: any[] = []\n        // Use prop-controlled particle count with fallback to responsive default\n        const amount =\n          particleCount ??\n          (p.windowWidth < 600 || p.windowHeight < 600 ? 1000 : 2000)\n        // Use prop-controlled durations\n        const durationShrink = shrinkDuration\n        const durationGrow = growDuration\n        const total = durationShrink + durationGrow\n        // Use prop-controlled color theme\n        const theme = colors\n\n        const proxy = {\n          progress: 1,\n          val: 0,\n        }\n\n        let progress: any\n        let interpolator: any\n\n        class Particle {\n          i: number\n          cos: number\n          sin: number\n          r: number\n          offset: number\n          color: string\n\n          constructor(i: number) {\n            this.i = i\n            this.cos = p.cos(i * p.TWO_PI)\n            this.sin = p.sin(i * p.TWO_PI)\n            // Use prop-controlled particle size range\n            this.r = p.floor(p.random(particleSize[0], particleSize[1]))\n            this.offset = p.pow(p.random(1, 2), 2.5) * p.random(-0.015, 0.015)\n            this.color = p.random(theme)\n          }\n\n          draw() {\n            interpolator.progress((proxy.progress + this.i) % 1)\n            // Use prop-controlled base radius\n            const r = p.width * (baseRadius + proxy.val * this.offset)\n            const x = this.cos * r + p.width / 2\n            const y = this.sin * r + p.width / 2\n            p.fill(this.color)\n            p.circle(x, y, this.r)\n          }\n        }\n\n        p.setup = () => {\n          // Use prop-controlled size with fallback to responsive default\n          const canvasSize = size ?? p.min(p.windowWidth, p.windowHeight)\n          const canvas = p.createCanvas(canvasSize, canvasSize)\n          canvas.parent(containerRef.current)\n          p.noStroke()\n\n          // Use prop-controlled blend mode setting\n          if (enableBlendMode && navigator.userAgent.indexOf(\"Firefox\") < 0) {\n            p.blendMode(p.SCREEN)\n          }\n\n          // Initialize GSAP animations\n          const gsap = (window as any).gsap\n          progress = gsap.to(proxy, {\n            progress: 0,\n            ease: \"none\",\n            duration: total,\n            repeat: -1,\n          })\n\n          interpolator = gsap\n            .timeline({\n              paused: true,\n              reverse: true,\n            })\n            .to(proxy, {\n              val: 1,\n              duration: durationShrink,\n              ease: \"elastic.in(1.5, 0.15)\",\n            })\n            .to(proxy, {\n              val: 0,\n              duration: durationGrow,\n              ease: \"back.in(3)\",\n            })\n\n          for (let i = 0; i < amount; i++) {\n            particles.push(new Particle(i / amount))\n          }\n        }\n\n        p.windowResized = () => {\n          // Use prop-controlled size in resize handler\n          const canvasSize = size ?? p.min(p.windowWidth, p.windowHeight)\n          p.resizeCanvas(canvasSize, canvasSize)\n        }\n\n        p.touchMoved = () => {\n          if (p.touches.length === 0) return\n          onMove(p.touches[0].x, p.touches[0].y)\n        }\n\n        p.mouseMoved = () => {\n          onMove(p.mouseX, p.mouseY)\n        }\n\n        const onMove = (x: number, y: number) => {\n          let mouseAngle = p.atan2(y - p.height / 2, x - p.width / 2)\n          mouseAngle = mouseAngle < 0 ? mouseAngle + p.TWO_PI : mouseAngle\n          mouseAngle = p.abs(mouseAngle / p.TWO_PI) * total\n          progress.time(mouseAngle)\n        }\n\n        p.draw = () => {\n          p.clear()\n          particles.forEach((particle) => {\n            particle.draw()\n          })\n        }\n      }\n\n      sketchRef.current = new window.p5(sketch)\n    }\n\n    loadScripts()\n\n    return () => {\n      if (sketchRef.current) {\n        sketchRef.current.remove()\n      }\n    }\n  }, [\n    particleCount,\n    shrinkDuration,\n    growDuration,\n    colors,\n    baseRadius,\n    particleSize,\n    enableBlendMode,\n    size,\n  ])\n\n  return (\n    <div\n      className=\"flex h-full w-full items-center justify-center\"\n      ref={containerRef}\n    ></div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}