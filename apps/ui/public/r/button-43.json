{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-43",
  "type": "registry:component",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/components/button/button-43.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useState } from \"react\"\n\nimport { Button } from \"@/registry/default/ui/button\"\n\nexport default function Component() {\n  const [pressedKey, setPressedKey] = useState<string | null>(null)\n  const [capsLock, setCapsLock] = useState(false)\n  const [shift, setShift] = useState(false)\n  const [numLock, setNumLock] = useState(true)\n  const [windowWidth, setWindowWidth] = useState<number>(\n    typeof window !== \"undefined\" ? window.innerWidth : 1200\n  )\n\n  // Handle window resize for responsiveness\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth)\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, [])\n\n  // Handle physical keyboard events\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      setPressedKey(e.key)\n      if (e.key === \"CapsLock\") setCapsLock((prev) => !prev)\n      if (e.key === \"Shift\") setShift(true)\n      if (e.key === \"NumLock\") setNumLock((prev) => !prev)\n    }\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      setPressedKey(null)\n      if (e.key === \"Shift\") setShift(false)\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    window.addEventListener(\"keyup\", handleKeyUp)\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown)\n      window.removeEventListener(\"keyup\", handleKeyUp)\n    }\n  }, [])\n\n  const handleKeyPress = (key: string) => {\n    setPressedKey(key)\n    setTimeout(() => setPressedKey(null), 150)\n\n    if (key === \"CapsLock\") {\n      setCapsLock(!capsLock)\n    } else if (key === \"Shift\") {\n      setShift(!shift)\n    } else if (key === \"NumLock\") {\n      setNumLock(!numLock)\n    } else {\n      // Only turn off shift after a non-modifier key press\n      if (shift) setShift(false)\n    }\n  }\n\n  const getKeyDisplay = (key: string, shiftSymbol?: string) => {\n    if (key.length === 1 && key.match(/[a-z]/)) {\n      return capsLock || shift ? key.toUpperCase() : key\n    }\n    return shift && shiftSymbol ? shiftSymbol : key\n  } \n\n  const isCompact = windowWidth < 768 // More compact layout on mobile\n\n  const KeyButton = ({\n    children,\n    subLabel,\n    className = \"\",\n    variant = \"outline\" as const,\n    onClick,\n    isPressed = false,\n    isActive = false,\n    size = \"default\",\n  }: {\n    children: React.ReactNode\n    subLabel?: React.ReactNode\n    className?: string\n    variant?: \"outline\" | \"secondary\" | \"default\"\n    onClick?: () => void\n    isPressed?: boolean\n    isActive?: boolean\n    size?: \"sm\" | \"default\" | \"lg\" | \"xl\"\n  }) => {\n    const sizeClasses = {\n      sm: \"h-8 min-w-8 text-xs\",\n      default: isCompact ? \"h-10 min-w-10 text-xs\" : \"h-12 min-w-12 text-sm\",\n      lg: isCompact ? \"h-10 min-w-16 text-xs\" : \"h-12 min-w-20 text-sm\",\n      xl: isCompact ? \"h-10 min-w-20 text-xs\" : \"h-12 min-w-24 text-sm\",\n    }\n\n    return (\n      <Button\n        variant={isActive ? \"default\" : variant}\n        className={` ${sizeClasses[size]} relative flex flex-col items-center justify-center font-mono transition-all duration-150 ${isPressed ? \"bg-muted scale-95 shadow-inner\" : \"shadow-[0_2px_0_0_rgba(0,0,0,0.1)]\"} ${className} `}\n        onClick={onClick}\n      >\n        {subLabel && (\n          <span className=\"text-muted-foreground absolute top-1 left-1.5 text-[0.6rem] opacity-80\">\n            {subLabel}\n          </span>\n        )}\n        {children}\n      </Button>\n    )\n  }\n\n  const numberRow = [\n    { key: \"`\", shiftSymbol: \"~\" },\n    { key: \"1\", shiftSymbol: \"!\" },\n    { key: \"2\", shiftSymbol: \"@\" },\n    { key: \"3\", shiftSymbol: \"#\" },\n    { key: \"4\", shiftSymbol: \"$\" },\n    { key: \"5\", shiftSymbol: \"%\" },\n    { key: \"6\", shiftSymbol: \"^\" },\n    { key: \"7\", shiftSymbol: \"&\" },\n    { key: \"8\", shiftSymbol: \"*\" },\n    { key: \"9\", shiftSymbol: \"(\" },\n    { key: \"0\", shiftSymbol: \")\" },\n    { key: \"-\", shiftSymbol: \"_\" },\n    { key: \"=\", shiftSymbol: \"+\" },\n  ]\n\n  const topRow = [\n    { key: \"q\" },\n    { key: \"w\" },\n    { key: \"e\" },\n    { key: \"r\" },\n    { key: \"t\" },\n    { key: \"y\" },\n    { key: \"u\" },\n    { key: \"i\" },\n    { key: \"o\" },\n    { key: \"p\" },\n    { key: \"[\", shiftSymbol: \"{\" },\n    { key: \"]\", shiftSymbol: \"}\" },\n    { key: \"\\\\\", shiftSymbol: \"|\" },\n  ]\n\n  const middleRow = [\n    { key: \"a\" },\n    { key: \"s\" },\n    { key: \"d\" },\n    { key: \"f\" },\n    { key: \"g\" },\n    { key: \"h\" },\n    { key: \"j\" },\n    { key: \"k\" },\n    { key: \"l\" },\n    { key: \";\", shiftSymbol: \":\" },\n    { key: \"'\", shiftSymbol: '\"' },\n  ]\n\n  const bottomRow = [\n    { key: \"z\" },\n    { key: \"x\" },\n    { key: \"c\" },\n    { key: \"v\" },\n    { key: \"b\" },\n    { key: \"n\" },\n    { key: \"m\" },\n    { key: \",\", shiftSymbol: \"<\" },\n    { key: \".\", shiftSymbol: \">\" },\n    { key: \"/\", shiftSymbol: \"?\" },\n  ] \n  return (\n    <div className=\"\">\n      <div className=\"space-y-1 sm:space-y-2\">\n        <div className=\"flex gap-2 md:gap-4\">\n          <div className=\"flex-1\">\n            {/* Number Row */}\n            <div className=\"flex flex-wrap justify-center gap-1\">\n              {numberRow.map((item) => (\n                <KeyButton\n                  key={item.key}\n                  onClick={() => handleKeyPress(item.key)}\n                  isPressed={pressedKey === item.key}\n                  subLabel={item.shiftSymbol}\n                >\n                  {getKeyDisplay(item.key, item.shiftSymbol)}\n                </KeyButton>\n              ))}\n              <KeyButton\n                className={isCompact ? \"min-w-16\" : \"min-w-20\"}\n                onClick={() => handleKeyPress(\"Backspace\")}\n                isPressed={pressedKey === \"Backspace\"}\n                size=\"lg\"\n              >\n                ⌫\n              </KeyButton>\n            </div>\n\n            {/* Top Row */}\n            <div className=\"mt-1 flex flex-wrap justify-center gap-1\">\n              <KeyButton\n                size=\"lg\"\n                onClick={() => handleKeyPress(\"Tab\")}\n                isPressed={pressedKey === \"Tab\"}\n              >\n                Tab\n              </KeyButton>\n              {topRow.map((item) => (\n                <KeyButton\n                  key={item.key}\n                  onClick={() => handleKeyPress(item.key)}\n                  isPressed={pressedKey === item.key}\n                  subLabel={item.shiftSymbol}\n                >\n                  {getKeyDisplay(item.key, item.shiftSymbol)}\n                </KeyButton>\n              ))}\n            </div>\n\n            {/* Middle Row */}\n            <div className=\"mt-1 flex flex-wrap justify-center gap-1\">\n              <KeyButton\n                size=\"xl\"\n                onClick={() => handleKeyPress(\"CapsLock\")}\n                isPressed={pressedKey === \"CapsLock\"}\n                isActive={capsLock}\n              >\n                Caps\n              </KeyButton>\n              {middleRow.map((item) => (\n                <KeyButton\n                  key={item.key}\n                  onClick={() => handleKeyPress(item.key)}\n                  isPressed={pressedKey === item.key}\n                  subLabel={item.shiftSymbol}\n                >\n                  {getKeyDisplay(item.key, item.shiftSymbol)}\n                </KeyButton>\n              ))}\n              <KeyButton\n                size=\"xl\"\n                onClick={() => handleKeyPress(\"Enter\")}\n                isPressed={pressedKey === \"Enter\"}\n              >\n                Enter\n              </KeyButton>\n            </div>\n\n            {/* Bottom Row */}\n            <div className=\"mt-1 flex flex-wrap justify-center gap-1\">\n              <KeyButton\n                size=\"xl\"\n                onClick={() => handleKeyPress(\"Shift\")}\n                isPressed={pressedKey === \"Shift\"}\n                isActive={shift}\n              >\n                Shift\n              </KeyButton>\n              {bottomRow.map((item) => (\n                <KeyButton\n                  key={item.key}\n                  onClick={() => handleKeyPress(item.key)}\n                  isPressed={pressedKey === item.key}\n                  subLabel={item.shiftSymbol}\n                >\n                  {getKeyDisplay(item.key, item.shiftSymbol)}\n                </KeyButton>\n              ))}\n              <KeyButton\n                size=\"xl\"\n                onClick={() => handleKeyPress(\"Shift\")}\n                isPressed={pressedKey === \"Shift\"}\n                isActive={shift}\n              >\n                Shift\n              </KeyButton>\n            </div>\n\n            {/* Space Row */}\n            <div className=\"mt-1 flex flex-wrap justify-center gap-1\">\n              <KeyButton\n                size=\"lg\"\n                onClick={() => handleKeyPress(\"Control\")}\n                isPressed={pressedKey === \"Control\"}\n              >\n                Ctrl\n              </KeyButton>\n              <KeyButton\n                size=\"lg\"\n                onClick={() => handleKeyPress(\"Meta\")}\n                isPressed={pressedKey === \"Meta\"}\n              >\n                ⊞\n              </KeyButton>\n              <KeyButton\n                size=\"lg\"\n                onClick={() => handleKeyPress(\"Alt\")}\n                isPressed={pressedKey === \"Alt\"}\n              >\n                Alt\n              </KeyButton>\n              <KeyButton\n                className=\"max-w-xs flex-1\"\n                onClick={() => handleKeyPress(\" \")}\n                isPressed={pressedKey === \" \"}\n              >\n                {\" \"}\n              </KeyButton>\n              <KeyButton\n                size=\"lg\"\n                onClick={() => handleKeyPress(\"Alt\")}\n                isPressed={pressedKey === \"Alt\"}\n              >\n                Alt\n              </KeyButton>\n              <KeyButton\n                size=\"lg\"\n                onClick={() => handleKeyPress(\"ContextMenu\")}\n                isPressed={pressedKey === \"ContextMenu\"}\n              >\n                ☰\n              </KeyButton>\n              <KeyButton\n                size=\"lg\"\n                onClick={() => handleKeyPress(\"Control\")}\n                isPressed={pressedKey === \"Control\"}\n              >\n                Ctrl\n              </KeyButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "button",
      "example",
      "component"
    ],
    "style": 1,
    "colSpan": 3
  }
}