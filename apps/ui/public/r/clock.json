{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clock",
  "type": "registry:ui",
  "dependencies": [
    ""
  ],
  "files": [
    {
      "path": "registry/default/ui/clock.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype SecondsMode = \"smooth\" | \"tick1\" | \"tick2\" | \"highFreq\"\n\ninterface ClockProps {\n  initialTime?: Date\n  timeZone?: string\n  initialSecondsMode?: SecondsMode\n}\n\nexport function Clock({\n  initialTime = new Date(),\n  timeZone = \"Asia/Calcutta\",\n  initialSecondsMode = \"smooth\",\n}: ClockProps) {\n  const [time, setTime] = useState(initialTime)\n  // secondsMode is intentionally not given a setter, as it's meant to be static after initial render\n  const [secondsMode] = useState<SecondsMode>(initialSecondsMode)\n\n  const hourHandRef = useRef<HTMLDivElement>(null)\n  const minuteHandRef = useRef<HTMLDivElement>(null)\n  const secondHandContainerRef = useRef<HTMLDivElement>(null)\n  const secondHandShadowRef = useRef<HTMLDivElement>(null)\n\n  // Log the initial secondsMode to confirm it's being received\n  useEffect(() => {\n    console.log(\n      \"Clock component mounted. Initial secondsMode prop:\",\n      initialSecondsMode\n    )\n    console.log(\"Clock component state secondsMode:\", secondsMode)\n  }, [initialSecondsMode, secondsMode])\n\n  useEffect(() => {\n    console.log(\n      \"Clock component mounted. Initial secondsMode prop:\",\n      initialSecondsMode\n    )\n    console.log(\"Clock component state secondsMode:\", secondsMode)\n  }, [initialSecondsMode, secondsMode])\n\n  const updateClockHands = useCallback(() => {\n    const now = new Date()\n    const displayTime = new Date(\n      now.toLocaleString(\"en-US\", {\n        timeZone: timeZone,\n      })\n    )\n    setTime(displayTime)\n\n    const hours = displayTime.getHours() % 12\n    const minutes = displayTime.getMinutes()\n    const seconds = displayTime.getSeconds()\n    const milliseconds = displayTime.getMilliseconds()\n\n    const hoursDegrees = hours * 30 + (minutes / 60) * 30\n    const minutesDegrees = minutes * 6 + (seconds / 60) * 0.1\n\n    if (hourHandRef.current) {\n      hourHandRef.current.style.transform = `rotate(${hoursDegrees}deg)`\n    }\n    if (minuteHandRef.current) {\n      minuteHandRef.current.style.transform = `rotate(${minutesDegrees}deg)`\n    }\n\n    let currentSecondsAngle = 0\n    // Log the secondsMode *inside* the function that uses it\n    console.log(\n      \"--- updateClockHands called. Current secondsMode:\",\n      secondsMode\n    )\n\n    switch (secondsMode) {\n      case \"tick1\": // Tick every second (60 ticks per minute)\n        currentSecondsAngle = seconds * 6\n        console.log(\n          `Mode: Tick1, Seconds: ${seconds}, Calculated Angle: ${currentSecondsAngle}deg`\n        )\n        break\n      case \"tick2\": // Half-second ticks (120 ticks per minute)\n        currentSecondsAngle =\n          Math.floor((seconds * 1000 + milliseconds) / 500) * 3\n        console.log(\n          `Mode: Tick2, Seconds: ${seconds}, Milliseconds: ${milliseconds}, Calculated Angle: ${currentSecondsAngle}deg`\n        )\n        break\n      case \"highFreq\": // High-frequency sweep (8 ticks per second)\n        currentSecondsAngle = ((seconds * 1000 + milliseconds) / 125) * 0.75\n        console.log(\n          `Mode: HighFreq, Seconds: ${seconds}, Milliseconds: ${milliseconds}, Calculated Angle: ${currentSecondsAngle}deg`\n        )\n        break\n      case \"smooth\": // Smooth movement over 60 seconds\n      default:\n        currentSecondsAngle = seconds * 6 + (milliseconds / 1000) * 6\n        console.log(\n          `Mode: Smooth, Seconds: ${seconds}, Milliseconds: ${milliseconds}, Calculated Angle: ${currentSecondsAngle}deg`\n        )\n        break\n    }\n\n    const secondHandTransform = `rotate(${currentSecondsAngle}deg)`\n    if (secondHandContainerRef.current) {\n      secondHandContainerRef.current.style.transform = secondHandTransform\n      console.log(`Applied transform to second hand: ${secondHandTransform}`)\n    } else {\n      console.warn(\n        \"secondHandContainerRef.current is null, cannot apply transform.\"\n      )\n    }\n\n    if (secondHandShadowRef.current) {\n      secondHandShadowRef.current.style.transform = `rotate(${currentSecondsAngle + 0.5}deg)`\n    }\n  }, [secondsMode, timeZone])\n\n  useEffect(() => {\n    updateClockHands()\n\n    const minuteInterval = setInterval(() => {\n      updateClockHands()\n    }, 60000)\n\n    let animationFrameId: number\n    const animateSeconds = () => {\n      updateClockHands()\n      animationFrameId = requestAnimationFrame(animateSeconds)\n    }\n    animateSeconds()\n\n    return () => {\n      clearInterval(minuteInterval)\n      cancelAnimationFrame(animationFrameId)\n    }\n  }, [updateClockHands])\n\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ]\n  const dateDisplay = `${months[time.getMonth()]} ${time.getDate()}`\n\n  const hourMarks = []\n  for (let i = 0; i < 60; i++) {\n    if (i % 5 === 0) {\n      const hourIndex = i / 5\n      const angle = (i * 6 * Math.PI) / 180\n      const radius = 145\n      const left = 175 + Math.sin(angle) * radius - 15\n      const top = 175 - Math.cos(angle) * radius - 10\n      hourMarks.push(\n        <div\n          key={`num-${i}`}\n          className=\"pointer-events-none absolute h-[20px] w-[30px] text-center leading-[20px] select-none\"\n          style={{\n            left: `${left}px`,\n            top: `${top}px`,\n            fontSize: \"16px\",\n            fontWeight: 400, \n            textShadow: \"0 1px 1px rgba(255, 255, 255, 0.2)\",\n            zIndex: 15,  \n          }}\n        >\n          {hourIndex === 0 ? \"12\" : hourIndex.toString()}\n        </div>\n      )\n    } else {\n      hourMarks.push(\n        <div\n          key={`mark-${i}`}\n          className=\"absolute top-[10px] left-[175px] h-[10px] w-[1px] shadow-[0_0_2px_rgba(255,255,255,0.02)]\"\n          style={{\n            backgroundColor: \"rgba(80, 80, 80, 0.5)\",\n            transformOrigin: \"center 165px\",\n            transform: `rotate(${i * 6}deg)`,\n            opacity: 1,\n          }}\n        />\n      )\n    }\n  }\n\n  return (\n    <div className=\"relative flex flex-col items-center justify-center p-4\">\n      <div className=\"relative z-10 mt-5 flex h-[350px] w-[350px] items-center justify-center\">\n        <div className=\"transform-style-preserve-3d group pointer-events-none relative z-10 rounded-full bg-transparent transition-all duration-400 ease-[cubic-bezier(0.25,1,0.5,1)] will-change-transform backface-hidden perspective-[1000px]\">\n          <div\n            className=\"transform-style-preserve-3d will-change-transform-box-shadow pointer-events-auto relative z-20 h-[350px] w-[350px] cursor-pointer overflow-hidden rounded-full bg-[rgba(255,255,255,0.03)] shadow-[inset_0_0.4em_0.4em_rgba(0,0,0,0.1),inset_0_-0.4em_0.4em_rgba(255,255,255,0.5)] backdrop-blur-[1px] transition-all duration-400 ease-[cubic-bezier(0.25,1,0.5,1)] select-none backface-hidden\"\n            style={{\n              backgroundImage:\n                \"linear-gradient(-75deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.04), rgba(255, 255, 255, 0.01))\",\n              boxShadow: `inset 0 0.4em 0.4em rgba(0, 0, 0, 0.1), inset 0 -0.4em 0.4em rgba(255, 255, 255, 0.2), 10px 5px 10px rgba(0, 0, 0, 0.1), 10px 20px 20px rgba(0, 0, 0, 0.02), 10px 55px 50px rgba(0, 0, 0, 0.02)`,\n            }}\n          >\n            <div className=\"border-foreground pointer-events-none absolute top-0 left-0 z-10 h-[350px] w-[350px] rounded-full border opacity-60 shadow-[0_0_10px_rgba(255,255,255,0.5)]\" />\n\n            <div className=\"border-foreground pointer-events-none absolute top-[-3px] left-[-3px] z-10 h-[356px] w-[356px] rounded-full border opacity-60 shadow-[0_0_10px_rgba(255,255,255,0.5)]\" />\n\n            <div\n              className=\"pointer-events-none absolute top-0 left-0 z-10 h-[350px] w-[350px] rounded-full shadow-[inset_-5px_5px_15px_rgba(0,0,0,0.3),inset_-8px_8px_20px_rgba(0,0,0,0.2)]\"\n              style={{ opacity: 0.15 }}\n            />\n            <div className=\"pointer-events-none absolute top-0 left-0 z-10 h-[175px] w-[350px] rounded-t-[175px] mix-blend-soft-light blur-md\" />\n\n            <div className=\"pointer-events-none absolute top-[10px] left-[10px] z-20 h-[330px] w-[330px] rounded-full mix-blend-overlay blur-md\" />\n            <div className=\"absolute top-0 left-0 z-10 h-full w-full\">\n              {hourMarks}\n            </div>\n            <div\n              ref={hourHandRef}\n              className=\"absolute bg-foreground bottom-[175px] left-[175px] z-20 ml-[-3px] h-[70px] w-[6px] rounded-[3px] shadow-[0_0_5px_rgba(0,0,0,0.3)] will-change-transform\"\n              style={{\n                transformOrigin: \"center bottom\",\n                \n              }}\n            />\n            <div\n              ref={minuteHandRef}\n              className=\"absolute bg-foreground bottom-[175px] left-[175px] z-20 ml-[-2px] h-[100px] w-[4px] rounded-[2px] shadow-[0_0_5px_rgba(0,0,0,0.3)] will-change-transform\"\n              style={{\n                transformOrigin: \"center bottom\", \n              }}\n            />\n            <div\n              ref={secondHandContainerRef}\n              className=\"absolute top-[55px] left-[174px] z-20 h-[120px] w-[2px] will-change-transform\"\n              style={{ transformOrigin: \"1px 120px\" }}\n            >\n              <div\n                className={`absolute bottom-0 left-0 h-[120px] w-[2px] shadow-[0_0_5px_rgba(255,107,0,0.5)]`}\n                style={{ backgroundColor: \"rgba(255, 107, 0, 1)\" }}\n              />\n              <div\n                className={`absolute bottom-[-14px] left-[-2px] h-[14px] w-[6px] rounded-b-[4px] shadow-[0_0_5px_rgba(255,107,0,0.5)]`}\n                style={{ backgroundColor: \"rgba(255, 107, 0, 1)\" }}\n              />\n            </div>\n\n            <div\n              className=\"pointer-events-none absolute top-[157px] left-[157px] z-20 h-[36px] w-[36px] rounded-full backdrop-blur-[2px]\"\n              style={{\n                backgroundColor: \"rgba(255, 255, 255, 0.35)\",\n                boxShadow:\n                  \"0 0 20px rgba(255, 255, 255, 0.4), inset 0 0 8px rgba(255, 255, 255, 0.6)\",\n              }}\n            />\n            <div className=\"absolute top-[80px] left-1/2 z-10 -translate-x-1/2\">\n              <svg\n                width=\"48\"\n                height=\"48\"\n                viewBox=\"0 0 392.02 324.6\"\n                fill=\"currentColor\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fill=\"#fff200\"\n                  d=\"M268.08,0c-27.4,0-51.41,4.43-72.07,13.26C175.36,4.43,151.35,0,123.95,0H0v324.6h123.95c27.37,0,51.38-4.58,72.07-13.7,20.69,9.12,44.7,13.7,72.07,13.7h123.95V0h-123.95ZM324.09,268.36h-47.91c-20.25,0-37.3-4.05-51.18-12.15-12.28-7.17-21.94-17.41-28.99-30.7h0s0,0,0,0c0,0,0,0,0,0h0c-7.05,13.29-16.71,23.53-28.99,30.7-13.87,8.1-30.93,12.15-51.18,12.15h-47.91V56.24h47.91c19.8,0,36.67,4.01,50.61,12.04,12.51,7.2,22.35,17.47,29.55,30.77h0s0,0,0,0c0,0,0,0,0,0h0c7.2-13.3,17.04-23.57,29.55-30.77,13.95-8.02,30.82-12.04,50.61-12.04h47.91v212.13Z\"\n                ></path>\n              </svg>\n            </div>\n            <div className=\"text-primary/60 pointer-events-none absolute bottom-[115px] left-[105px] z-10 h-auto w-[140px] text-center text-xs leading-none font-semibold select-none\">\n              {dateDisplay}\n            </div>\n            <div className=\"text-primary/60 pointer-events-none absolute bottom-[90px] left-[105px] z-10 h-auto w-[140px] text-center text-xs leading-none select-none\">\n              {timeZone}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}