export const examplesSvgPath = [
	{
		name: "Wave",
		id: "line-01",
		path: "M0 50 C 20 40, 40 60, 60 50 C 80 40, 100 60, 120 50 C 140 40, 160 60, 180 50 C 200 40, 220 60, 240 50",
		viewBox: "0 0 240 100",
	},
	{
		name: "Zigzag",
		id: "line-02",
		path: "M276.107 10.7667C258.31 28.3296 234.687 49.9446 218.918 18.406C204.994 -9.44212 183.022 5.05179 163.639 21.9074C157.838 26.9518 147.594 35.084 139.023 33.2603C131.032 31.5602 124.159 19.4215 117.166 15.0108C102.691 5.88068 78.6731 19.6982 64.5392 24.1355C43.8618 30.6273 24.6478 36.5711 3 33.6847",
		viewBox: "0 0 279 37",
	},
	{
		name: "Arrows",
		id: "line-03",
		path: "M3 11.6683C27.5507 31.3629 46.9422 39.6998 78.4385 38.3C106.882 37.0359 137.821 23.5277 164.275 13.6843C197.028 1.49724 261.319 -8.02763 280.351 30.7667C295.128 60.8895 272.979 96.9103 238.122 87.1069C224.684 83.3275 217.74 65.3879 223.692 52.9421C230.121 39.4995 249.34 33.0192 262.632 29.9179C298.328 21.5889 322.109 55.0269 354.41 60.8997C384.588 66.3865 406.997 52.8685 429.849 34.5864C431.806 33.0205 430.804 43.4396 430.804 46.0455C430.804 55.5985 432.714 51.3586 432.714 44.1356C432.714 39.4902 435.161 29.6135 428.894 32.2521C424.373 34.1558 414.869 34.5865 409.795 34.5865",
		viewBox: "0 0 436 92",
	},
	{
		name: "Spiral",
		id: "line-04",
		path: "M 50 50 C 50 50, 60 40, 70 40 C 80 40, 90 50, 90 60 C 90 70, 80 80, 70 80 C 60 80, 50 70, 50 60 C 50 50, 60 40, 70 40",
		viewBox: "0 0 100 100",
	},

	{
		name: "Heart",
		id: "line-05",
		path: "M3 153.9C19.7648 151.422 58.3853 148.645 58.3853 123.767C58.3853 109.758 41.9931 109.583 35.4673 119.947C29.8677 128.841 29.3802 151.014 41.6212 155.385C68.0833 164.836 96.3337 155.089 121.41 146.367C158.021 133.632 195.283 106.274 215.841 72.7318C223.827 59.7017 248.721 3.98332 214.143 3.02276C159.312 1.49957 148.663 76.8016 170.111 114.748C179.098 130.649 200.663 140.818 217.963 143.29C237.073 146.02 266.527 131.63 270.271 111.035C273.351 94.0976 254.758 100.754 250.43 111.884C244.084 128.203 258.692 140.196 273.773 140.531C298.453 141.08 318.113 127.233 334.463 109.974C339.288 104.881 348.912 91.2687 350.484 84.1909C351.915 77.7539 351.661 81.7626 350.697 86.1007C349.794 90.1648 352.5 94.2726 352.5 98.5146C352.5 100.006 350.591 90.7585 350.591 88.0105C350.591 74.942 333.087 85.5908 325.763 87.0556",
		viewBox: "0 0 355 162",
	},
	{
		name: "Underline",
		id: "line-06",
		path: "M10 60 Q 50 80, 90 60",
		viewBox: "0 0 100 100",
	},
	{
		name: "Signature",
		id: "line-07",
		path: "M10 50 C 20 40, 40 10, 50 20 C 60 30, 60 50, 70 60 C 80 70, 90 50, 100 40 C 110 30, 120 40, 130 50",
		viewBox: "0 0 140 80",
	},
	{
		name: "Infinity",
		id: "line-08",
		path: "M20 50 C 40 10, 60 10, 70 50 C 80 90, 100 90, 120 50 C 100 10, 80 10, 70 50 C 60 90, 40 90, 20 50",
		viewBox: "0 0 140 100",
	},
	{
		name: "Squiggle",
		id: "line-008",
		path: "M175.8 53.8932C170.66 20.7707 154.662 -4.95342 116.689 6.07096C87.437 14.5634 68.7256 54.0726 89.4889 80.0265C94.4637 86.245 105.553 85.2891 111.889 81.8043C121.912 76.2915 124.3 66.5962 121.4 55.8488C116.132 36.3252 94.5076 16.8156 73.2222 22.9599C39.9122 32.5751 23.357 66.341 19.9778 98.7821C19.3047 105.244 22.4114 153.806 29.4 127.404C30.6683 122.613 33.9004 108.124 32.3333 112.827C29.735 120.623 28.6 125.112 28.6 133.538C28.6 135.21 29.8227 143.952 26.1111 140.915C18.5116 134.698 10.4687 129.095 3 122.693",
		viewBox: "0 0 179 145",
	},
	{
		name: "Curve",
		id: "line-09",
		path: "M17.8081 5.52582C5.07822 26.8086 -7.46756 49.828 16.8532 66.7467C29.1847 75.3252 47.1789 77.9756 62.1588 75.7654C81.9246 72.8491 97.7178 63.5697 109.374 47.5422C118.313 35.251 120.245 17.2604 103.751 10.5126C89.7309 4.77723 75.1033 18.9022 75.1033 32.688C75.1033 49.2062 86.3544 63.3926 99.9312 71.4152C131.636 90.1501 169.244 65.6316 190.118 39.9029C201.394 26.0048 198.884 12.3089 182.16 4.78312C166.542 -2.24483 155.617 20.0644 157.651 32.2636C163.105 64.9873 205.771 78.4908 233.726 69.5054C251.929 63.6544 263.918 52.8671 275.636 37.5687C284.14 26.4663 285.484 9.63343 269.907 4.67702C252.025 -1.01247 241.287 25.1325 245.928 39.0541C256.302 70.1768 301.989 68.5505 327.202 68.5505",
		viewBox: "0 0 330 81",
	},
	{
		name: "Scribble",
		id: "line-10",
		path: "M3 32.5063C12.5757 16.4918 25.0064 -3.90124 45.8445 5.30632C61.3254 12.1467 63.6639 31.4434 83 30.9063C102.845 30.3551 116.008 13.3655 132.6 5.30632C150.012 -3.15071 166.083 11.4664 175.711 25.3063C185.728 39.7058 197.218 45.7715 213.4 38.1063C230.822 29.854 204.463 30.9063 197.4 30.9063C191.953 30.9063 200.98 29.0869 203.711 29.6619C210.183 31.0244 219.042 27.8326 224.511 29.3952C225.998 29.82 220.646 38.3036 220.245 39.6174C217.795 47.6349 215.8 52.6844 215.8 61.3063",
		viewBox: "0 0 228 64",
	},
	{
		name: "Swirl",
		id: "line-11",
		path: "M246.495 14.3604C202.623 8.63801 164.111 25.2685 139.384 62.3604C126.723 81.3515 153.173 111.298 165.695 88.7604C177.372 67.7436 140.477 41.2165 124.895 37.1159C91.0864 28.2189 58.4186 30.3604 24.0949 30.3604",
		viewBox: "0 0 269 100",
	},
	{
		name: "Underline",
		id: "line-33",
		path: "M3 108.48C15.3006 111.796 56.5166 119.169 57.3999 94.4354C57.6501 87.4301 49.7613 76.0749 41.3999 80.0354C30.25 85.3168 41.8105 99.1945 49.3999 100.835C69.3933 105.158 87.4937 84.6447 92.5111 67.5021C96.7246 53.106 93.3175 37.3222 88.1555 23.6798C85.7341 17.2804 80.8805 12.9113 78.2 6.87984C74.053 -2.45097 84.2122 7.76023 89.3111 9.99094C99.7295 14.5489 82.5828 7.67225 78.9999 6.07983C73.0883 3.4524 70.5472 19.4382 68.6 25.2798",
		viewBox: "0 0 97 115",
	},
	{
		name: "Flourish",
		id: "line-34",
		path: "M3 41.657C23.0883 23.0705 39.5765 9.86276 67.236 5.56013C84.5957 2.8597 104.477 6.9178 121.463 10.6465C140.02 14.7199 156.838 17.1804 175.773 15.0766C178.448 14.7793 197.867 9.59351 196.446 8.84164C191.664 6.31003 182.22 3.26306 176.675 3.26306C171.446 3.26306 186.926 5.34686 192.016 6.5446C196.661 7.63757 201.877 5.93812 197.841 10.6465C193.732 15.44 189.575 20.2159 186.109 25.4134",
		viewBox: "0 0 202 45",
	},
	{
		name: "Sketch",
		id: "line-13",
		path: "M3.19075 50.2646C17.6295 70.2232 37.6451 96.8883 60.566 71.4364C67.9015 63.2909 80.3346 27.3897 95.3177 30.9493C113.127 35.1804 118.451 61.304 130.586 34.1999C132.277 30.4244 136.915 17.1056 141.815 16.0499C147.033 14.9257 155.206 26.8687 159.417 29.5865C165.296 33.3815 173.19 25.9995 176.534 21.8749C184.23 12.3809 189.693 13.2592 199.853 17.2257C211.136 21.6309 216.264 17.0228 225.843 12.0606C229.192 10.3254 232.346 9.03345 227.478 6.5599C225.573 5.59172 212.953 0.672554 217.541 3.65109C221.35 6.1233 228.058 5.47913 231.023 8.18279C232.644 9.66039 225.735 18.0116 224.541 20.9411C223.606 23.2356 222.695 28.406 220.931 29.2735",
		viewBox: "0 0 234 85",
	},
	{
		name: "Doodle",
		id: "line-14",
		path: "M3 94.6748C27.4641 99.4874 46.3246 102.55 65.0444 83.8304C73.9796 74.8953 76.1503 62.8261 69.8444 51.4748C58.3692 30.8185 36.6188 61.9308 52.6 71.9193C81.897 90.2303 107.995 53.7887 112.155 28.3637C113.368 20.9544 114.609 12.5035 115 5.07481C115.339 -1.36878 117.032 6.28246 117.844 8.63037C119.35 12.9801 121.884 16.4674 123.356 20.7192C125.931 28.1593 122.746 21.3428 121.755 17.8748C118.913 7.92667 118.724 -1.31665 108.6 8.27481C106.563 10.205 95.3631 19.2352 97.3999 19.4748C103.175 20.1542 109.598 23.9571 115 24.2748C122.394 24.7098 126.464 27.2512 116.6 22.3192C113.382 20.71 110.214 19.6588 107 18.2304C101.703 15.8763 109.23 17.7389 109.844 18.2304C111.629 19.6579 116.523 20.3297 111.8 18.2304C110.584 17.6899 105.386 16.2748 107 16.2748C112.097 16.2748 118.803 21.3653 116.956 17.8748C115.403 14.9415 113.389 14.4872 110.2 14.6748C109.114 14.7386 105.166 17.8748 107 17.8748",
		viewBox: "0 0 127 101",
	},
	{
		name: "Swoosh",
		id: "line-15",
		path: "M3 58.1151C35.9237 60.1367 64.1957 53.2742 82.9999 24.5151C89.33 14.8339 91.8913 -1.32279 74.1111 4.60398C57.5945 10.1095 48.7621 34.6091 55.1778 50.2929C64.8056 73.8289 92.9371 74.9924 114.644 69.3151C148.228 60.5317 181.089 48.8653 211 31.2706C217.093 27.6867 173.175 20.0151 187.8 24.5151C198.123 27.6912 207.525 27.7151 218.2 27.7151C225.887 27.7151 220.97 30.2928 216.511 34.1151C209.264 40.3271 202.139 50.3578 199.8 59.7151",
		viewBox: "0 0 225 75",
	},

	{
		name: "Stroke",
		id: "line-16",
		path: "M222.462 12.8345C177.074 10.0328 132.077 4.80881 86.6062 3.64623C60.4691 2.97796 -17.6945 1.02174 8.17755 4.79475C50.7028 10.9964 94.6534 10.7971 137.47 14.9675C154.059 16.5834 170.516 18.7493 187.021 21.0384C193.373 21.9193 198.334 23.4078 188.17 22.8432C142.806 20.323 97.6784 14.7225 52.3141 12.0141C47.4732 11.7251 33.1304 11.5843 37.7934 12.9165C54.8856 17.8 73.2224 19.7239 90.7081 22.433C111.764 25.6952 133.161 27.7326 154.042 32.0315C161.542 33.5757 171.588 34.0575 178.571 37.1999C190.929 42.7607 151.511 39.3406 137.962 39.0868C115.414 38.6643 92.8916 37.3627 70.3626 36.4616",
		viewBox: "0 0 225 43",
	},
	{
		name: "Spiral",
		id: "line-17",
		path: "M3 40.3488C19.7708 41.4359 37.9104 41.0682 48.7774 26.3202C52.5856 21.152 59.2351 12.5093 55.4225 5.64659C51.5129 -1.39075 46.2059 7.2346 43.609 12.948C40.8036 19.12 40.5382 25.1829 43.691 31.4887C51.8133 47.7337 77.6533 34.5037 88.648 28.5353C95.2402 24.9568 105.344 16.0031 104.892 7.86163C104.367 -1.58945 95.1803 8.30175 93.4062 10.815C82.3063 26.5396 95.4116 42.0203 110.798 45.5172C127.388 49.2876 143.701 46.2556 160.35 46.2556C169.215 46.2556 177.892 44.7789 186.766 44.7789C189.255 44.7789 196.378 44.1443 194.067 43.2201C188.219 40.8812 183.945 36.3635 178.726 33.2936C176.837 32.1824 190.478 38.7349 193.821 40.0207C200.165 42.4608 205.138 41.8105 196.446 45.9274C190.597 48.6983 183.143 52.1893 180.203 58.0691",
		viewBox: "0 0 204 61",
	},
	{
		name: "Arc",
		id: "line-18",
		path: "M3 103.824C45.3292 106.086 85.2951 90.8282 118.182 63.953C129.508 54.6969 140.763 42.4172 147.387 29.1688C150.391 23.1616 154.398 11.338 149.274 5.78786C140.768 -3.42746 129.585 13.6307 125.893 19.9805C119.22 31.4586 124.234 53.8078 136.148 60.2613C158.264 72.2407 191.043 69.3799 215.315 68.3011C225.006 67.8703 234.869 65.4297 244.439 65.4297C248.152 65.4297 239.179 60.7699 237.794 59.5229C229.618 52.165 229.186 52.3018 239.27 58.7846C240.667 59.6823 250.92 65.2052 250.92 66.168C250.92 66.84 233.48 79.6822 231.887 81.6733",
		viewBox: "0 0 254 107",
	},
	{
		name: "Loop",
		id: "line-19",
		path: "M61.9499 126.019C129.419 134.323 205.111 131.946 269.179 107.397C287.878 100.232 312.661 88.4955 307.573 64.3267C301.574 35.835 261.103 20.5501 236.856 13.8731C190.969 1.23754 142.979 0.450446 96.0779 7.22801C75.3721 10.2202 54.4734 14.7152 35.0413 22.6512C24.1049 27.1176 1.84994 37.8503 3.04637 53.0054C3.93896 64.3117 19.7218 75.4778 28.068 80.8164C50.3829 95.0898 77.4888 103.502 102.805 110.596C157.283 125.862 212.697 134.798 268.687 142.263",
		viewBox: "0 0 311 145",
	},
	{
		name: "Loop2",
		id: "line-20",
		path: "M118.044 89.6246C163.162 89.4205 222.936 90.424 262.268 64.685C273.127 57.5785 289.889 46.2541 280.644 31.5415C266.757 9.43877 226.597 6.18947 204.103 4.22275C163.951 0.712215 122.736 4.85252 83.8345 15.462C59.5841 22.0757 20.3308 33.8561 6.3903 57.3016C-30.0407 118.572 238.749 125.617 256.853 126.542",
		viewBox: "0 0 286 130",
	},

	{
		name: "Line",
		id: "line-21",
		path: "M299.815 3.00583C273.971 13.6017 251.895 14.5279 224.175 15.9679C189.114 17.7893 153.339 14.8193 118.182 14.8193C81.5562 14.8193 19.8571 12.5473 3 54.69",
		viewBox: "0 0 303 58",
	},
	{
		name: "Ribbon",
		id: "line-22",
		path: "M3 30.4C21.2075 12.5926 44.6418 -1.25821 71.4445 4.44442C91.3502 8.67964 76.9349 34.5156 75.3556 46.7556C69.3481 93.3137 195.603 56.1262 214.111 48.8C217.513 47.4533 248.151 32.7085 246.911 32C243.931 30.2972 224.901 27.2 230.2 27.2C238.029 27.2 245.436 30.4 253.4 30.4C257.358 30.4 239.758 56.6452 238.2 60.8",
		viewBox: "0 0 257 73",
	},
	{
		name: "Wisp",
		id: "line-23",
		path: "M3 109.032C12.9269 90.8896 27.5775 58.7965 53.0802 59.3761C72.6481 59.8208 78.7948 82.5425 89.8976 94.8142C120.301 128.418 149.852 41.639 159.501 24.1502C161.982 19.6522 168.018 -2.15518 169.262 7.17381C170.384 15.592 176.062 43.477 169.58 21.6037C167.726 15.3443 171.52 7.77959 165.336 3.14195C162.855 1.28128 140.05 18.2758 138.598 21.1793",
		viewBox: "0 0 176 112",
	},
	{
		name: "Dash",
		id: "line-24",
		path: "M3 139.218C17.2798 109.258 37.8458 85.4745 71.7541 78.1032C101.214 71.699 130.725 74.3391 160.243 69.5089C193.596 64.0513 227.088 50.401 254.993 31.5244C264.505 25.0897 273.886 14.279 283.746 9.34906",
		viewBox: "0 0 300 142",
	},
	{
		name: "Arrow",
		id: "line-25",
		path: "M93.0681 3C72.3063 18.0061 57.7731 25.925 32.2716 21.1435C26.0822 19.983 15.9133 18.8754 10.945 14.459C8.12295 11.9505 3.74946 11.7165 9.24741 9.57834C13.7751 7.81753 20.3406 4.90981 25.2689 4.90981C27.0487 4.90981 9.62202 9.55411 4.26061 10.7455C-2.59384 12.2686 20.5637 33.6269 24.314 37.3771",
		viewBox: "0 0 96 40",
	},

	{
		name: "UpArrow",
		id: "line-26",
		path: "M78.1962 60.5398C68.6178 44.6888 57.7843 28.8722 50.2851 11.8287C49.0822 9.09489 47.8894 5.5718 45.8406 3.29534C42.9846 0.12182 28.0279 23.5019 25.7518 26.5842C23.7884 29.243 -3.83549 60.5398 4.5962 60.5398C9.35888 60.5398 30.1962 60.2274 30.1962 65.3398C30.1962 81.9495 28.5962 98.3099 28.5962 114.94C28.5962 120.053 45.9344 119.74 50.9962 119.74C55.0331 119.74 58.9962 121.17 58.9962 116.184C58.9962 105.221 58.9962 94.2583 58.9962 83.2954C58.9962 81.6216 56.857 58.3281 59.3518 58.0509C63.8727 57.5486 75.9178 61.8006 79.7962 63.7398",
		viewBox: "0 0 83 123",
	},

	{
		name: "Swoop",
		id: "line-27",
		path: "M3 21.2646C9.66217 17.7156 52.7963 -8.20968 61.2223 8.64238C69.2553 24.7084 30.7222 53.7007 51 68.9091C68.3757 81.9408 103.533 66.541 120.511 59.5757C131.852 54.9231 141.231 47.3373 151.711 41.4424C152.475 41.013 158.81 37.2646 156.6 37.2646",
		viewBox: "0 0 170 77",
	},
	{
		name: "Curl",
		id: "line-29",
		path: "M3 103.824C45.3292 106.086 85.2951 90.8282 118.182 63.953C129.508 54.6969 140.763 42.4172 147.387 29.1688C150.391 23.1616 154.398 11.338 149.274 5.78786C140.768 -3.42746 129.585 13.6307 125.893 19.9805C119.22 31.4586 124.234 53.8078 136.148 60.2613C158.264 72.2407 191.043 69.3799 215.315 68.3011C225.006 67.8703 234.869 65.4297 244.439 65.4297C248.152 65.4297 239.179 60.7699 237.794 59.5229C229.618 52.165 229.186 52.3018 239.27 58.7846C240.667 59.6823 250.92 65.2052 250.92 66.168C250.92 66.84 233.48 79.6822 231.887 81.6733",
		viewBox: "0 0 254 107",
	},
	{
		name: "Circle",
		id: "line-30",
		path: "M68.6319 155.919C37.1061 139.914 0.630486 117.722 3.12084 76.6304C5.07103 44.452 27.5746 22.4591 55.1209 9.43042C79.3053 -2.00816 118.753 1.68951 137.343 21.5193C157.268 42.7722 165.033 67.8494 164.632 96.7193C164.233 125.449 147.139 139.18 124.721 152.63C110.541 161.138 119.39 143.551 124.632 140.275C130.65 136.514 123.978 140.573 121.076 143.475C119.142 145.409 110.41 151.892 110.41 155.119C110.41 160.005 128.95 161.092 132.632 162.319",
		viewBox: "0 0 168 165",
	},
	{
		name: "Spiral",
		id: "line-31",
		path: "M3 90.6971C18.8558 134.112 39.4963 151.394 85.9718 146.082C117.8 142.445 149.319 123.764 159.607 91.7581C170.593 57.579 154.038 16.955 119.606 5.81542C89.3218 -3.98244 52.4774 12.8975 36.316 39.3437C23.3259 60.6004 34.3121 91.0633 57.9609 99.8219C64.7505 102.337 79.5273 109.446 73.6639 99.1853C71.8764 96.0571 66.7025 86.6092 68.0406 89.9544C69.5544 93.7388 76.8228 96.8267 79.8179 99.8219C84.9426 104.947 80.8922 103.412 75.5738 104.172C68.9342 105.121 63.0596 110.059 56.4754 111.705",
		viewBox: "0 0 166 150",
	},

	{
		name: "Flow",
		id: "line-32",
		path: "M561.857 302.994C532.866 315.372 507.204 316.295 476.615 308.911C471.884 309.686 478.049 313.855 479.581 315.157C493.607 326.25 516.45 326.53 534.481 325.59C490.789 350.972 435.147 372.711 384.5 367.107C325.694 361.784 264.861 319.756 258.845 257.868C295.269 244.93 332.171 222.433 350.927 187.377C370.804 139.992 321.755 116.028 282.001 144.755C249.764 168.06 232.903 208.127 231.617 247.485C78.8341 278.288 -20.747 145.596 11.2271 1.69617C11.2734 1.52067 11.2834 1.33758 11.2565 1.15808C11.2297 0.978577 11.1665 0.806432 11.0709 0.652174C10.9752 0.497917 10.8491 0.364781 10.7003 0.260904C10.5515 0.157026 10.383 0.08459 10.2052 0.0480197C10.0342 0.000869941 9.85553 -0.0117224 9.67961 0.0109693C9.50368 0.0336611 9.33404 0.0911846 9.18059 0.180183C9.02715 0.269181 8.89298 0.387864 8.78592 0.529304C8.67886 0.670743 8.60107 0.832103 8.55708 1.00395C-31.4764 150.392 73.2798 290.93 232.59 264.592C237.782 310.427 270.382 349.62 310.943 369.53C383.181 406.102 477.966 381.215 538.816 332.397C537.266 340.638 532.635 348.022 531.053 356.229C529.207 365.838 532.849 383.424 537.217 377.985C539.156 368.819 541.795 359.816 545.112 351.054C548.309 342.138 552.199 332.166 555.808 323.415L556.533 321.767L563.686 304.988C563.807 304.726 563.848 304.433 563.804 304.147C563.759 303.862 563.631 303.596 563.435 303.382C563.24 303.169 562.986 303.019 562.705 302.95C562.424 302.881 562.129 302.896 561.857 302.994ZM276.216 186.651C300.79 139.432 356.976 147.327 324.639 191.777C306.897 212.739 284.25 228.994 258.713 239.095C260.445 220.502 266.434 202.558 276.216 186.651Z",
		viewBox: "0 0 564 387",
	},
];

export const compoentCode = `
  "use client";

import { type Variants, motion, useAnimationControls } from "motion/react";
import React, { useState } from "react";

type PathData = {
  d: string;
  stroke?: string;
  strokeWidth?: number;
  strokeLinecap?: "butt" | "round" | "square";
};

type HoverAnimationType = "float" | "pulse" | "redraw" | "color" | "sequential";

type TAnimateSvgProps = {
  width: string;
  height: string;
  viewBox: string;
  className: string;
  path?: string; // Single path (legacy)
  paths?: PathData[]; // New multiple path support
  strokeColor?: string;
  strokeWidth?: number;
  strokeLinecap?: "butt" | "round" | "square";
  animationDuration?: number;
  animationDelay?: number;
  animationBounce?: number;
  staggerDelay?: number;
  reverseAnimation?: boolean;
  enableHoverAnimation?: boolean;
  hoverAnimationType?: HoverAnimationType;
  hoverStrokeColor?: string | null;
  initialAnimation?: boolean;
};

export const AnimateSvg: React.FC<TAnimateSvgProps> = ({
  width,
  height,
  viewBox,
  className,
  path,
  paths = [],
  strokeColor = "#cecece",
  strokeWidth = 3,
  strokeLinecap = "round",
  animationDuration = 1.5,
  animationDelay = 0,
  animationBounce = 0.3,
  staggerDelay = 0.2,
  reverseAnimation = false,
  enableHoverAnimation = false,
  hoverAnimationType = "redraw",
  hoverStrokeColor = "#4f46e5",
  initialAnimation = true,
}) => {
  const [isHovering, setIsHovering] = useState(false);

  const normalizedPaths: PathData[] = React.useMemo(() => {
    if (paths.length > 0) return paths;
    if (path) {
      return [
        {
          d: path,
          stroke: strokeColor,
          strokeWidth,
          strokeLinecap,
        },
      ];
    }
    return [];
  }, [paths, path, strokeColor, strokeWidth, strokeLinecap]);

  // Initial animation variants
  const getPathVariants = (index: number): Variants => ({
    hidden: {
      pathLength: 0,
      opacity: 0,
      pathOffset: reverseAnimation ? 1 : 0,
    },
    visible: {
      pathLength: 1,
      opacity: 1,
      pathOffset: reverseAnimation ? 0 : 0,
      transition: {
        pathLength: {
          type: "spring",
          duration: animationDuration,
          bounce: animationBounce,
          delay: animationDelay + index * staggerDelay,
        },
        pathOffset: {
          duration: animationDuration,
          delay: animationDelay + index * staggerDelay,
        },
        opacity: {
          duration: animationDuration / 4,
          delay: animationDelay + index * staggerDelay,
        },
      },
    },
  });

  if (normalizedPaths.length === 0) return null;

  return (
    <motion.svg
      width={width}
      height={height}
      viewBox={viewBox}
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
      initial={initialAnimation ? "hidden" : "visible"}
      animate="visible"
      onHoverStart={() => setIsHovering(true)}
      onHoverEnd={() => setIsHovering(false)}
      whileHover={
        enableHoverAnimation && hoverAnimationType !== "redraw"
          ? { scale: 1.05 }
          : {}
      }
    >
      {normalizedPaths.map((pathData, index) => (
        <AnimatedPath
          key={index}
          pathData={pathData}
          index={index}
          strokeColor={strokeColor}
          strokeWidth={strokeWidth}
          strokeLinecap={strokeLinecap}
          initialAnimation={initialAnimation}
          pathVariants={getPathVariants(index)}
          isHovering={isHovering && enableHoverAnimation}
          hoverAnimationType={hoverAnimationType}
          hoverStrokeColor={hoverStrokeColor}
          totalPaths={normalizedPaths.length}
        />
      ))}
    </motion.svg>
  );
};

interface AnimatedPathProps {
  pathData: PathData;
  index: number;
  strokeColor: string;
  strokeWidth: number;
  strokeLinecap: "butt" | "round" | "square";
  initialAnimation: boolean;
  pathVariants: Variants;
  isHovering: boolean;
  hoverAnimationType: HoverAnimationType;
  hoverStrokeColor: string | null;
  totalPaths: number;
}

const AnimatedPath: React.FC<AnimatedPathProps> = ({
  pathData,
  index,
  strokeColor,
  strokeWidth,
  strokeLinecap,
  initialAnimation,
  pathVariants,
  isHovering,
  hoverAnimationType,
  hoverStrokeColor,
  totalPaths,
}) => {
  const controls = useAnimationControls();
  const originalColor = pathData.stroke || strokeColor;

  // Handle hover animations
  React.useEffect(() => {
    if (!isHovering) {
      controls.stop();
      if (initialAnimation) {
        controls.start("visible");
      }
      return;
    }

    switch (hoverAnimationType) {
      case "redraw":
        controls.start({
          pathLength: [1, 0, 1],
          transition: {
            pathLength: {
              repeat: Number.POSITIVE_INFINITY,
              duration: 3,
              ease: "easeInOut",
            },
          },
        });
        break;

      case "float":
        controls.start({
          y: [0, -2, 0],
          transition: {
            y: {
              repeat: Number.POSITIVE_INFINITY,
              duration: 1.5,
              ease: "easeInOut",
            },
          },
        });
        break;

      case "pulse":
        controls.start({
          scale: [1, 1.03, 1],
          transition: {
            scale: {
              repeat: Number.POSITIVE_INFINITY,
              duration: 1.3,
              ease: "easeInOut",
            },
          },
        });
        break;

      case "color":
        controls.start({
          stroke: [
            originalColor,
            hoverStrokeColor || strokeColor,
            originalColor,
          ],
          transition: {
            stroke: {
              repeat: Number.POSITIVE_INFINITY,
              duration: 2,
              ease: "easeInOut",
            },
          },
        });
        break;

      case "sequential":
        controls.start({
          pathLength: [1, 0, 1],
          transition: {
            pathLength: {
              repeat: Number.POSITIVE_INFINITY,
              duration: 2,
              delay: (index / Math.max(totalPaths, 1)) * 2,
              ease: "easeInOut",
            },
          },
        });
        break;
    }
  }, [
    isHovering,
    hoverAnimationType,
    controls,
    originalColor,
    hoverStrokeColor,
    strokeColor,
    index,
    totalPaths,
    initialAnimation,
  ]);

  return (
    <motion.path
      d={pathData.d}
      stroke={pathData.stroke ?? strokeColor}
      strokeWidth={pathData.strokeWidth ?? strokeWidth}
      strokeLinecap={pathData.strokeLinecap ?? strokeLinecap}
      initial={initialAnimation ? "hidden" : "visible"}
      animate={controls}
      variants={pathVariants}
    />
  );
};
`;
